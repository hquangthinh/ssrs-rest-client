{
  "swagger" : "2.0",
  "info" : {
    "title" : "SQL Server 2017 Reporting Services REST API",
    "version" : "2.0",
    "description" : "The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog. \nFor example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.\n   \nThe REST API can also be used to provide more advanced functionality, such as:\n* Navigate the folder hierarchy\n* Discover the contents of a folder\n* Download a report definition\n* Modify default report parameters\n* Change or execute a refresh plan\n* A whole lot more\n\nThe REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).\n\nHappy coding!\n\n__API samples:__ https://github.com/Microsoft/Reporting-Services\n\n__Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation\n\n__Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog\n\n__Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices\n"
  },
  "schemes" : [ "http", "https" ],
  "host" : "localhost",
  "basePath" : "/reports/api/v2.0",
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "tags" : [ {
    "name" : "CacheRefreshPlans"
  }, {
    "name" : "CatalogItems"
  }, {
    "name" : "DataSets"
  }, {
    "name" : "DataSources"
  }, {
    "name" : "Extensions"
  }, {
    "name" : "FavoriteItems"
  }, {
    "name" : "Folders"
  }, {
    "name" : "Kpis"
  }, {
    "name" : "LinkedReports"
  }, {
    "name" : "Me"
  }, {
    "name" : "MobileReports"
  }, {
    "name" : "Reports"
  }, {
    "name" : "Resources"
  }, {
    "name" : "Session"
  }, {
    "name" : "Subscriptions"
  }, {
    "name" : "System"
  } ],
  "definitions" : {
    "AllowedAction" : {
      "type" : "object",
      "properties" : {
        "Action" : {
          "type" : "string",
          "description" : "The allowed action.",
          "format" : "string"
        }
      },
      "title" : "AllowedAction",
      "description" : "An object that specifies an allowed action on a CatalogItem."
    },
    "BulkOperationsResult" : {
      "type" : "object",
      "properties" : {
        "FailedOperations" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "HasErrors" : {
          "type" : "boolean",
          "format" : "true|false"
        }
      },
      "title" : "BulkOperationsResult",
      "description" : "Result of bulk operations like MoveItems and DeleteItems"
    },
    "CacheOptions" : {
      "type" : "object",
      "properties" : {
        "ExecutionType" : {
          "$ref" : "#/definitions/ItemExecutionType"
        },
        "Expiration" : {
          "$ref" : "#/definitions/ExpirationReference"
        }
      },
      "title" : "CacheOptions",
      "description" : "An object that specifies options for a data cache."
    },
    "CacheRefreshPlan" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier by which this CacheRefreshPlan can be referenced in the definition of other items.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "Owner" : {
          "type" : "string",
          "description" : "A string value that specifies the owner of the CacheRefreshPlan.",
          "format" : "string"
        },
        "Description" : {
          "type" : "string",
          "description" : "A string value that contains descriptive text about the CacheRefreshPlan.",
          "format" : "string"
        },
        "CatalogItemPath" : {
          "type" : "string",
          "description" : "A string value that contains the fully qualified URL path location of the CatalogItem that represents the CacheRefreshPlan.",
          "format" : "string"
        },
        "EventType" : {
          "type" : "string",
          "description" : "A string value that specifies which EventType to use for logging.",
          "format" : "string"
        },
        "Schedule" : {
          "$ref" : "#/definitions/ScheduleReference"
        },
        "LastRunTime" : {
          "type" : "string",
          "description" : "A date-time value that specifies the date-time of the last run of the CacheRefreshPlan.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "LastStatus" : {
          "type" : "string",
          "description" : "A string value that contains the network username of the last user to modify the CacheRefreshPlan.",
          "format" : "string"
        },
        "ModifiedBy" : {
          "type" : "string",
          "description" : "A string value that contains the network user name of the last user to modify the CacheRefreshPlan",
          "format" : "string"
        },
        "ModifiedDate" : {
          "type" : "string",
          "description" : "A string value that contains the date-time of the last modification to the CacheRefreshPlan.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "ParameterValues" : {
          "type" : "array",
          "description" : "An array of parameter values for the CacheRefreshPlan. All parameters without a default value MUST have a value specified.",
          "items" : {
            "$ref" : "#/definitions/ParameterValue"
          }
        }
      },
      "title" : "CacheRefreshPlan",
      "description" : "An object that specifies a plan for data cache refresh. The plan can be stored and re-used by multiple CatalogItems."
    },
    "CatalogItem" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier by which this CatalogItem can be referenced in requests or by other defined objects.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "Name" : {
          "type" : "string",
          "description" : "A string value that specifies the name for the CatalogItem. This name is typically displayed in the user interface.",
          "format" : "string"
        },
        "Description" : {
          "type" : "string",
          "description" : "A string value that contains descriptive text about the CatalogItem.",
          "format" : "string"
        },
        "Path" : {
          "type" : "string",
          "description" : "A string value that contains the full server path for the CatalogItem. Path is defined as an alternate key on the CatalogItem and can be used as the parameter by which CatalogItem can be referenced in requests or by other defined objects.",
          "format" : "string"
        },
        "Type" : {
          "$ref" : "#/definitions/CatalogItemType"
        },
        "Hidden" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates if the CatalogItem is hidden. If true, the item will generally not appear in listings of CatalogItems within the parent item.",
          "format" : "true|false"
        },
        "Size" : {
          "type" : "integer",
          "description" : "An Int64 value that contains the size of the CatalogItem in bytes.",
          "format" : "int64"
        },
        "ModifiedBy" : {
          "type" : "string",
          "description" : "A string value that contains the network user name of the last user to modify the CatalogItem.",
          "format" : "string"
        },
        "ModifiedDate" : {
          "type" : "string",
          "description" : "A string value that contains the date-time of the last modification to the CatalogItem.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "CreatedBy" : {
          "type" : "string",
          "description" : "A string value that represents the network user name of the user who originally created the CatalogItem.",
          "format" : "string"
        },
        "CreatedDate" : {
          "type" : "string",
          "description" : "A string that contains the date-time of the creation of the CatalogItem.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "ParentFolderId" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier of the Folder CatalogItem that contains this CatalogItem.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "ContentType" : {
          "type" : "string",
          "description" : "A string value that contains a SOAP MIME-type that is associated with the CatalogItem.",
          "format" : "string"
        },
        "Content" : {
          "type" : "string",
          "description" : "A string value that contains binary encoding by base64url encoding rules. The value of this property is not processed by the server. In object creation the server receives and stores a value, and in object retrieval the server returns the previously stored value."
        },
        "IsFavorite" : {
          "type" : "boolean",
          "description" : "A boolean value that specifies whether the CatalogItem is designated as a Favorite.",
          "format" : "true|false"
        }
      },
      "title" : "CatalogItem",
      "description" : "CatalogItem is an abstract type that contains the common properties of all the types of CatalogItems. Hence, it is the base type from which the other CatalogItem types are derived."
    },
    "CatalogItemType" : {
      "type" : "string",
      "enum" : [ "Unknown", "Folder", "Report", "DataSource", "DataSet", "Component", "Resource", "Kpi", "MobileReport", "LinkedReport", "ReportModel" ],
      "title" : "CatalogItemType",
      "description" : "An enumeration of values that specifies the type of the CatalogItem."
    },
    "CredentialsStoredInServer" : {
      "type" : "object",
      "properties" : {
        "UserName" : {
          "type" : "string",
          "description" : "A string value that contains the user name to be used to connect to an external data source.",
          "format" : "string"
        },
        "Password" : {
          "type" : "string",
          "description" : "A string value that contains the password to be used to connect to an external data source.",
          "format" : "string"
        },
        "UseAsWindowsCredentials" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the supplied credentials should be used as Windows credentials.",
          "format" : "true|false"
        },
        "ImpersonateAuthenticatedUser" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the session should impersonate the user for the supplied credentials.",
          "format" : "true|false"
        }
      },
      "title" : "CredentialsStoredInServer",
      "description" : "This object holds credentials for connections to an external data source. The object is stored on the Report Server for later retrieval and use. NOTE: This object represents a security risk as its properties can be seen in plain text over the HTTP protocol; HTTPS is recommended."
    },
    "CredentialsSuppliedByUser" : {
      "type" : "object",
      "properties" : {
        "DisplayText" : {
          "type" : "string",
          "description" : "A string value that contains text used to prompt a user to supply credentials for connections to an external data source.",
          "format" : "string"
        },
        "UseAsWindowsCredentials" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether credentials the user supplies in a prompt should be used as Windows credentials.",
          "format" : "true|false"
        }
      },
      "title" : "CredentialsSuppliedByUser",
      "description" : "An object that contains information about prompting a user for credentials for connections to an external data source."
    },
    "Comment" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier of the comment.",
          "format" : "uuid"
        },
        "ItemId" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier of the CatalogItem item to which the comment is attached.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "UserName" : {
          "type" : "string",
          "description" : " A string value that represents the user who created the comment item.",
          "format" : "string"
        },
        "ThreadId" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier of the thread of the comment. A comment thread can be used to group comments that are a response to one another in one grouping.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "AttachmentPath" : {
          "type" : "string",
          "description" : "A string value that specifies the server path to an attachment that is part of the comment.",
          "format" : "string"
        },
        "Text" : {
          "type" : "string",
          "description" : "A string value that contains the text of the comment.",
          "format" : "string"
        },
        "CreatedDate" : {
          "type" : "string",
          "description" : "A string that contains the date-time of the creation of the comment.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "ModifiedDate" : {
          "type" : "string",
          "description" : "A string value that contains the date-time of the last modification to the comment.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        }
      },
      "title" : "Comment",
      "description" : "An object that specifies a comment that is attached to a CatalogItem."
    },
    "DailyRecurrence" : {
      "type" : "object",
      "properties" : {
        "DaysInterval" : {
          "type" : "integer",
          "description" : "An Int32 value representing interval in days.",
          "format" : "int32"
        }
      },
      "title" : "DailyRecurrence",
      "description" : "Represents the intervals at which a scheduled report runs. Intervals are specified in days."
    },
    "DataSet" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CatalogItem"
      }, {
        "type" : "object",
        "properties" : {
          "HasParameters" : {
            "type" : "boolean",
            "description" : "A boolean value that indicates whether the dataset definition contains parameters.",
            "format" : "true|false"
          },
          "QueryExecutionTimeOut" : {
            "type" : "integer",
            "description" : "An Int32 value that indicates the query execution timeout in seconds.",
            "format" : "int32"
          }
        },
        "title" : "DataSet",
        "description" : "The DataSet object is derived from the abstract type CatalogItem and therefore contains all of its properties. This object specifies the information needed to supply a set of data to a report. It is analogous to a view in a database and can include a data source pointer, a query definition, and optional parameter values, calculated fields, and filtering and collation information."
      } ]
    },
    "DataSetField" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string"
        },
        "DataType" : {
          "$ref" : "#/definitions/ReportParameterType"
        }
      },
      "title" : "DataSetField",
      "description" : "An object that represents a field in a DataSet."
    },
    "DataSetItem" : {
      "type" : "object",
      "properties" : {
        "TimeUnit" : {
          "type" : "string",
          "description" : "The time unit for the DataSetItem. The possible values for this string are the following: 'Year', 'Quarter', 'Month', 'Weekday', 'Hour'.",
          "format" : "string"
        },
        "DateTimeColumn" : {
          "type" : "string",
          "description" : "A string value that specifies the name of the column in the DataSetItem that represents date and time.",
          "format" : "string"
        }
      },
      "title" : "DataSetItem",
      "description" : "An object that contains additional dataset properties for the MobileReportManifest"
    },
    "DataSetParameter" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "The name of the parameter.",
          "format" : "string"
        },
        "Value" : {
          "type" : "string",
          "description" : "The value to set for the parameter.",
          "format" : "string"
        }
      },
      "title" : "DataSetParameter",
      "description" : "An object that contains the name and value for a parameter to be used when executing a DataSet."
    },
    "DataSetParameterInfo" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "The name of the parameter.",
          "format" : "string"
        },
        "DefaultValue" : {
          "type" : "string",
          "description" : "The default value for the parameter.",
          "format" : "string"
        },
        "Nullable" : {
          "type" : "boolean",
          "description" : "Specifies whether the parameter can be null.",
          "format" : "true|false"
        },
        "DataType" : {
          "$ref" : "#/definitions/ReportParameterType"
        },
        "IsExpression" : {
          "type" : "boolean",
          "description" : "Specifies whether the parameter is an expression.",
          "format" : "true|false"
        },
        "IsMultiValued" : {
          "type" : "boolean",
          "description" : "Specifies whether the parameter contains multiple values.",
          "format" : "true|false"
        }
      },
      "title" : "DataSetParameterInfo",
      "description" : "An object that contains information about a parameter in a DataSet."
    },
    "DataSetSchema" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "The name of the DataSet.",
          "format" : "string"
        },
        "Fields" : {
          "type" : "array",
          "description" : "The fields of the DataSet.",
          "items" : {
            "$ref" : "#/definitions/DataSetField"
          }
        },
        "Parameters" : {
          "type" : "array",
          "description" : "The parameters for the DataSet.",
          "items" : {
            "$ref" : "#/definitions/DataSetParameterInfo"
          }
        }
      },
      "title" : "DataSetSchema",
      "description" : "An object that reprents the schema for a DataSet"
    },
    "DataSource" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CatalogItem"
      }, {
        "type" : "object",
        "properties" : {
          "IsEnabled" : {
            "type" : "boolean",
            "description" : "A Boolean value that specifies whether the DataSource is enabled for use.",
            "format" : "true|false"
          },
          "ConnectionString" : {
            "type" : "string",
            "description" : "A string value that can be passed to a data source in order to begin the process of establishing connection.",
            "format" : "string"
          },
          "DataSourceType" : {
            "type" : "string",
            "description" : "DataSource extension such as 'SQL'.",
            "format" : "string"
          },
          "IsOriginalConnectionStringExpressionBased" : {
            "type" : "boolean",
            "description" : "Indicates whether the original connection string for the data source was expression-based.",
            "format" : "true|false"
          },
          "IsConnectionStringOverridden" : {
            "type" : "boolean",
            "description" : "Specifies whether the original connection string is overridden.",
            "format" : "true|false"
          },
          "CredentialsByUser" : {
            "$ref" : "#/definitions/CredentialsSuppliedByUser"
          },
          "CredentialsInServer" : {
            "$ref" : "#/definitions/CredentialsStoredInServer"
          },
          "IsReference" : {
            "type" : "boolean",
            "description" : "Indicates whether this is a reference to a shared data source or an embedded data source.",
            "format" : "true|false"
          },
          "Subscriptions" : {
            "$ref" : "#/definitions/Subscription"
          }
        },
        "title" : "DataSource",
        "description" : "An object that defines information about an external source of data that can be connected to as a source of data for Reporting Services. DataSource is derived from CatalogItem and therefore includes all properties defined by CatalogItem."
      } ]
    },
    "DataSourceCheckResult" : {
      "type" : "object",
      "properties" : {
        "IsSuccessful" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "ErrorMessage" : {
          "type" : "string"
        }
      },
      "description" : "Represents the result of testing a DataSource connection",
      "title" : "DataSourceCheckResult"
    },
    "DaysOfWeekSelector" : {
      "type" : "object",
      "properties" : {
        "Sunday" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "Monday" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "Tuesday" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "Wednesday" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "Thursday" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "Friday" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "Saturday" : {
          "type" : "boolean",
          "format" : "true|false"
        }
      },
      "description" : "Represents the days of the week on which a scheduled report runs.",
      "title" : "DaysOfWeekSelector"
    },
    "DrillthroughTarget" : {
      "type" : "object",
      "properties" : {
        "DrillthroughTargetType" : {
          "$ref" : "#/definitions/DrillthroughTargetType"
        }
      },
      "title" : "DrillthroughTarget",
      "description" : "An object that specifies the type of the target of a drillthrough operation."
    },
    "DrillthroughTargetType" : {
      "type" : "string",
      "enum" : [ "Url", "CatalogItem" ],
      "title" : "DrillthroughTargetType",
      "description" : "An enumeration of values that specify the available types for the target object of a drillthrough operation."
    },
    "ExpirationReference" : {
      "type" : "object",
      "properties" : {
        "Minutes" : {
          "type" : "integer",
          "description" : "Number of minutes until expiration.",
          "format" : "int32"
        },
        "Schedule" : {
          "$ref" : "#/definitions/ScheduleReference"
        }
      },
      "title" : "ExpirationReference",
      "description" : "An object that contains a specification for cache expiration, expressed either in minutes or by a schedule."
    },
    "Extension" : {
      "type" : "object",
      "properties" : {
        "ExtensionType" : {
          "$ref" : "#/definitions/ExtensionType"
        },
        "Name" : {
          "type" : "string",
          "description" : "A string value that specifies the name for the Extension. This name will typically be displayed in the user interface.",
          "format" : "string"
        },
        "LocalizedName" : {
          "type" : "string",
          "description" : "A string value that specifies a localized name for the Extension.",
          "format" : "string"
        },
        "Visible" : {
          "type" : "boolean",
          "description" : "A Boolean value that indicates if the Extension is visible. If false, the item will generally not appear in listings of available extensions.",
          "format" : "true|false"
        }
      },
      "title" : "Extension",
      "description" : "An object that holds the definition of a Reporting Services extension."
    },
    "ExtensionParameter" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "A string value that specifies the name for the ExtensionParameter.",
          "format" : "string"
        },
        "DisplayName" : {
          "type" : "string",
          "description" : "The name of the extension setting that is displayed to the user.",
          "format" : "string"
        },
        "Required" : {
          "type" : "boolean",
          "description" : "Indicates whether the value is required.",
          "format" : "true|false"
        },
        "ReadOnly" : {
          "type" : "boolean",
          "description" : "Indicates whether the setting is read-only.",
          "format" : "true|false"
        },
        "Value" : {
          "type" : "string",
          "description" : "A string that represents the value of an extension parameter.",
          "format" : "string"
        },
        "Error" : {
          "type" : "string",
          "description" : "An error that describes a problem with the value of the setting.",
          "format" : "string"
        },
        "Encrypted" : {
          "type" : "boolean",
          "description" : "Indicates whether the extension parameter value should be encrypted in the Report Server database.",
          "format" : "true|false"
        },
        "IsPassword" : {
          "type" : "boolean",
          "description" : "A Boolean value that indicates whether the ExtensionParameter is a password.",
          "format" : "true|false"
        },
        "ValidValues" : {
          "type" : "array",
          "description" : "A set of values that can be configured for the setting.",
          "items" : {
            "$ref" : "#/definitions/ValidValue"
          }
        },
        "ValidValuesIsNull" : {
          "type" : "boolean",
          "description" : "A Boolean value that indicates whether the ValidValues property is null.",
          "format" : "true|false"
        }
      },
      "title" : "ExtensionParameter",
      "description" : "An object that contains the definition of a Reporting Services extension's parameter."
    },
    "ExtensionSettings" : {
      "type" : "object",
      "properties" : {
        "Extension" : {
          "type" : "string",
          "description" : "A string value that specifies the name of the Reporting Services extension that the settings in the object apply to.",
          "format" : "string"
        },
        "ParameterValues" : {
          "$ref" : "#/definitions/ParameterValue"
        }
      },
      "title" : "ExtensionSettings",
      "description" : "An object that defines parameter values that are used for a Reporting Services extension."
    },
    "ExtensionType" : {
      "type" : "string",
      "enum" : [ "Delivery", "DeliveryUI", "Render", "Data", "All" ],
      "title" : "ExtensionType",
      "description" : "An enumeration of Reporting Services extension types."
    },
    "FavoriteItem" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier of the CatalogItem that is marked as a favorite.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "Item" : {
          "$ref" : "#/definitions/CatalogItem"
        }
      },
      "title" : "FavoriteItem",
      "description" : "An object that a reference to a CatalogItem that the user has marked as a favorite."
    },
    "Folder" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CatalogItem"
      }, {
        "type" : "object",
        "properties" : { },
        "title" : "Folder",
        "description" : "The Folder object is derived from the abstract type, CatalogItem, and therefore contains all of its properties. This object specifies the definition of a Folder on the server. It does not contain additional properties beyond those specified for the base type, CatalogItem."
      } ]
    },
    "HistorySnapshot" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier of the CatalogItem for which this is a HistorySnapshot.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "HistoryId" : {
          "type" : "string",
          "description" : "A string that contains the date-time of the execution of the HistorySnapshot. This, together with the Id of the CatalogItem, identifies this HistorySnapshot",
          "format" : "string"
        },
        "CreationDate" : {
          "type" : "string",
          "description" : "A string that contains the date-time of the creation of the HistorySnapshot.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "Size" : {
          "type" : "integer",
          "description" : "Size of the HistorySnapshot.",
          "format" : "int32"
        }
      },
      "title" : "HistorySnapshot",
      "description" : "An object that contains history snapshot information."
    },
    "HistorySnapshotOptions" : {
      "type" : "object",
      "properties" : {
        "CatalogItemId" : {
          "type" : "string",
          "description" : "The Id of the CatalogItem that this HistorySnapshotOptions belongs to.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "HistorySnapshotsOptions" : {
          "$ref" : "#/definitions/ReportHistorySnapshotsOptions"
        }
      },
      "title" : "HistorySnapshotOptions",
      "description" : "An object that has a reference to a history snapshot option for a given catalog."
    },
    "ItemExecutionType" : {
      "type" : "string",
      "enum" : [ "Live", "Cache", "Snapshot" ],
      "title" : "ItemExecutionType",
      "description" : "An enumeration that specifies whether the item's execution is with live data, cached data, or based on a data snapshot."
    },
    "ItemPolicy" : {
      "type" : "object",
      "properties" : {
        "InheritParentPolicy" : {
          "type" : "boolean",
          "description" : "A Boolean value that indicates whether the access policy is to be inherited from the item's parent item.",
          "format" : "true|false"
        },
        "Policies" : {
          "description" : "An array of objects of type Policy that specify the access policies to be applied to the item.      ",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Policy"
          }
        }
      },
      "title" : "ItemPolicy",
      "description" : "An object that specifies the access policy for the item."
    },
    "Kpi" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CatalogItem"
      }, {
        "type" : "object",
        "properties" : {
          "ValueFormat" : {
            "$ref" : "#/definitions/KpiValueFormat"
          },
          "Visualization" : {
            "$ref" : "#/definitions/KpiVisualization"
          },
          "DrillthroughTarget" : {
            "$ref" : "#/definitions/DrillthroughTarget"
          },
          "Currency" : {
            "type" : "string",
            "description" : "A string value that specifies the currency. Must follow the ISO 4217 Currency codes standard.",
            "format" : "string"
          },
          "Values" : {
            "$ref" : "#/definitions/KpiValues"
          },
          "Data" : {
            "$ref" : "#/definitions/KpiData"
          }
        },
        "title" : "Kpi",
        "description" : "An object that specifies a Key Process Indicator (KPI). KPI is derived from the abstract type CatalogItem and therefore includes all of its properties."
      } ]
    },
    "KpiData" : {
      "type" : "object",
      "properties" : {
        "Value" : {
          "$ref" : "#/definitions/KpiDataItem"
        },
        "Goal" : {
          "$ref" : "#/definitions/KpiDataItem"
        },
        "Status" : {
          "$ref" : "#/definitions/KpiDataItem"
        },
        "TrendSet" : {
          "$ref" : "#/definitions/KpiDataItem"
        }
      },
      "title" : "KpiData",
      "description" : "An object that specifies the metadata source for the component parts of a KPI."
    },
    "KpiDataItem" : {
      "type" : "object",
      "properties" : {
        "Type" : {
          "$ref" : "#/definitions/KpiDataItemType"
        }
      },
      "title" : "KpiDataItem",
      "description" : "An enumeration value that specifies the type of the KPI data item."
    },
    "KpiDataItemType" : {
      "type" : "string",
      "enum" : [ "Static", "Shared" ],
      "title" : "KpiDataItemType",
      "description" : "An enumeration of values that specifies whether the KPI data item is static or shared."
    },
    "KpiSharedDataItemAggregation" : {
      "type" : "string",
      "enum" : [ "None", "First", "Last", "Min", "Max", "Average", "Sum" ],
      "title" : "KpiSharedDataItemAggregation",
      "description" : "An enumeration of values that specify the available aggregations for KPIs."
    },
    "KpiValueFormat" : {
      "type" : "string",
      "enum" : [ "General", "Abbreviated", "DefaultCurrency", "DefaultCurrencyWithDecimals", "AbbreviatedDefaultCurrency", "Percent", "PercentWithDecimals" ],
      "title" : "KpiValueFormat",
      "description" : "An enumeration of values that specifies the available formats for KPI values."
    },
    "KpiValues" : {
      "type" : "object",
      "properties" : {
        "Value" : {
          "type" : "string",
          "description" : "A string value that specifies the value of the Value Property for the KPI.",
          "format" : "string"
        },
        "Goal" : {
          "type" : "number",
          "format" : "double",
          "description" : "A Double value that specifies the value of the Goal Property for the KPI."
        },
        "Status" : {
          "type" : "number",
          "format" : "double",
          "description" : "A Double value that specifies the value of the Status Property for the KPI."
        },
        "TrendSet" : {
          "description" : "An array of values that specifies the trendset for the KPI.",
          "type" : "array",
          "items" : {
            "type" : "integer",
            "format" : "double"
          }
        }
      },
      "title" : "KpiValues",
      "description" : "An object that specifies the current set of values for a KPI."
    },
    "KpiVisualization" : {
      "type" : "string",
      "enum" : [ "None", "Bar", "Line", "Step", "Area" ],
      "title" : "KpiVisualization",
      "description" : "An enumeration of values that specifies the available types of visualizations for a KPI."
    },
    "LinkedReport" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CatalogItem"
      }, {
        "type" : "object",
        "properties" : {
          "HasParameters" : {
            "type" : "boolean",
            "description" : "A boolean value that indicates whether the LinkedReport has parameters.",
            "format" : "true|false"
          },
          "Link" : {
            "type" : "string",
            "description" : " A string value that specifies the path to the report item that this linked report is linked to.",
            "format" : "string"
          }
        },
        "title" : "LinkedReport",
        "description" : "An object that specifies a linked report. A linked report is a CatalogItem that contains a reference to the report definition but has its own set of report properties and settings."
      } ]
    },
    "ManifestItem" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier by which this defined item can be referenced in requests or in other defined objects.",
          "format" : "uuid"
        },
        "Path" : {
          "type" : "string",
          "description" : "A string value that contains the complete URL for the defined item."
        },
        "Name" : {
          "type" : "string",
          "description" : "A string value that specifies the name for the item. This name will typically be displayed in the user interface."
        },
        "Hash" : {
          "type" : "string",
          "description" : "A string value that contains an SHA256 hash of the contents of the item."
        }
      }
    },
    "MinuteRecurrence" : {
      "type" : "object",
      "properties" : {
        "MinutesInterval" : {
          "type" : "integer",
          "description" : "An Int32 value representing interval in minutes.",
          "format" : "int32"
        }
      },
      "title" : "MinuteRecurrence",
      "description" : "Represents the intervals at which a scheduled report runs. Intervals are specified in minutes."
    },
    "MobileReport" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CatalogItem"
      }, {
        "type" : "object",
        "properties" : {
          "AllowCaching" : {
            "type" : "boolean",
            "description" : "A boolean value that indicates whether the MobileReport allows caching.",
            "format" : "true|false"
          },
          "Manifest" : {
            "$ref" : "#/definitions/MobileReportManifest"
          },
          "HasSharedDataSets" : {
            "type" : "boolean",
            "description" : "A boolean value that indicates whether the MobileReport has shared DataSets associated with it.",
            "format" : "true|false"
          }
        },
        "title" : "MobileReport",
        "description" : "An object that specifies the content of a MobileReport."
      } ]
    },
    "MobileReportManifest" : {
      "type" : "object",
      "properties" : {
        "Resources" : {
          "type" : "array",
          "description" : "An array of items of type ResourceGroup that specify the resources referenced in this MobileReport. A Resource is a generalized object and its content type is undefined.  A client must be able to understand the content returned in the Resource.",
          "items" : {
            "$ref" : "#/definitions/ResourceGroup"
          }
        },
        "DataSets" : {
          "type" : "array",
          "description" : "An array of objects of type DataSetItem that specifies the DataSets referenced in this MobileReport.",
          "items" : {
            "$ref" : "#/definitions/DataSetItem"
          }
        },
        "Thumbnails" : {
          "type" : "array",
          "description" : "An array of items of type ThumbnailItem that contains the Thumbnails associated with the MobileReport.",
          "items" : {
            "$ref" : "#/definitions/ThumbnailItem"
          }
        }
      },
      "title" : "MobileReportManifest",
      "description" : "An object that contains the specification of the contents of a mobile report."
    },
    "MobileReportResourceGroupType" : {
      "type" : "string",
      "enum" : [ "Unknown", "Style", "Map" ],
      "title" : "MobileReportResourceGroupType",
      "description" : "An enumeration of values that specifies the known types for MobileReport Resources."
    },
    "MobileReportThumbnailType" : {
      "type" : "string",
      "enum" : [ "Unknown", "Landscape", "Portrait" ],
      "title" : "MobileReportThumbnailType",
      "description" : "An enumeration of values that specifies the available orientations for Thumbnails."
    },
    "MonthlyDOWRecurrence" : {
      "type" : "object",
      "properties" : {
        "WhichWeek" : {
          "$ref" : "#/definitions/WeekNumberEnum"
        },
        "WhichWeekSpecified" : {
          "type" : "boolean",
          "description" : "Specifies whether week is specified",
          "format" : "true|false"
        },
        "DaysOfWeek" : {
          "$ref" : "#/definitions/DaysOfWeekSelector"
        },
        "MonthsOfYear" : {
          "$ref" : "#/definitions/MonthsOfYearSelector"
        }
      },
      "title" : "MonthlyDOWRecurrence",
      "description" : "Represents the dates on which a scheduled report runs, typically by month, week, and day of the week."
    },
    "MonthlyRecurrence" : {
      "type" : "object",
      "properties" : {
        "Days" : {
          "type" : "string",
          "description" : "Specifies days for recurrence."
        },
        "MonthsOfYear" : {
          "$ref" : "#/definitions/MonthsOfYearSelector"
        }
      },
      "title" : "MonthlyRecurrence",
      "description" : "Represents the days of the month on which a scheduled report runs."
    },
    "MonthsOfYearSelector" : {
      "type" : "object",
      "properties" : {
        "January" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "February" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "March" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "April" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "May" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "June" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "July" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "August" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "September" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "October" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "November" : {
          "type" : "boolean",
          "format" : "true|false"
        },
        "December" : {
          "type" : "boolean",
          "format" : "true|false"
        }
      },
      "title" : "MonthsOfYearSelector",
      "description" : "Represents the months of the year in which a scheduled report runs"
    },
    "ParameterValue" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "A string that contains the name of the parameter.",
          "format" : "string"
        },
        "Value" : {
          "type" : "string",
          "description" : "A string that contains the value for the parameter.",
          "format" : "string"
        },
        "IsValueFieldReference" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates if the parameter's value references a field.",
          "format" : "true|false"
        }
      },
      "title" : "ParameterValue",
      "description" : "An object that specifies a parameter's value as a name-value pair."
    },
    "Policy" : {
      "type" : "object",
      "properties" : {
        "GroupUserName" : {
          "type" : "string",
          "description" : "A string value that specifies the name of the user or group to which the policy applies.",
          "format" : "string"
        },
        "Roles" : {
          "description" : "An array of objects of type Role that specify the security roles that are included in the Policy.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Role"
          }
        }
      },
      "title" : "Policy",
      "description" : "An object that specifies a set of roles that are grouped together as a policy and can then be assigned as a group of policies to an item using the property GroupUserName."
    },
    "Property" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "A string value that specifies the name of the property.",
          "format" : "string"
        },
        "Value" : {
          "type" : "string",
          "description" : "A string value that specifies the value for the property.",
          "format" : "string"
        }
      },
      "title" : "Property",
      "description" : "An object that defines a property's value as a name-value pair."
    },
    "Report" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CatalogItem"
      }, {
        "type" : "object",
        "properties" : {
          "HasDataSources" : {
            "type" : "boolean",
            "description" : "A boolean value that indicates whether the Report has DataSources associated with it.",
            "format" : "true|false"
          },
          "HasSharedDataSets" : {
            "type" : "boolean",
            "description" : "A boolean value that indicates whether the Report has shared DataSets associated with it.",
            "format" : "true|false"
          },
          "HasParameters" : {
            "type" : "boolean",
            "description" : "A boolean value that indicates whether the Report has parameters.",
            "format" : "true|false"
          }
        },
        "title" : "Report",
        "description" : "An object that is the CatalogItem for a Report. This object is derived from CatalogItem and therefore contains all of its properties, plus additional properties for the Report item."
      } ]
    },
    "ReportHistorySnapshotsOptions" : {
      "type" : "object",
      "properties" : {
        "ManualCreationEnabled" : {
          "type" : "boolean",
          "description" : "A boolean value that specifies whether manual snapshot creation is enabled for this HistorySnapshot.",
          "format" : "true|false"
        },
        "KeepExecutionSnapshots" : {
          "type" : "boolean",
          "description" : "A Boolean value that specifies whether execution snapshots are kept.",
          "format" : "true|false"
        },
        "UseDefaultSystemLimit" : {
          "type" : "boolean",
          "description" : "A boolean value that specifies whether the default system limit is used for this HistorySnapshot.",
          "format" : "true|false"
        },
        "ScopedLimit" : {
          "type" : "integer",
          "description" : "An Int32 value indicating how many snapshots to keep.",
          "format" : "int32"
        },
        "SystemLimit" : {
          "type" : "integer",
          "description" : "An Int32 value indicating how many snapshots can be kept systemwide.  Default (-1) is unlimited.",
          "format" : "int32"
        },
        "Schedule" : {
          "allOf" : [ {
            "$ref" : "#/definitions/ScheduleReference"
          }, {
            "description" : "An object that specifies the schedule for making snapshots for this item."
          } ]
        }
      },
      "title" : "ReportHistorySnapshotsOptions",
      "description" : "An object that specifies options for a Report HistorySnapshot."
    },
    "ReportParameterDefinition" : {
      "type" : "object",
      "properties" : {
        "AllowBlank" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the ReportParamter is allowed to be blank.",
          "format" : "true|false"
        },
        "DefaultValues" : {
          "type" : "array",
          "description" : "An array of string values that specify the ReportParameter's default values. If the parameter is multi-valued then the array can have more than one entry.",
          "items" : {
            "type" : "string"
          }
        },
        "DefaultValuesIsNull" : {
          "type" : "boolean",
          "description" : " A boolean value that indicates whether the DefaultValues property is NULL.",
          "format" : "true|false"
        },
        "DefaultValuesQueryBased" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the ReportParamter's default values are obtained from a query (instead of being static specified values).",
          "format" : "true|false"
        },
        "Dependencies" : {
          "type" : "array",
          "description" : "An array of string values that specify the dependencies for the ReportParameter.",
          "items" : {
            "type" : "string"
          }
        },
        "ErrorMessage" : {
          "type" : "string",
          "description" : "Error returned when validating parameters.",
          "format" : "string"
        },
        "MultiValue" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the ReportParameter is multivalued.",
          "format" : "true|false"
        },
        "Name" : {
          "type" : "string",
          "description" : "A string value that specifies the name for the ReportParameter. This name will typically be displayed in the user interface.",
          "format" : "string"
        },
        "Nullable" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the ReportParameter is allowed to be null.",
          "format" : "true|false"
        },
        "ParameterState" : {
          "$ref" : "#/definitions/ReportParameterState"
        },
        "ParameterType" : {
          "$ref" : "#/definitions/ReportParameterType"
        },
        "ParameterVisibility" : {
          "$ref" : "#/definitions/ReportParameterVisibility"
        },
        "Prompt" : {
          "type" : "string",
          "description" : "A string value that specifies text used to prompt a user for the value of the ReportParameter.",
          "format" : "string"
        },
        "PromptUser" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the user should be prompted for the value for the ReportParameter.",
          "format" : "true|false"
        },
        "QueryParameter" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the ReportParamter is query based.",
          "format" : "true|false"
        },
        "ValidValues" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ValidValue"
          }
        },
        "ValidValuesIsNull" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the ValidValues property is NULL.",
          "format" : "true|false"
        },
        "ValidValuesQueryBased" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the ReportParameter's valid values are obtained from a query (instead of being static specified values).",
          "format" : "true|false"
        }
      },
      "title" : "ReportParameterDefinition",
      "description" : "An object that specifies the metadata definition of a parameter for a report."
    },
    "ReportParameterDefinitionPatch" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "A string value that specifies the name of the ReportParameter.",
          "format" : "string"
        },
        "DefaultValues" : {
          "type" : "array",
          "description" : "Array of default values",
          "items" : {
            "type" : "string"
          }
        },
        "Prompt" : {
          "type" : "string",
          "description" : "A string value that specifies text used to prompt a user for the value of the ReportParameter.",
          "format" : "string"
        },
        "ParameterVisibility" : {
          "$ref" : "#/definitions/ReportParameterVisibility"
        }
      },
      "title" : "ReportParameterDefinitionPatch",
      "description" : "An object that specifies the parts of a report parameter that can be modified outside of the RDL definition."
    },
    "ReportParameterState" : {
      "type" : "string",
      "enum" : [ "HasValidValue", "MissingValidValue", "HasOutstandingDependencies", "DynamicValuesUnavailable" ],
      "title" : "ReportParameterState",
      "description" : "An enumeration of values that specify the valid states for a ReportParameter."
    },
    "ReportParameterType" : {
      "type" : "string",
      "enum" : [ "Boolean", "DateTime", "Integer", "Float", "String" ],
      "title" : "ReportParameterType",
      "description" : "An enumeration of values that specify the data types for a report parameter."
    },
    "ReportParameterVisibility" : {
      "type" : "string",
      "enum" : [ "Visible", "Hidden", "Internal" ],
      "title" : "ReportParameterVisibility",
      "description" : "An enumeration of values that specify the visibility of a report parameter, as to whether it is visible at runtime, hidden at runtime, or internal, meaning only visible in the definition."
    },
    "Query" : {
      "type" : "object",
      "properties" : {
        "CommandText" : {
          "type" : "string",
          "description" : "Command to be executed against given data source",
          "format" : "string"
        },
        "Timeout" : {
          "type" : "integer",
          "description" : "Query Timeout, default is 30 seconds.",
          "format" : "int32"
        }
      },
      "title" : "Query string",
      "description" : "Represents a SQL query to be executed. The query cannot contain parameters."
    },
    "Resource" : {
      "allOf" : [ {
        "$ref" : "#/definitions/CatalogItem"
      }, {
        "type" : "object",
        "properties" : { },
        "title" : "Resource",
        "description" : "The resource object serves as a generalized container for a CatalogItem and can be retrieved in a HTTP request. Resource is derived from CatalogItem and contains all of its properties."
      } ]
    },
    "ResourceGroup" : {
      "type" : "object",
      "properties" : {
        "Type" : {
          "$ref" : "#/definitions/MobileReportResourceGroupType"
        },
        "Items" : {
          "type" : "array",
          "description" : "An array of objects of type ResourceItem that contain the contents of the ResourceGroup.",
          "items" : {
            "$ref" : "#/definitions/ResourceItem"
          }
        }
      },
      "title" : "ResourceGroup",
      "description" : "An object that contains metadata and contents for a ResourceItem."
    },
    "ResourceItem" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestItem"
      }, {
        "type" : "object",
        "properties" : {
          "Key" : {
            "type" : "string"
          }
        }
      } ],
      "title" : "ResourceItem",
      "description" : "An object that specifies the metadata for a Resource."
    },
    "Role" : {
      "type" : "object",
      "properties" : {
        "Name" : {
          "type" : "string",
          "description" : "A string value that specifies the name of the Role.",
          "format" : "string"
        },
        "Description" : {
          "type" : "string",
          "description" : "A string value that constains descriptive text for the Role.",
          "format" : "string"
        }
      },
      "title" : "Role",
      "description" : "An object that specifies security roles that are supported on the Report Server instance."
    },
    "ScheduleDefinition" : {
      "type" : "object",
      "properties" : {
        "StartDateTime" : {
          "type" : "string",
          "description" : "A string that specifies the date-time of the start of the schedule.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "EndDate" : {
          "type" : "string",
          "description" : "A string that specifies the date-time of the end of the schedule.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "EndDateSpecified" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the schedule end is specified.",
          "format" : "true|false"
        },
        "Recurrence" : {
          "$ref" : "#/definitions/ScheduleRecurrence"
        }
      },
      "title" : "ScheduleDefinition",
      "description" : "An object that defines a schedule including a start date-time and an optional end date-time."
    },
    "ScheduleRecurrence" : {
      "type" : "object",
      "properties" : {
        "MinuteRecurrence" : {
          "$ref" : "#/definitions/MinuteRecurrence"
        },
        "DailyRecurrence" : {
          "$ref" : "#/definitions/DailyRecurrence"
        },
        "WeeklyRecurrence" : {
          "$ref" : "#/definitions/WeeklyRecurrence"
        },
        "MonthlyRecurrence" : {
          "$ref" : "#/definitions/MonthlyRecurrence"
        },
        "MonthlyDOWRecurrence" : {
          "$ref" : "#/definitions/MonthlyDOWRecurrence"
        }
      },
      "title" : "ScheduleRecurrence",
      "description" : "An object that defines the recurrence of a schedule. When defining the recurrence, only one of the recurrence types can be set."
    },
    "ScheduleReference" : {
      "type" : "object",
      "properties" : {
        "ScheduleId" : {
          "type" : "string",
          "description" : "The Id property of an existing schedule that will be used in the current context.",
          "format" : "uuid"
        },
        "Definition" : {
          "$ref" : "#/definitions/ScheduleDefinition"
        }
      },
      "title" : "ScheduleReference",
      "description" : "An object that contains either a reference to a defined schedule or the schedule details for the current context."
    },
    "Subscription" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier by which this Subscription can be referenced in requests or in other defined objects.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "Owner" : {
          "type" : "string",
          "description" : "A string value that specifies the owner of the Subscription.",
          "format" : "string"
        },
        "IsDataDriven" : {
          "type" : "boolean",
          "description" : "A boolean value that specifies whether the members of the distribution list for the subscription are computed based on data.",
          "format" : "true|false"
        },
        "Description" : {
          "type" : "string",
          "description" : "A string value that contains descriptive text about the Subscription.",
          "format" : "string"
        },
        "Report" : {
          "type" : "string",
          "description" : "A string value that specifies the path of the report for this Subscription.",
          "format" : "string"
        },
        "IsActive" : {
          "type" : "boolean",
          "description" : "A boolean value that specifies whether the Subscription is currently active.",
          "format" : "true|false"
        },
        "EventType" : {
          "type" : "string",
          "description" : "A string specifying the type of event that triggers the Subscription.",
          "format" : "string"
        },
        "ScheduleDescription" : {
          "type" : "string",
          "description" : "A string value that contains descriptive text about the schedule referenced in the Schedule property.",
          "format" : "string"
        },
        "LastRunTime" : {
          "type" : "string",
          "description" : "A string value that contains the date-time that the schedule was last run.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "LastStatus" : {
          "type" : "string",
          "description" : "A string specifying the Status of the last run.",
          "format" : "string"
        },
        "ExtensionSettings" : {
          "$ref" : "#/definitions/ExtensionSettings"
        },
        "DeliveryExtension" : {
          "type" : "string",
          "description" : "An object that specifies the DeliveryExtension that will be used with this Schedule's report delivery.",
          "format" : "string"
        },
        "LocalizedDeliveryExtensionName" : {
          "type" : "string",
          "description" : "Localized version of extension name when available.",
          "format" : "string"
        },
        "ModifiedBy" : {
          "type" : "string",
          "description" : "A string value that contains the network user name of the last user to modify the subscription.",
          "format" : "string"
        },
        "ModifiedDate" : {
          "type" : "string",
          "description" : "A string value that contains the date-time of the last modification to the subscription.",
          "format" : "date-time",
          "example" : "2017-04-13T15:51:04Z"
        },
        "ParameterValues" : {
          "description" : "An array of items of type ParameterValue that specify the parameter values for the subscription.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ParameterValue"
          }
        }
      },
      "title" : "Subscription",
      "description" : "An object that defines a subscription. A Reporting Services subscription allows a user to subscribe to a Report or Data Source and then to automatically receive an update whenever the item is updated."
    },
    "SystemInfo" : {
      "type" : "object",
      "properties" : {
        "ReportServerAbsoluteUrl" : {
          "type" : "string",
          "description" : "A string value that specifies the URL for the Report Server.",
          "format" : "string"
        },
        "ReportServerRelativeUrl" : {
          "type" : "string",
          "description" : "A string value that specifies the Report Server Virtual Directory.",
          "format" : "string"
        },
        "WebPortalRelativeUrl" : {
          "type" : "string",
          "description" : "A string value that specifies the URL for the Report Server web portal.",
          "format" : "string"
        },
        "ProductName" : {
          "type" : "string",
          "description" : "A string value that specifies the name of the product being used.",
          "format" : "string"
        },
        "ProductVersion" : {
          "type" : "string",
          "description" : "A string value that specifies the version of the product being used.",
          "format" : "string"
        },
        "ProductType" : {
          "type" : "string",
          "enum" : [ "PowerBiReportServer", "SqlServerReportingServices" ],
          "description" : "A string value that specifies the type of the product being used."
        },
        "TimeZone" : {
          "type" : "string",
          "description" : "A string value that specifies the timezone being used by the server.",
          "format" : "string"
        }
      },
      "title" : "System",
      "description" : "An object that specifies information about the Report Server."
    },
    "SystemPolicy" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier of the SystemPolicy.",
          "format" : "uuid"
        },
        "Policies" : {
          "description" : "An array of objects of type Policy that specify the access policies to be applied to the System.",
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Policy"
          }
        }
      }
    },
    "ThumbnailItem" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ManifestItem"
      }, {
        "type" : "object",
        "properties" : {
          "Type" : {
            "$ref" : "#/definitions/MobileReportThumbnailType"
          }
        }
      } ],
      "title" : "ThumbnailItem",
      "description" : "An object that contains the contents of a thumbnail."
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "Id" : {
          "type" : "string",
          "description" : "A unique UUID value that specifies the identifier by which this User object can be referenced in requests or in other defined objects.",
          "format" : "uuid",
          "example" : "01234567-89ab-cdef-0123-456789abcdef"
        },
        "Username" : {
          "type" : "string",
          "description" : "A string value that specifies the network user name for the user.",
          "format" : "string"
        },
        "DisplayName" : {
          "type" : "string",
          "description" : "A string value that specifies the name to display for the network user.",
          "format" : "string"
        },
        "HasFavoriteItems" : {
          "type" : "boolean",
          "description" : "A boolean value that indicates whether the user has items that are designated as favorite items.",
          "format" : "true|false"
        },
        "MyReportsPath" : {
          "type" : "string",
          "description" : "A string value that specifies a path to a folder where a user's reports are stored by default. (This feature must be enabled by the server administrator).",
          "format" : "string"
        }
      },
      "title" : "User",
      "description" : "An object that contains information about the Report Server user."
    },
    "UserCredentials" : {
      "type" : "object",
      "properties" : {
        "UserName" : {
          "type" : "string",
          "description" : "A string value that specifies the user name for the user.",
          "format" : "string"
        },
        "Password" : {
          "type" : "string",
          "description" : "A string value that specifies the password for the user.",
          "format" : "string"
        },
        "Domain" : {
          "type" : "string",
          "description" : "A string value that specifies the domain for the user.",
          "format" : "string"
        }
      }
    },
    "ValidValue" : {
      "type" : "object",
      "properties" : {
        "Label" : {
          "type" : "string",
          "description" : "A string value that specifies the label for the ValidValue."
        },
        "Value" : {
          "type" : "string",
          "description" : "A string value that specifies the value of the ValidValue."
        }
      },
      "title" : "ValidValue",
      "description" : "An object that contains a value that is valid for use in its context, in the form of a label-value pair."
    },
    "WeeklyRecurrence" : {
      "type" : "object",
      "properties" : {
        "WeeksInterval" : {
          "type" : "integer",
          "description" : "An Int32 value representing interval in weeks.",
          "format" : "int32"
        },
        "WeeksIntervalSpecified" : {
          "type" : "boolean",
          "description" : "True if using WeeksInterval.",
          "format" : "true|false"
        },
        "DaysOfWeek" : {
          "$ref" : "#/definitions/DaysOfWeekSelector"
        }
      },
      "title" : "WeeklyRecurrence",
      "description" : "Represents the intervals at which a scheduled report runs. Intervals are specified in weeks and on which days of the week."
    },
    "WeekNumberEnum" : {
      "type" : "string",
      "enum" : [ "FirstWeek", "SecondWeek", "ThirdWeek", "FourthWeek", "LastWeek" ],
      "title" : "WeekNumberEnum",
      "description" : "Describes the week of the month on which a scheduled report runs."
    },
    "odata.error" : {
      "type" : "object",
      "required" : [ "error" ],
      "properties" : {
        "error" : {
          "$ref" : "#/definitions/odata.error.main"
        }
      }
    },
    "odata.error.detail" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "target" : {
          "type" : "string"
        }
      }
    },
    "odata.error.main" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        },
        "target" : {
          "type" : "string"
        },
        "details" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/odata.error.detail"
          }
        },
        "innererror" : {
          "type" : "object",
          "description" : "The structure of this object is service-specific."
        }
      }
    }
  },
  "paths" : {
    "/CacheRefreshPlans" : {
      "post" : {
        "summary" : "Creates a new CacheRefreshPlan item.",
        "operationId" : "AddCacheRefreshPlan",
        "tags" : [ "CacheRefreshPlans" ],
        "parameters" : [ {
          "name" : "CacheRefreshPlan",
          "description" : "The definition of the new CacheRefreshPlan item.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/CacheRefreshPlan"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "The definition of the CacheRefreshPlan item that was just created.",
            "schema" : {
              "$ref" : "#/definitions/CacheRefreshPlan"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CacheRefreshPlans({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a CacheRefreshPlan item specified by the Id.",
        "operationId" : "GetCacheRefreshPlan",
        "tags" : [ "CacheRefreshPlans" ],
        "responses" : {
          "200" : {
            "description" : "The CacheRefreshPlan item specified by the Id.",
            "schema" : {
              "$ref" : "#/definitions/CacheRefreshPlan"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces the specified CacheRefreshPlan item using the provided definition.",
        "operationId" : "SetCacheRefreshPlan",
        "tags" : [ "CacheRefreshPlans" ],
        "parameters" : [ {
          "name" : "CacheRefreshPlan",
          "description" : "Definition of the CacheRefreshPlan item that updates the current item on the server.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/CacheRefreshPlan"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "schema" : {
              "$ref" : "#/definitions/CacheRefreshPlan"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified CacheRefreshPlan.",
        "operationId" : "DeleteCacheRefreshPlan",
        "tags" : [ "CacheRefreshPlans" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CacheRefreshPlans({Id})/Model.Execute" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "post" : {
        "summary" : "Executes given CacheRefreshPlan immediately.",
        "operationId" : "ExecuteCacheRefreshPlan",
        "tags" : [ "CacheRefreshPlans" ],
        "responses" : {
          "204" : {
            "description" : "The return result is empty."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CatalogItems" : {
      "get" : {
        "summary" : "Gets an array of CatalogItems.",
        "operationId" : "GetCatalogItems",
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "OData array of CatalogItems.",
            "schema" : {
              "type" : "object",
              "title" : "ODataCatalogItems",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CatalogItem"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new CatalogItem.",
        "operationId" : "AddCatalogItem",
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "name" : "CatalogItem",
          "description" : "The definition of the new CatalogItem.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/CatalogItem"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "The definition of the CatalogItem that was just created.",
            "schema" : {
              "$ref" : "#/definitions/CatalogItem"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CatalogItems/Model.DeleteItems" : {
      "post" : {
        "summary" : "Deletes the given list of items",
        "operationId" : "DeleteCatalogItems",
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "name" : "DeleteItemsRequest",
          "in" : "body",
          "description" : "List of catalog item paths to delete.",
          "schema" : {
            "type" : "object",
            "title" : "DeleteItemsRequest",
            "properties" : {
              "CatalogItemPaths" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/BulkOperationsResult"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CatalogItems/Model.MoveItems" : {
      "post" : {
        "summary" : "Moves given list of items to target folder.",
        "operationId" : "MoveCatalogItems",
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "name" : "MoveItemsRequest",
          "in" : "body",
          "description" : "List of catalog item paths and target folder.",
          "schema" : {
            "type" : "object",
            "title" : "MoveItemsRequest",
            "properties" : {
              "CatalogItemPaths" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              },
              "TargetPath" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/BulkOperationsResult"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CatalogItems({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a CatalogItem specified by the Id.",
        "operationId" : "GetCatalogItem",
        "tags" : [ "CatalogItems" ],
        "responses" : {
          "200" : {
            "description" : "The CatalogItem specified by the Id.",
            "schema" : {
              "$ref" : "#/definitions/CatalogItem"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the specified CatalogItem using the provided definition.",
        "operationId" : "UpdateCatalogItem",
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "name" : "CatalogItem",
          "description" : "Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/CatalogItem"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified CatalogItem.",
        "operationId" : "DeleteCatalogItem",
        "tags" : [ "CatalogItems" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CatalogItems({Id})/Content/$value" : {
      "get" : {
        "summary" : "Gets the content of the specified CatalogItem specified by the Id.",
        "operationId" : "GetCatalogItemContent",
        "produces" : [ "application/octet-stream" ],
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content of the CatalogItem specified by the Id.",
            "schema" : {
              "type" : "file"
            }
          },
          "204" : {
            "description" : "No content."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CatalogItems({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets ItemPolicies associated with the specified CatalogItem.",
        "operationId" : "GetCatalogItemPolicies",
        "tags" : [ "CatalogItems" ],
        "responses" : {
          "200" : {
            "description" : "An array of ItemPolicies that are associated with the specified CatalogItem.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces ItemPolicies associated with the specified CatalogItem.",
        "operationId" : "SetCatalogItemPolicies",
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "name" : "CatalogItem",
          "in" : "body",
          "description" : "The ItemPolicy definitions that will be replaced.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CatalogItems({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values)",
        "operationId" : "GetCatalogItemProperties",
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "name" : "Properties",
          "description" : "Comma-separated list of Property names to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates a CatalogItem's Properties with the list of given properties.",
        "operationId" : "UpdateCatalogItemProperties",
        "tags" : [ "CatalogItems" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/CatalogItems({Id})/Roles" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the list of available Roles for the CatalogItem",
        "operationId" : "GetCatalogItemRoles",
        "tags" : [ "CatalogItems" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Role"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets" : {
      "get" : {
        "summary" : "Gets an array of DataSet CatalogItems.",
        "operationId" : "GetDataSets",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "OData array of DataSet CatalogItems.",
            "schema" : {
              "type" : "object",
              "title" : "ODataDataSets",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/DataSet"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new DataSet CatalogItem.",
        "operationId" : "AddDataSet",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "DataSet",
          "description" : "The definition of the new DataSet CatalogItem.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/DataSet"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "The definition of the DataSet item that was just created.",
            "schema" : {
              "$ref" : "#/definitions/DataSet"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a DataSet CatalogItem specified by the Id.",
        "operationId" : "GetDataSet",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "The DataSet CatalogItem specified by the Id.",
            "schema" : {
              "$ref" : "#/definitions/DataSet"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the specified DataSet CatalogItem using the provided definition.",
        "operationId" : "UpdateDataSet",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "DataSet",
          "description" : "Definition of the DataSet item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/DataSet"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified DataSet.",
        "operationId" : "DeleteDataSet",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/AllowedActions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.",
        "operationId" : "GetDataSetAllowedActions",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "OData array of AllowedActions.",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/CacheOptions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the CacheOption's content for a given DataSet.",
        "operationId" : "GetDataSetCacheOptions",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "Returns the CacheOption's content for a given DataSet.",
            "schema" : {
              "$ref" : "#/definitions/CacheOptions"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces the CacheOption's content for a given DataSet using the provided definition.",
        "operationId" : "SetDataSetCacheOptions",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "CacheOptions",
          "description" : "Updated definition for the CacheOption's content associated with the given DataSet.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/CacheOptions"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/CacheRefreshPlans" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the CacheRefreshPlans for a given DataSet.",
        "operationId" : "GetDataSetCacheRefreshPlans",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "Returns the CacheRefreshPlans for a given DataSet.",
            "schema" : {
              "type" : "object",
              "title" : "ODataCacheRefreshPlans",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CacheRefreshPlan"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/Content/$value" : {
      "get" : {
        "summary" : "Gets the content of the specified DataSet CatalogItem specified by the Id.",
        "operationId" : "GetDataSetContent",
        "produces" : [ "application/octet-stream" ],
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content of the DataSet CatalogItem specified by the Id.",
            "schema" : {
              "type" : "file"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/DataSources" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the DataSources associated with the specified DataSet.",
        "operationId" : "GetDataSetDataSources",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "An array of DataSources that are associated with the specified DataSet CatalogItem.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DataSource"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the DataSource definition associated with the specified DataSet.",
        "operationId" : "SetDataSetDataSources",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "DataSource",
          "description" : "Updated definition for the DataSource associated with the specified DataSet CatalogItem.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/DataSource"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/DataSources({DataSourceId})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      }, {
        "name" : "DataSourceId",
        "description" : "The Id of the DataSource associated with the DataSet.",
        "in" : "path",
        "type" : "string",
        "required" : true
      } ],
      "get" : {
        "summary" : "Gets the DataSource specified by the DataSourceId that is associated with the DataSet.",
        "operationId" : "GetDataSetDataSource",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "The DataSource specified by the DataSourceId that is associated with the DataSet CatalogItem.",
            "schema" : {
              "$ref" : "#/definitions/DataSource"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the DataSource specified by the DataSourceId that is associated with the DataSet.",
        "operationId" : "SetDataSetDataSource",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "DataSource",
          "description" : "Updated definition for the DataSource associated with the DataSet.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/DataSource"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content."
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/DependentItems" : {
      "get" : {
        "summary" : "Returns a list of CatalogItems that reference the specified DataSet.",
        "operationId" : "GetDataSetDependentItems",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "An array of CatalogItems dependent upon the specified DataSet.",
            "schema" : {
              "type" : "object",
              "title" : "ODataDependentItems",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CatalogItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/Model.GetAggregatedValue" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "post" : {
        "summary" : "Gets the value for the specified DataSet column using the given aggregation type.",
        "operationId" : "GetDataSetAggregatedValue",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "ColumnName",
          "description" : "The name of the DataSet column to aggregate the value for.",
          "in" : "query",
          "type" : "string",
          "required" : true
        }, {
          "name" : "Aggregation",
          "description" : "The type of aggregation to use on the specified column. Values come from the KpiSharedDataItemAggregation enum.",
          "in" : "query",
          "type" : "string",
          "required" : true
        }, {
          "name" : "Parameters",
          "description" : "An array of DataSet parameters to use when executing the query.",
          "in" : "body",
          "required" : false,
          "schema" : {
            "type" : "object",
            "title" : "DataSetAggregateValueParameters",
            "properties" : {
              "Parameters" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/definitions/DataSetParameter"
                }
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "number",
                "format" : "double"
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not Found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/Model.GetData" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "post" : {
        "summary" : "Gets the query results for the specified DataSet.",
        "operationId" : "GetDataSetData",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "MaxRows",
          "description" : "Specifies the maximum number of rows to return from the query.",
          "in" : "query",
          "type" : "number",
          "format" : "Int32",
          "required" : false
        }, {
          "name" : "Parameters",
          "description" : "An array of DataSet parameters to use when executing the query.",
          "in" : "body",
          "required" : false,
          "schema" : {
            "type" : "object",
            "title" : "DataSetDataParameters",
            "properties" : {
              "Parameters" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/definitions/DataSetParameter"
                }
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "DataSetData",
              "properties" : {
                "Name" : {
                  "type" : "string"
                },
                "Rows" : {
                  "type" : "array",
                  "items" : {
                    "type" : "array",
                    "items" : {
                      "type" : "string"
                    }
                  }
                },
                "Columns" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "title" : "DataSetColumns",
                    "properties" : {
                      "Name" : {
                        "type" : "string"
                      },
                      "Type" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/Model.GetSchema" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the schema for the specified DataSet.",
        "operationId" : "GetDataSetSchema",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "The schema for the DataSet.",
            "schema" : {
              "$ref" : "#/definitions/DataSetSchema"
            }
          },
          "404" : {
            "description" : "Not Found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/ParameterDefinitions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the ParameterDefinitions associated with the specified DataSet.",
        "operationId" : "GetDataSetParameterDefinitions",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "An array of ParameterDefinitions that are associated with the specified DataSet CatalogItem.",
            "schema" : {
              "type" : "object",
              "title" : "ODataReportParameterDefinitions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/ReportParameterDefinition"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the ParameterDefinitions associated with the DataSet specified.",
        "operationId" : "UpdateDataSetParameterDefinitions",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "ParameterDefinitions",
          "description" : "Updated definitions for the ParameterDefinitions associated with the DataSet, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property valueswill be left unchanged.",
          "in" : "body",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ReportParameterDefinitionPatch"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets ItemPolicies associated with the specified DataSet CatalogItem.",
        "operationId" : "GetDataSetPolicies",
        "tags" : [ "DataSets" ],
        "responses" : {
          "200" : {
            "description" : "An array of ItemPolicies that are associated with the specified DataSet CatalogItem.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces ItemPolicies associated with the specified DataSet item.",
        "operationId" : "SetDataSetPolicies",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "ItemPolicy",
          "in" : "body",
          "description" : "The ItemPolicy definitions that will be replaced.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSets({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets DataSet Properties (takes list of property names to retrieve the values)",
        "operationId" : "GetDatasetProperties",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the DataSet Properties included in the given list.",
        "operationId" : "UpdateDatasetProperties",
        "tags" : [ "DataSets" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources" : {
      "get" : {
        "summary" : "Gets an array of DataSource CatalogItems.",
        "operationId" : "GetDataSources",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "OData array of DataSource CatalogItems",
            "schema" : {
              "type" : "object",
              "title" : "ODataDataSources",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/DataSource"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new DataSource CatalogItem.",
        "operationId" : "AddDataSource",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "name" : "DataSource",
          "description" : "The definition of the new DataSource CatalogItem.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/DataSource"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "The definition of the DataSource item that was just created.",
            "schema" : {
              "$ref" : "#/definitions/DataSource"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources/Model.CheckConnection" : {
      "post" : {
        "summary" : "Tests the connection for a data source. This method supports the direct testing of the unsaved data source.",
        "operationId" : "CheckNewDataSourceConnection",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "name" : "dataSource",
          "description" : "The definition of data source.  Must contain connectionstring, data provider, and credentials to connect to the data source.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/DataSource"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "A DataSourceCheckResult that contains the results of the check connection operation.",
            "schema" : {
              "$ref" : "#/definitions/DataSourceCheckResult"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources/Model.GetQueryFields" : {
      "post" : {
        "summary" : "Retrieves a dataset that contains the fields retrieved by the delivery query for a data-driven subscription.",
        "operationId" : "GetDataSourceQueryFields",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "name" : "QueryFieldsRequest",
          "in" : "body",
          "schema" : {
            "type" : "object",
            "title" : "QueryFieldsRequest",
            "properties" : {
              "dataSource" : {
                "$ref" : "#/definitions/DataSource"
              },
              "query" : {
                "$ref" : "#/definitions/Query"
              }
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "object",
              "title" : "ODataQueryFields",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a DataSource CatalogItem specified by the Id.",
        "operationId" : "GetDataSource",
        "tags" : [ "DataSources" ],
        "responses" : {
          "200" : {
            "description" : "The DataSource CatalogItem specified by the Id.",
            "schema" : {
              "$ref" : "#/definitions/DataSource"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the DataSource CatalogItem specified by the Id using the provided definition.",
        "operationId" : "UpdateDataSource",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "name" : "DataSource",
          "description" : "Definition of the DataSource item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/DataSource"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified DataSource.",
        "operationId" : "DeleteDataSource",
        "tags" : [ "DataSources" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources({Id})/AllowedActions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.",
        "operationId" : "GetDataSourceAllowedActions",
        "tags" : [ "DataSources" ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources({Id})/Content/$value" : {
      "get" : {
        "summary" : "Gets the content of the DataSource CatalogItem specified by the Id.",
        "operationId" : "GetDataSourceContent",
        "produces" : [ "application/octet-stream" ],
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content of the DataSource CatalogItem specified by the Id.",
            "schema" : {
              "type" : "file"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources({Id})/DependentItems" : {
      "get" : {
        "summary" : "Returns a list of CatalogItems that reference the DataSource specified by the Id.",
        "operationId" : "GetDataSourceDependentItems",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "object",
              "title" : "ODataDependentItems",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CatalogItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources({Id})/Model.CheckConnection" : {
      "post" : {
        "summary" : "Tests the connection for a data source. This method supports the testing of published data sources that are used by reports and shared data sources",
        "operationId" : "CheckExistingDataSourceConnection",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "A DataSourceCheckResult that contains the results of the check connection operation.",
            "schema" : {
              "$ref" : "#/definitions/DataSourceCheckResult"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets ItemPolicies associated with the DataSource specified by the Id.",
        "operationId" : "GetDataSourcePolicies",
        "tags" : [ "DataSources" ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces ItemPolicies associated with the DataSource specified by the Id.",
        "operationId" : "SetDataSourcePolicies",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "name" : "ItemPolicy",
          "in" : "body",
          "description" : "The ItemPolicy definitions that will be replaced.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/DataSources({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets DataSource Properties (takes list of property names to retrieve the values)",
        "operationId" : "GetDatasourceProperties",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "name" : "properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the DataSource Properties included in the given list.",
        "operationId" : "UpdateDatasourceProperties",
        "tags" : [ "DataSources" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Extensions" : {
      "get" : {
        "summary" : "Retreives all Extension items.",
        "operationId" : "GetExtensions",
        "tags" : [ "Extensions" ],
        "responses" : {
          "200" : {
            "description" : "A array of Extension objects.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Extension"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Extensions/Model.ValidateExtensionSettings" : {
      "post" : {
        "summary" : "Validates extension parameters and returns collection of ExtensionParameter.",
        "operationId" : "ValidateExtensionParameters",
        "tags" : [ "Extensions" ],
        "parameters" : [ {
          "name" : "ExtensionSettings",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/ExtensionSettings"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A array of ExtensionParameter objects.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExtensionParameter"
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Extensions({Id})/Parameters" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Retrieves the ExtensionParameter list for given extension.",
        "operationId" : "GetExtensionParameters",
        "tags" : [ "Extensions" ],
        "responses" : {
          "200" : {
            "description" : "A array of ExtensionParameter objects.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ExtensionParameter"
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/FavoriteItems" : {
      "get" : {
        "summary" : "Retrieves a collection of items of type CatalogItem which have been designated as favorites. Use the OData $expand option to also get the referenced items.",
        "operationId" : "GetFavoriteItems",
        "tags" : [ "FavoriteItems" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/expand"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "A array of items that have been designated as favorites.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/FavoriteItem"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Designate a CatalogItem as a favorite.",
        "operationId" : "SetFavoriteItem",
        "tags" : [ "FavoriteItems" ],
        "parameters" : [ {
          "name" : "FavoriteItem",
          "description" : "The reference to the CatalogItem to be designated as a favorite. It only needs the Id property. Thus, it is not necessary to provide Item property in the payload.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/FavoriteItem"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "Created entity",
            "schema" : {
              "$ref" : "#/definitions/FavoriteItem"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/FavoriteItems({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "delete" : {
        "summary" : "Removes a CatalogItem from the list of favorite items.",
        "operationId" : "RemoveFavoriteItem",
        "tags" : [ "FavoriteItems" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Folders" : {
      "get" : {
        "summary" : "Gets an array of Folder CatalogItems.",
        "operationId" : "GetFolders",
        "tags" : [ "Folders" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "OData array of Folder CatalogItems.",
            "schema" : {
              "type" : "object",
              "title" : "ODataFolders",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Folder"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new Folder CatalogItem.",
        "operationId" : "AddFolder",
        "tags" : [ "Folders" ],
        "parameters" : [ {
          "name" : "body",
          "description" : "The definition of the new Folder CatalogItem.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Folder"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "The definition of the Folder item that was just created.",
            "schema" : {
              "$ref" : "#/definitions/Folder"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Folders({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a Folder CatalogItem specified by the Id.",
        "operationId" : "GetFolder",
        "tags" : [ "Folders" ],
        "responses" : {
          "200" : {
            "description" : "The Folder CatalogItem specified by the Id.",
            "schema" : {
              "$ref" : "#/definitions/Folder"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the specified Folder CatalogItem using the provided definition.",
        "operationId" : "UpdateFolder",
        "tags" : [ "Folders" ],
        "parameters" : [ {
          "name" : "Folder",
          "description" : "Definition of the Folder item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Folder"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Folder.",
        "operationId" : "DeleteFolder",
        "tags" : [ "Folders" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Folders({Id})/AllowedActions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.",
        "operationId" : "GetFolderAllowedActions",
        "tags" : [ "Folders" ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Folders({Id})/CatalogItems" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of child CatalogItems in the specified folder.",
        "operationId" : "GetFolderCatalogItems",
        "tags" : [ "Folders" ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "object",
              "title" : "ODataCatalogItems",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CatalogItem"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Folders({Id})/Model.SearchItems(searchText='{searchText}')" : {
      "post" : {
        "summary" : "Searches items in a given folder.",
        "operationId" : "SearchCatalogItemsInFolder",
        "tags" : [ "Folders" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        }, {
          "name" : "searchText",
          "description" : "Name of item to search in the folder.",
          "in" : "path",
          "type" : "string",
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataCatalogItems",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CatalogItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Folders({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets policies associated with the Folder CatalogItem specified by the Id.",
        "operationId" : "GetFolderPolicies",
        "tags" : [ "Folders" ],
        "responses" : {
          "200" : {
            "description" : "An array of ItemPolicies that are associated with the Folder CatalogItem specified by the Id.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces ItemPolicies associated with the Folder item specified by the Id.",
        "operationId" : "SetFolderPolicies",
        "tags" : [ "Folders" ],
        "parameters" : [ {
          "name" : "ItemPolicy",
          "in" : "body",
          "description" : "The ItemPolicy definitions that will be replaced.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Folders({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets Folder Properties (takes list of Property names to retrieve the values)",
        "operationId" : "GetFolderProperties",
        "tags" : [ "Folders" ],
        "parameters" : [ {
          "name" : "properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the Folder Properties included in the given list.",
        "operationId" : "UpdateFolderProperties",
        "tags" : [ "Folders" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Kpis" : {
      "get" : {
        "summary" : "Gets an array of Kpi CatalogItems.",
        "operationId" : "GetKpis",
        "tags" : [ "Kpis" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "OData array of Kpi CatalogItems.",
            "schema" : {
              "type" : "object",
              "title" : "ODataKpis",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Kpi"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new Kpi CatalogItem.",
        "operationId" : "AddKpi",
        "tags" : [ "Kpis" ],
        "parameters" : [ {
          "name" : "Kpi",
          "description" : "The definition of the new KPI CatalogItem.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Kpi"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "Created.",
            "schema" : {
              "$ref" : "#/definitions/Kpi"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Kpis({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a Kpi CatalogItem specified by the Id.",
        "operationId" : "GetKpi",
        "tags" : [ "Kpis" ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "$ref" : "#/definitions/Kpi"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the specified Kpi CatalogItem using the provided definition.",
        "operationId" : "UpdateKpi",
        "tags" : [ "Kpis" ],
        "parameters" : [ {
          "name" : "Kpi",
          "description" : "Definition of the KPI item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Kpi"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Kpi.",
        "operationId" : "DeleteKpi",
        "tags" : [ "Kpis" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Kpis({Id})/AllowedActions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of actions allowed in the current session, user permissions and product edition capabilities are considered when querying.",
        "operationId" : "GetKpiAllowedActions",
        "tags" : [ "Kpis" ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Kpis({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets ItemPolicies associated with the Kpi CatalogItem specified by the Id.",
        "operationId" : "GetKpiPolicies",
        "tags" : [ "Kpis" ],
        "responses" : {
          "200" : {
            "description" : "An array of ItemPolicies that are associated with the Kpi CatalogItem specified by the Id.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces ItemPolicies associated with the Kpi specified by the Id.",
        "operationId" : "SetKpiPolicies",
        "tags" : [ "Kpis" ],
        "parameters" : [ {
          "name" : "ItemPolicies",
          "in" : "body",
          "description" : "The ItemPolicy definitions that will be replaced.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Kpis({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets Kpi Properties (takes list of Property names to retrieve the values)",
        "operationId" : "GetKpiProperties",
        "tags" : [ "Kpis" ],
        "parameters" : [ {
          "name" : "Properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the Kpi Properties included in the given list.",
        "operationId" : "UpdateKpiProperties",
        "tags" : [ "Kpis" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports" : {
      "get" : {
        "summary" : "Gets an array of LinkedReport CatalogItems.",
        "operationId" : "GetLinkedReports",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok.",
            "schema" : {
              "type" : "object",
              "title" : "ODataLinkedReports",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/LinkedReport"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new LinkedReport CatalogItem.",
        "operationId" : "AddLinkedReport",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "LinkedReport",
          "description" : "The definition of the new LinkedReport CatalogItem.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/LinkedReport"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "Created.",
            "schema" : {
              "$ref" : "#/definitions/LinkedReport"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a LinkedReport CatalogItem specified by the Id.",
        "operationId" : "GetLinkedReport",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "The LinkedReport CatalogItem specified by the Id.",
            "schema" : {
              "$ref" : "#/definitions/LinkedReport"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the specified LinkedReport CatalogItem using the provided definition.",
        "operationId" : "UpdateLinkedReport",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "LinkedReport",
          "description" : "Definition of the LinkedReport item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/LinkedReport"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified LinkedReport.",
        "operationId" : "DeleteLinkedReport",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/AllowedActions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.",
        "operationId" : "GetLinkedReportAllowedActions",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/CacheOptions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the content of CacheOptions for the LinkedReport specified by the Id.",
        "operationId" : "GetLinkedReportCacheOptions",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "Returns the content of CacheOptions for the LinkedReport specified by the Id.",
            "schema" : {
              "$ref" : "#/definitions/CacheOptions"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces the CacheOption's content for a given LinkedReport using the provided definition.",
        "operationId" : "SetLinkedReportCacheOptions",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "CacheOptions",
          "description" : "Updated definition for the CacheOption's content associated with the LinkedReport specified by the Id.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/CacheOptions"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/CacheRefreshPlans" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the CacheRefreshPlans for a LinkedReport specified by the Id.",
        "operationId" : "GetLinkedReportCacheRefreshPlans",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "Returns the CacheRefreshPlans for a LinkedReport specified by the Id.",
            "schema" : {
              "type" : "object",
              "title" : "ODataCacheRefreshPlans",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CacheRefreshPlan"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/Comments" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the Comments for a LinkedReport specified by the Id.",
        "operationId" : "GetLinkedReportComments",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "A collection of Comments associated to the LinkedReport",
            "schema" : {
              "type" : "object",
              "title" : "ODataComments",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Comment"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new Comment associated to the specified LinkedReport.",
        "operationId" : "AddLinkedReportComment",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "Comment",
          "description" : "The Comment to be created",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Comment"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/Comments({CommentId})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      }, {
        "name" : "CommentId",
        "description" : "The Id of the Comment.",
        "in" : "path",
        "type" : "string",
        "required" : true
      } ],
      "put" : {
        "summary" : "Updates the Comment specified by CommentId in the associated LinkedReport.",
        "operationId" : "UpdateLinkedReportComment",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "Comment",
          "description" : "The Comment to be updated",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Comment"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Comment associated to the LinkedReport.",
        "operationId" : "DeleteLinkedReportComment",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/HistorySnapshots" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Get a list of HistorySnapshots of the LinkedReport specified by Id.",
        "operationId" : "GetLinkedReportHistorySnapshots",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/HistorySnapshot"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates new HistorySnapshot",
        "operationId" : "AddLinkedReportHistorySnapshot",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "boolean",
              "format" : "true|false"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/HistorySnapshots({HistoryId})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      }, {
        "name" : "HistoryId",
        "description" : "The Id property of the HistorySnapshot",
        "in" : "path",
        "type" : "string",
        "required" : true
      } ],
      "get" : {
        "summary" : "Gets requested HistorySnapshot item specified by HistoryId of the LinkedReport specified by Id.",
        "operationId" : "GetLinkedReportHistorySnapshot",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "Returns a History Snapshot item.",
            "schema" : {
              "$ref" : "#/definitions/HistorySnapshot"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes a HistorySnapshot specified by HistoryId from the LinkedReport specified by Id.",
        "operationId" : "DeleteLinkedReportHistorySnapshot",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "boolean",
              "format" : "true|false"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/HistorySnapshotOptions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets HistorySnapshotOptions for the specified LinkedReport.",
        "operationId" : "GetLinkedReportHistorySnapshotOptions",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "History Snapshot Options",
            "schema" : {
              "$ref" : "#/definitions/HistorySnapshotOptions"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates HistorySnapshotOptions property.",
        "operationId" : "SetLinkedReportHistorySnapshotOptions",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "HistorySnapshotOptions",
          "description" : "Modified HistorySnapshotOptions object.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/HistorySnapshotOptions"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/ParameterDefinitions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the ParameterDefinitions associated with the LinkedReport specified by the Id.",
        "operationId" : "GetLinkedReportParameterDefinitions",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "An array of ParameterDefinitions that are associated with the LinkedReport CatalogItem specified by the Id.",
            "schema" : {
              "type" : "object",
              "title" : "ODataReportParameterDefinitions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/ReportParameterDefinition"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the ParameterDefinitions associated with the specified LinkedReport by the Id.",
        "operationId" : "UpdateLinkedReportParameterDefinitions",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "ParameterDefinitions",
          "description" : "Updated definitions for the ParameterDefinitions associated with the LinkedReport, represented as ParameterDefinitionsPatch objects. It is only necessary to include properties to be updated. All other property values will be left unchanged.",
          "in" : "body",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ReportParameterDefinitionPatch"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets ItemPolicies associated with the specified LinkedReport CatalogItem.",
        "operationId" : "GetLinkedReportPolicies",
        "tags" : [ "LinkedReports" ],
        "responses" : {
          "200" : {
            "description" : "An array of ItemPolicies that are associated with the specified LinkedReport CatalogItem.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces ItemPolicies associated with the specified LinkedReport item.",
        "operationId" : "SetLinkedReportPolicies",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "ItemPolicy",
          "in" : "body",
          "description" : "The ItemPolicy definitions that will be replaced.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/LinkedReports({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets LinkedReport Properties (takes list of Property names to retrieve the values)",
        "operationId" : "GetLinkedReportProperties",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the LinkedReport Properties included in the given list.",
        "operationId" : "UpdateLinkedReportProperties",
        "tags" : [ "LinkedReports" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Me" : {
      "get" : {
        "summary" : "Gets the User object for the current user.",
        "operationId" : "GetUserDetails",
        "tags" : [ "Me" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/MobileReports" : {
      "get" : {
        "summary" : "Retrieve array of MobileReport catalog items.",
        "operationId" : "GetMobileReports",
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataMobileReport",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/MobileReport"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates new MobileReport item",
        "operationId" : "AddMobileReport",
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "name" : "body",
          "description" : "The definition of the new MobileReport item.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/MobileReport"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/MobileReport"
            }
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/MobileReports({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Fetch MobileReport item by Id or path property.",
        "operationId" : "GetMobileReport",
        "tags" : [ "MobileReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/MobileReport"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the specified MobileReport CatalogItem using the provided definition.",
        "operationId" : "UpdateMobileReport",
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "name" : "body",
          "description" : "Definition of the MobileReport item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/MobileReport"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "schema" : {
              "$ref" : "#/definitions/MobileReport"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete the specified MobileReport.",
        "operationId" : "DeleteMobileReport",
        "tags" : [ "MobileReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/MobileReports({Id})/AllowedActions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.",
        "operationId" : "GetMobileReportAllowedActions",
        "tags" : [ "MobileReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/MobileReports({Id})/Comments" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the Comments for a MobileReport specified by the Id.",
        "operationId" : "GetMobileReportComments",
        "tags" : [ "MobileReports" ],
        "responses" : {
          "200" : {
            "description" : "A collection of Comments associated to the MobileReport",
            "schema" : {
              "type" : "object",
              "title" : "ODataComments",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Comment"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new Comment associated to the specified MobileReport.",
        "operationId" : "AddMobileReportComment",
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "name" : "Comment",
          "description" : "The Comment to be created",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Comment"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/MobileReports({Id})/Comments({CommentId})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      }, {
        "name" : "CommentId",
        "description" : "The Id of the Comment.",
        "in" : "path",
        "type" : "string",
        "required" : true
      } ],
      "put" : {
        "summary" : "Updates the Comment specified by CommentId in the associated MobileReport.",
        "operationId" : "UpdateMobileReportComment",
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "name" : "Comment",
          "description" : "The Comment to be updated",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Comment"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Comment associated to the MobileReport.",
        "operationId" : "DeleteMobileReportComment",
        "tags" : [ "MobileReports" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/MobileReports({Id})/Content/$value" : {
      "get" : {
        "summary" : "Gets the content of the specified MobileReport CatalogItem.",
        "operationId" : "GetMobileReportContent",
        "produces" : [ "application/octet-stream" ],
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content of the specified MobileReport CatalogItem.",
            "schema" : {
              "type" : "file"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/MobileReports({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets ItemPolicies associated with the MobileReport catalog item.",
        "operationId" : "GetMobileReportPolicies",
        "tags" : [ "MobileReports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Sets ItemPolicies on the MobileReport item.",
        "operationId" : "SetMobileReportPolicies",
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "name" : "MobileReports",
          "description" : "Array of ItemPolicies to set on the MobileReport CatalogItem.",
          "in" : "body",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/MobileReports({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets MobileReport Properties (takes list of Property names to retrieve the values)",
        "operationId" : "GetMobileReportProperties",
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "name" : "properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the MobileReport properties included in the given list.",
        "operationId" : "UpdateMobileReportProperties",
        "tags" : [ "MobileReports" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports" : {
      "get" : {
        "summary" : "Gets an array of Report CatalogItems.",
        "operationId" : "GetReports",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataReports",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Report"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new Report CatalogItem.",
        "operationId" : "AddReport",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "Report",
          "description" : "The definition of the new Report CatalogItem.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Report"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Report"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a Report CatalogItem specified by the Id.",
        "operationId" : "GetReport",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Report"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the specified Report CatalogItem using the provided definition.",
        "operationId" : "UpdateReport",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "Report",
          "description" : "Definition of the Report item that updates the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Report"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Report.",
        "operationId" : "DeleteReport",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/AllowedActions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of actions allowed in the current session; user permissions and product edition capabilities are considered when querying.",
        "operationId" : "GetReportAllowedActions",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/CacheOptions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the content of CacheOptions for the Report specified by the Id",
        "operationId" : "GetReportCacheOptions",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/CacheOptions"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces the CacheOptions content for a given Report using the provided definition.",
        "operationId" : "SetReportCacheOptions",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "CacheOptions",
          "description" : "Updated definition for the CacheOptions content associated with the given Report.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/CacheOptions"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/CacheRefreshPlans" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the CacheRefreshPlans for the Report specified by the Id",
        "operationId" : "GetReportCacheRefreshPlans",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataCacheRefreshPlans",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CacheRefreshPlan"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/Comments" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the Comments for a Report specified by the Id.",
        "operationId" : "GetReportComments",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "A collection of Comments associated to the Report",
            "schema" : {
              "type" : "object",
              "title" : "ODataComments",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Comment"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates a new Comment associated to the specified Report.",
        "operationId" : "AddReportComment",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "Comment",
          "description" : "The Comment to be created",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Comment"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/Comments({CommentId})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      }, {
        "name" : "CommentId",
        "description" : "The Id of the Comment.",
        "in" : "path",
        "type" : "string",
        "required" : true
      } ],
      "put" : {
        "summary" : "Updates the Comment specified by CommentId in the associated Report.",
        "operationId" : "UpdateReportComment",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "Comment",
          "description" : "The Comment to be updated",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Comment"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Comment associated to the Report.",
        "operationId" : "DeleteReportComment",
        "tags" : [ "Reports" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/Content/$value" : {
      "get" : {
        "summary" : "Gets the content of the specified Report CatalogItem specified by the Id.",
        "operationId" : "GetReportContent",
        "produces" : [ "application/octet-stream" ],
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "The content of the Report CatalogItem specified by the Id.",
            "schema" : {
              "type" : "file"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/DataSources" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the DataSources associated with the Report specified by the Id.",
        "operationId" : "GetReportDataSources",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataDataSources",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/DataSource"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the DataSource definition associated with the Report specified by the Id.",
        "operationId" : "SetReportDataSource",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "DataSource",
          "description" : "Updated definition for the DataSource associated with the Report specified by the Id.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/DataSource"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/DependentItems" : {
      "get" : {
        "summary" : "Returns a list of CatalogItems that reference the Report specified by the Id.",
        "operationId" : "GetReportDependentItems",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataDependentItems",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/CatalogItem"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/HistorySnapshots" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Get a list of HistorySnapshots for the specified Report.",
        "operationId" : "GetReportHistorySnapshots",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/HistorySnapshot"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates new HistorySnapshot",
        "operationId" : "AddReportHistorySnapshot",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "boolean",
              "format" : "true|false"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/HistorySnapshots({HistoryId})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      }, {
        "name" : "HistoryId",
        "description" : "The ID property of the HistorySnapshot",
        "in" : "path",
        "type" : "string",
        "required" : true
      } ],
      "get" : {
        "summary" : "Gets the requested Reports HistorySnapshot specified by HistoryId.",
        "operationId" : "GetReportHistorySnapshot",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HistorySnapshot"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the requested Reports HistorySnapshot specified by HistoryId.",
        "operationId" : "DeleteReportHistorySnapshot",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "boolean",
              "format" : "true|false"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/HistorySnapshotOptions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the HistorySnapshotOptions for the specified Report.",
        "operationId" : "GetReportHistorySnapshotOptions",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/HistorySnapshotOptions"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates HistorySnapshotOptions for the specified Report.",
        "operationId" : "SetReportHistorySnapshotOptions",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "HistorySnapshotOptions",
          "description" : "Modified HistorySnapshotOptions object.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/HistorySnapshotOptions"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/Model.CheckDataSourceConnection" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "post" : {
        "summary" : "Checks the status of the specified Reports DataSource connection.",
        "operationId" : "CheckReportDataSourceConnection",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "DataSourceName",
          "description" : "The name of the DataSource to check.",
          "in" : "body",
          "schema" : {
            "type" : "string"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/DataSourceCheckResult"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/Model.UpdateCacheSnapshot" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "post" : {
        "summary" : "Updates the execution cache snapshot for the specified report.",
        "operationId" : "UpdateCacheSnapshot",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "UpdateCacheSnapshotResult",
              "properties" : {
                "value" : {
                  "type" : "boolean"
                }
              }
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/ParameterDefinitions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the ParameterDefinitions associated with the Report specified by the Id.",
        "operationId" : "GetReportParameterDefinitions",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/ReportParameterDefinition"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the ParameterDefinitions associated with the Report specified by Id.",
        "operationId" : "UpdateReportParameterDefinitions",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "ParameterDefinitions",
          "description" : "Updated definitions for the ParameterDefinitions associated with the Report, represented as ParameterDefinitionsPatch object. It is only necessary to include properties to be updated. All other property values will be left unchanged.",
          "in" : "body",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ReportParameterDefinitionPatch"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets policies associated with the specified Report CatalogItem.",
        "operationId" : "GetReportPolicies",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces ItemPolicies associated with the Report specified by the Id.",
        "operationId" : "SetReportPolicies",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "ItemPolicies",
          "in" : "body",
          "description" : "The ItemPolicy definitions that will be replaced.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the specified Reports Properties (takes list of Property names to retrieve the values)",
        "operationId" : "GetReportProperties",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the Report Properties included in the given list.",
        "operationId" : "UpdateReportProperties",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/SharedDataSets" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the shared DataSets for the specified Report.",
        "operationId" : "GetReportSharedDataSets",
        "tags" : [ "Reports" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/DataSet"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the DataSet definitions associated with the specified Report.",
        "operationId" : "SetReportSharedDataSets",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "name" : "DataSets",
          "description" : "Updated DataSet definitions for the specified Report.",
          "in" : "body",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/DataSet"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Reports({Id})/Subscriptions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the Subscriptions for the specified Report.",
        "operationId" : "GetReportSubscriptions",
        "tags" : [ "Reports" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/expand"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Subscription"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Resources" : {
      "get" : {
        "summary" : "Gets an array of Resource catalog items",
        "operationId" : "GetResources",
        "tags" : [ "Resources" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataResources",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "@odata.count" : {
                  "type" : "integer"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Resource"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates new Resource item",
        "operationId" : "AddResource",
        "tags" : [ "Resources" ],
        "parameters" : [ {
          "name" : "Resource",
          "description" : "The definition of the new Resource item.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Resource"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "schema" : {
              "$ref" : "#/definitions/Resource"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "409" : {
            "description" : "Conflict. Item already exists."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Resources({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Get the specified Resource.",
        "operationId" : "GetResource",
        "tags" : [ "Resources" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Resource"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the specified Resource catalog item.",
        "operationId" : "UpdateResource",
        "tags" : [ "Resources" ],
        "parameters" : [ {
          "name" : "Resource",
          "description" : "Definition of the Resource item that replaces the current item on the server. It is only necessary to include properties to be updated. All other property values on the CatalogItem will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Resource"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content",
            "schema" : {
              "$ref" : "#/definitions/Resource"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Delete the specified Resource catalog item.",
        "operationId" : "DeleteResource",
        "tags" : [ "Resources" ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Resources({Id})/AllowedActions" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets a list of actions allowed in the current session; considering user permissions and product edition capabilities.",
        "operationId" : "GetResourceAllowedActions",
        "tags" : [ "Resources" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Resources({Id})/Content/$value" : {
      "get" : {
        "summary" : "Gets the content of the specified Resource CatalogItem specified by the Id.",
        "operationId" : "GetResourceContent",
        "produces" : [ "application/octet-stream" ],
        "tags" : [ "Resources" ],
        "parameters" : [ {
          "$ref" : "#/parameters/PathOrId"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "file"
            }
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Resources({Id})/Policies" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets ItemPolicies on the Resource item.",
        "operationId" : "GetResourcePolicies",
        "tags" : [ "Resources" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ItemPolicy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces ItemPolicies on the Resource item.",
        "operationId" : "SetResourcePolicies",
        "tags" : [ "Resources" ],
        "parameters" : [ {
          "name" : "Policies",
          "description" : "Array of ItemPolicies to set on the Resource CatalogItem.",
          "in" : "body",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ItemPolicy"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Resources({Id})/Properties" : {
      "parameters" : [ {
        "$ref" : "#/parameters/PathOrId"
      } ],
      "get" : {
        "summary" : "Gets the specified Resources Properties (takes list of Property names to retrieve the values)",
        "operationId" : "GetResourceProperties",
        "tags" : [ "Resources" ],
        "parameters" : [ {
          "name" : "Properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the Resource Properties included in the given list.",
        "operationId" : "UpdateResourceProperties",
        "tags" : [ "Resources" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "The Properties that will be updated.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Session" : {
      "post" : {
        "summary" : "Creates a new session",
        "operationId" : "CreateSession",
        "tags" : [ "Session" ],
        "parameters" : [ {
          "name" : "UserCredentials",
          "description" : "The credentials of the user to logon as",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/UserCredentials"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "A session for the user credentials was created and a forms authentication cookie was sent as part of the response."
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "401" : {
            "description" : "The credentials provided are invalid."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the currently active session",
        "operationId" : "DeleteSession",
        "tags" : [ "Session" ],
        "responses" : {
          "200" : {
            "description" : "An empty session cookie is sent with the response."
          },
          "401" : {
            "description" : "The user is not yet authenticated."
          }
        }
      }
    },
    "/Subscriptions" : {
      "get" : {
        "summary" : "Gets an array of Subscriptions.",
        "operationId" : "GetSubscriptions",
        "tags" : [ "Subscriptions" ],
        "parameters" : [ {
          "$ref" : "#/parameters/top"
        }, {
          "$ref" : "#/parameters/skip"
        }, {
          "$ref" : "#/parameters/filter"
        }, {
          "$ref" : "#/parameters/count"
        }, {
          "$ref" : "#/parameters/orderby"
        }, {
          "$ref" : "#/parameters/expand"
        }, {
          "$ref" : "#/parameters/select"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Subscription"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "post" : {
        "summary" : "Creates new Subscription item",
        "operationId" : "AddSubscription",
        "tags" : [ "Subscriptions" ],
        "parameters" : [ {
          "name" : "Subscription",
          "description" : "The definition of the new Subscription item.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Subscription"
          },
          "required" : true
        } ],
        "responses" : {
          "201" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Subscriptions({Id})" : {
      "parameters" : [ {
        "$ref" : "#/parameters/Id"
      } ],
      "get" : {
        "summary" : "Get the specified Subscription.",
        "operationId" : "GetSubscription",
        "tags" : [ "Subscriptions" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/Subscription"
            }
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "delete" : {
        "summary" : "Deletes the specified Subscription.",
        "operationId" : "DeleteSubscription",
        "tags" : [ "Subscriptions" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Replaces the Subscription item using Id property as key.",
        "operationId" : "SetSubscription",
        "tags" : [ "Subscriptions" ],
        "parameters" : [ {
          "name" : "Subscription",
          "description" : "Subscription item to update.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Subscription"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the Subscription item using Id property as key.",
        "operationId" : "UpdateSubscription",
        "tags" : [ "Subscriptions" ],
        "parameters" : [ {
          "name" : "Subscription",
          "description" : "Definition of the Subscription that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/Subscription"
          },
          "required" : true
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Subscriptions({Id})/Model.Enable" : {
      "parameters" : [ {
        "$ref" : "#/parameters/Id"
      } ],
      "post" : {
        "summary" : "Enables a Subscription specified by the Id.",
        "operationId" : "EnableSubscription",
        "tags" : [ "Subscriptions" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Subscriptions({Id})/Model.Execute" : {
      "parameters" : [ {
        "$ref" : "#/parameters/Id"
      } ],
      "post" : {
        "summary" : "Executes the Subscription specified by the Id.",
        "operationId" : "ExecuteSubscription",
        "tags" : [ "Subscriptions" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/Subscriptions({Id})/Model.Disable" : {
      "parameters" : [ {
        "$ref" : "#/parameters/Id"
      } ],
      "post" : {
        "summary" : "Disables the Subscription specified by the Id.",
        "operationId" : "DisableSubscription",
        "tags" : [ "Subscriptions" ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "Couldn't understand your request."
          },
          "404" : {
            "description" : "Not found."
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/System" : {
      "get" : {
        "summary" : "Get SystemInformation",
        "operationId" : "GetSystemInfo",
        "tags" : [ "System" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "$ref" : "#/definitions/SystemInfo"
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/System/AllowedActions" : {
      "get" : {
        "summary" : "Gets a list of system level actions allowed in the current session; user permissions and product edition capabilities are considered when querying.",
        "operationId" : "GetSystemAllowedActions",
        "tags" : [ "System" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataAllowedActions",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/AllowedAction"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/System/Policies" : {
      "get" : {
        "summary" : "Gets the System Policies.",
        "operationId" : "GetSystemPolicies",
        "tags" : [ "System" ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Policy"
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "put" : {
        "summary" : "Updates the System's Policies.",
        "operationId" : "SetSystemPolicies",
        "tags" : [ "System" ],
        "parameters" : [ {
          "name" : "SystemPolicy",
          "description" : "The SystemPolicy object that contains settings to apply.",
          "in" : "body",
          "schema" : {
            "$ref" : "#/definitions/SystemPolicy"
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    },
    "/System/Properties" : {
      "get" : {
        "summary" : "Gets the Systems Properties (takes list of Property names to retrieve the values)",
        "operationId" : "GetSystemProperties",
        "tags" : [ "System" ],
        "parameters" : [ {
          "name" : "properties",
          "description" : "Names for the Properties to be returned.",
          "in" : "query",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          },
          "type" : "array"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok",
            "schema" : {
              "type" : "object",
              "title" : "ODataProperties",
              "properties" : {
                "@odata.context" : {
                  "type" : "string"
                },
                "value" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/definitions/Property"
                  }
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      },
      "patch" : {
        "summary" : "Updates the System Properties with the given property list.",
        "operationId" : "UpdateSystemProperties",
        "tags" : [ "System" ],
        "parameters" : [ {
          "name" : "Properties",
          "in" : "body",
          "description" : "Definition of the SystemProperties that updates the current item on the server. It is only necessary to include properties to be updated. All other property values will be left unchanged.",
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Property"
            }
          },
          "required" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok"
          },
          "default" : {
            "$ref" : "#/responses/error"
          }
        }
      }
    }
  },
  "responses" : {
    "error" : {
      "description" : "Error",
      "schema" : {
        "$ref" : "#/definitions/odata.error"
      }
    }
  },
  "parameters" : {
    "PathOrId" : {
      "name" : "Id",
      "in" : "path",
      "type" : "string",
      "format" : "string",
      "required" : true,
      "description" : "The key (GUID or path) that uniquely identifies the object.\nGUID example: 01234567-89ab-cdef-0123-456789abcdef\npath example: path='/folder1/folder2/item'\nIf the path itself contains single quote, it should be escaped - add another single quote."
    },
    "Id" : {
      "name" : "Id",
      "in" : "path",
      "type" : "string",
      "format" : "string",
      "required" : true,
      "description" : "The key (GUID) that uniquely identifies the object.\nGUID example: 01234567-89ab-cdef-0123-456789abcdef"
    },
    "top" : {
      "name" : "$top",
      "description" : "Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630)",
      "in" : "query",
      "type" : "integer"
    },
    "skip" : {
      "name" : "$skip",
      "description" : "Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631)",
      "in" : "query",
      "type" : "integer"
    },
    "count" : {
      "name" : "$count",
      "description" : "Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632)",
      "in" : "query",
      "type" : "string"
    },
    "filter" : {
      "name" : "$filter",
      "description" : "Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625)",
      "in" : "query",
      "type" : "string"
    },
    "orderby" : {
      "name" : "$orderBy",
      "description" : "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629)",
      "in" : "query",
      "type" : "string"
    },
    "expand" : {
      "name" : "$expand",
      "description" : "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374621)",
      "in" : "query",
      "type" : "string"
    },
    "select" : {
      "name" : "$select",
      "description" : "Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620)",
      "in" : "query",
      "type" : "string"
    }
  }
}