/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SSRSRestV2.Api;
using SSRSRestV2.Model;
using SSRSRestV2.Client;
using System.Reflection;

namespace SSRSRestV2.Test.Model
{
    /// <summary>
    ///  Class for testing ReportParameterDefinition
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ReportParameterDefinitionTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ReportParameterDefinition
        //private ReportParameterDefinition instance;

        public ReportParameterDefinitionTests()
        {
            // TODO uncomment below to create an instance of ReportParameterDefinition
            //instance = new ReportParameterDefinition();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ReportParameterDefinition
        /// </summary>
        [Fact]
        public void ReportParameterDefinitionInstanceTest()
        {
            // TODO uncomment below to test "IsType" ReportParameterDefinition
            //Assert.IsType<ReportParameterDefinition>(instance);
        }


        /// <summary>
        /// Test the property 'AllowBlank'
        /// </summary>
        [Fact]
        public void AllowBlankTest()
        {
            // TODO unit test for the property 'AllowBlank'
        }
        /// <summary>
        /// Test the property 'DefaultValues'
        /// </summary>
        [Fact]
        public void DefaultValuesTest()
        {
            // TODO unit test for the property 'DefaultValues'
        }
        /// <summary>
        /// Test the property 'DefaultValuesIsNull'
        /// </summary>
        [Fact]
        public void DefaultValuesIsNullTest()
        {
            // TODO unit test for the property 'DefaultValuesIsNull'
        }
        /// <summary>
        /// Test the property 'DefaultValuesQueryBased'
        /// </summary>
        [Fact]
        public void DefaultValuesQueryBasedTest()
        {
            // TODO unit test for the property 'DefaultValuesQueryBased'
        }
        /// <summary>
        /// Test the property 'Dependencies'
        /// </summary>
        [Fact]
        public void DependenciesTest()
        {
            // TODO unit test for the property 'Dependencies'
        }
        /// <summary>
        /// Test the property 'ErrorMessage'
        /// </summary>
        [Fact]
        public void ErrorMessageTest()
        {
            // TODO unit test for the property 'ErrorMessage'
        }
        /// <summary>
        /// Test the property 'MultiValue'
        /// </summary>
        [Fact]
        public void MultiValueTest()
        {
            // TODO unit test for the property 'MultiValue'
        }
        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Fact]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'Nullable'
        /// </summary>
        [Fact]
        public void NullableTest()
        {
            // TODO unit test for the property 'Nullable'
        }
        /// <summary>
        /// Test the property 'ParameterState'
        /// </summary>
        [Fact]
        public void ParameterStateTest()
        {
            // TODO unit test for the property 'ParameterState'
        }
        /// <summary>
        /// Test the property 'ParameterType'
        /// </summary>
        [Fact]
        public void ParameterTypeTest()
        {
            // TODO unit test for the property 'ParameterType'
        }
        /// <summary>
        /// Test the property 'ParameterVisibility'
        /// </summary>
        [Fact]
        public void ParameterVisibilityTest()
        {
            // TODO unit test for the property 'ParameterVisibility'
        }
        /// <summary>
        /// Test the property 'Prompt'
        /// </summary>
        [Fact]
        public void PromptTest()
        {
            // TODO unit test for the property 'Prompt'
        }
        /// <summary>
        /// Test the property 'PromptUser'
        /// </summary>
        [Fact]
        public void PromptUserTest()
        {
            // TODO unit test for the property 'PromptUser'
        }
        /// <summary>
        /// Test the property 'QueryParameter'
        /// </summary>
        [Fact]
        public void QueryParameterTest()
        {
            // TODO unit test for the property 'QueryParameter'
        }
        /// <summary>
        /// Test the property 'ValidValues'
        /// </summary>
        [Fact]
        public void ValidValuesTest()
        {
            // TODO unit test for the property 'ValidValues'
        }
        /// <summary>
        /// Test the property 'ValidValuesIsNull'
        /// </summary>
        [Fact]
        public void ValidValuesIsNullTest()
        {
            // TODO unit test for the property 'ValidValuesIsNull'
        }
        /// <summary>
        /// Test the property 'ValidValuesQueryBased'
        /// </summary>
        [Fact]
        public void ValidValuesQueryBasedTest()
        {
            // TODO unit test for the property 'ValidValuesQueryBased'
        }

    }

}
