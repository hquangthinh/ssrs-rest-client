/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using SSRSRestV2.IApi;
using SSRSRestV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace SSRSRestV2.Test.Api
{
    /// <summary>
    ///  Class for testing DataSourcesApi
    /// </summary>
    public sealed class DataSourcesApiTests : ApiTestsBase
    {
        private readonly IApi.IDataSourcesApi _instance;

        public DataSourcesApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IApi.IDataSourcesApi>();
        }


        /// <summary>
        /// Test AddDataSource
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddDataSourceAsyncTest()
        {
            DataSource dataSource = default;
            var response = await _instance.AddDataSourceAsync(dataSource);
            Assert.IsType<DataSource>(response);
        }

        /// <summary>
        /// Test CheckExistingDataSourceConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckExistingDataSourceConnectionAsyncTest()
        {
            string id = default;
            var response = await _instance.CheckExistingDataSourceConnectionAsync(id);
            Assert.IsType<DataSourceCheckResult>(response);
        }

        /// <summary>
        /// Test CheckNewDataSourceConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckNewDataSourceConnectionAsyncTest()
        {
            DataSource dataSource = default;
            var response = await _instance.CheckNewDataSourceConnectionAsync(dataSource);
            Assert.IsType<DataSourceCheckResult>(response);
        }

        /// <summary>
        /// Test DeleteDataSource
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteDataSourceAsyncTest()
        {
            string id = default;
            await _instance.DeleteDataSourceAsync(id);
        }

        /// <summary>
        /// Test GetDataSource
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDataSourceAsyncTest()
        {
            string id = default;
            var response = await _instance.GetDataSourceAsync(id);
            Assert.IsType<DataSource>(response);
        }

        /// <summary>
        /// Test GetDataSourceAllowedActions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDataSourceAllowedActionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetDataSourceAllowedActionsAsync(id);
            Assert.IsType<ODataAllowedActions>(response);
        }

        /// <summary>
        /// Test GetDataSourceContent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDataSourceContentAsyncTest()
        {
            string id = default;
            var response = await _instance.GetDataSourceContentAsync(id);
            Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetDataSourceDependentItems
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDataSourceDependentItemsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetDataSourceDependentItemsAsync(id);
            Assert.IsType<ODataDependentItems>(response);
        }

        /// <summary>
        /// Test GetDataSourcePolicies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDataSourcePoliciesAsyncTest()
        {
            string id = default;
            var response = await _instance.GetDataSourcePoliciesAsync(id);
            Assert.IsType<List<ItemPolicy>>(response);
        }

        /// <summary>
        /// Test GetDataSourceQueryFields
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDataSourceQueryFieldsAsyncTest()
        {
            QueryFieldsRequest queryFieldsRequest = default;
            var response = await _instance.GetDataSourceQueryFieldsAsync(queryFieldsRequest);
            Assert.IsType<ODataQueryFields>(response);
        }

        /// <summary>
        /// Test GetDataSources
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDataSourcesAsyncTest()
        {
            int? top = default;
            int? skip = default;
            string filter = default;
            string count = default;
            string orderBy = default;
            string select = default;
            var response = await _instance.GetDataSourcesAsync(top, skip, filter, count, orderBy, select);
            Assert.IsType<ODataDataSources>(response);
        }

        /// <summary>
        /// Test GetDatasourceProperties
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetDatasourcePropertiesAsyncTest()
        {
            string id = default;
            List<string> properties = default;
            var response = await _instance.GetDatasourcePropertiesAsync(id, properties);
            Assert.IsType<ODataProperties>(response);
        }

        /// <summary>
        /// Test SetDataSourcePolicies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetDataSourcePoliciesAsyncTest()
        {
            List<ItemPolicy> itemPolicy = default;
            string id = default;
            await _instance.SetDataSourcePoliciesAsync(itemPolicy, id);
        }

        /// <summary>
        /// Test UpdateDataSource
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateDataSourceAsyncTest()
        {
            DataSource dataSource = default;
            string id = default;
            await _instance.UpdateDataSourceAsync(dataSource, id);
        }

        /// <summary>
        /// Test UpdateDatasourceProperties
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateDatasourcePropertiesAsyncTest()
        {
            List<Property> properties = default;
            string id = default;
            await _instance.UpdateDatasourcePropertiesAsync(properties, id);
        }
    }
}
