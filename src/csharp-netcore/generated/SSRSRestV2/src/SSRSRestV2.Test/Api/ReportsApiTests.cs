/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using SSRSRestV2.IApi;
using SSRSRestV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace SSRSRestV2.Test.Api
{
    /// <summary>
    ///  Class for testing ReportsApi
    /// </summary>
    public sealed class ReportsApiTests : ApiTestsBase
    {
        private readonly IApi.IReportsApi _instance;

        public ReportsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IApi.IReportsApi>();
        }


        /// <summary>
        /// Test AddReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddReportAsyncTest()
        {
            Report report = default;
            var response = await _instance.AddReportAsync(report);
            Assert.IsType<Report>(response);
        }

        /// <summary>
        /// Test AddReportComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddReportCommentAsyncTest()
        {
            Comment comment = default;
            string id = default;
            await _instance.AddReportCommentAsync(comment, id);
        }

        /// <summary>
        /// Test AddReportHistorySnapshot
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddReportHistorySnapshotAsyncTest()
        {
            string id = default;
            var response = await _instance.AddReportHistorySnapshotAsync(id);
            Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test CheckReportDataSourceConnection
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task CheckReportDataSourceConnectionAsyncTest()
        {
            string id = default;
            string dataSourceName = default;
            var response = await _instance.CheckReportDataSourceConnectionAsync(id, dataSourceName);
            Assert.IsType<DataSourceCheckResult>(response);
        }

        /// <summary>
        /// Test DeleteReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteReportAsyncTest()
        {
            string id = default;
            await _instance.DeleteReportAsync(id);
        }

        /// <summary>
        /// Test DeleteReportComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteReportCommentAsyncTest()
        {
            string id = default;
            string commentId = default;
            await _instance.DeleteReportCommentAsync(id, commentId);
        }

        /// <summary>
        /// Test DeleteReportHistorySnapshot
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteReportHistorySnapshotAsyncTest()
        {
            string id = default;
            string historyId = default;
            var response = await _instance.DeleteReportHistorySnapshotAsync(id, historyId);
            Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test GetReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportAsync(id);
            Assert.IsType<Report>(response);
        }

        /// <summary>
        /// Test GetReportAllowedActions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportAllowedActionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportAllowedActionsAsync(id);
            Assert.IsType<ODataAllowedActions>(response);
        }

        /// <summary>
        /// Test GetReportCacheOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportCacheOptionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportCacheOptionsAsync(id);
            Assert.IsType<CacheOptions>(response);
        }

        /// <summary>
        /// Test GetReportCacheRefreshPlans
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportCacheRefreshPlansAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportCacheRefreshPlansAsync(id);
            Assert.IsType<ODataCacheRefreshPlans>(response);
        }

        /// <summary>
        /// Test GetReportComments
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportCommentsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportCommentsAsync(id);
            Assert.IsType<ODataComments>(response);
        }

        /// <summary>
        /// Test GetReportContent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportContentAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportContentAsync(id);
            Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetReportDataSources
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportDataSourcesAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportDataSourcesAsync(id);
            Assert.IsType<ODataDataSources>(response);
        }

        /// <summary>
        /// Test GetReportDependentItems
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportDependentItemsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportDependentItemsAsync(id);
            Assert.IsType<ODataDependentItems>(response);
        }

        /// <summary>
        /// Test GetReportHistorySnapshot
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportHistorySnapshotAsyncTest()
        {
            string id = default;
            string historyId = default;
            var response = await _instance.GetReportHistorySnapshotAsync(id, historyId);
            Assert.IsType<HistorySnapshot>(response);
        }

        /// <summary>
        /// Test GetReportHistorySnapshotOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportHistorySnapshotOptionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportHistorySnapshotOptionsAsync(id);
            Assert.IsType<HistorySnapshotOptions>(response);
        }

        /// <summary>
        /// Test GetReportHistorySnapshots
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportHistorySnapshotsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportHistorySnapshotsAsync(id);
            Assert.IsType<List<HistorySnapshot>>(response);
        }

        /// <summary>
        /// Test GetReportParameterDefinitions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportParameterDefinitionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportParameterDefinitionsAsync(id);
            Assert.IsType<ODataProperties2>(response);
        }

        /// <summary>
        /// Test GetReportPolicies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportPoliciesAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportPoliciesAsync(id);
            Assert.IsType<List<ItemPolicy>>(response);
        }

        /// <summary>
        /// Test GetReportProperties
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportPropertiesAsyncTest()
        {
            string id = default;
            List<string> properties = default;
            var response = await _instance.GetReportPropertiesAsync(id, properties);
            Assert.IsType<ODataProperties>(response);
        }

        /// <summary>
        /// Test GetReportSharedDataSets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportSharedDataSetsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetReportSharedDataSetsAsync(id);
            Assert.IsType<List<DataSet>>(response);
        }

        /// <summary>
        /// Test GetReportSubscriptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportSubscriptionsAsyncTest()
        {
            string id = default;
            int? top = default;
            int? skip = default;
            string filter = default;
            string count = default;
            string orderBy = default;
            string expand = default;
            string select = default;
            var response = await _instance.GetReportSubscriptionsAsync(id, top, skip, filter, count, orderBy, expand, select);
            Assert.IsType<List<Subscription>>(response);
        }

        /// <summary>
        /// Test GetReports
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetReportsAsyncTest()
        {
            int? top = default;
            int? skip = default;
            string filter = default;
            string count = default;
            string orderBy = default;
            string select = default;
            var response = await _instance.GetReportsAsync(top, skip, filter, count, orderBy, select);
            Assert.IsType<ODataReports>(response);
        }

        /// <summary>
        /// Test SetReportCacheOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetReportCacheOptionsAsyncTest()
        {
            CacheOptions cacheOptions = default;
            string id = default;
            await _instance.SetReportCacheOptionsAsync(cacheOptions, id);
        }

        /// <summary>
        /// Test SetReportDataSource
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetReportDataSourceAsyncTest()
        {
            DataSource dataSource = default;
            string id = default;
            await _instance.SetReportDataSourceAsync(dataSource, id);
        }

        /// <summary>
        /// Test SetReportHistorySnapshotOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetReportHistorySnapshotOptionsAsyncTest()
        {
            HistorySnapshotOptions historySnapshotOptions = default;
            string id = default;
            await _instance.SetReportHistorySnapshotOptionsAsync(historySnapshotOptions, id);
        }

        /// <summary>
        /// Test SetReportPolicies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetReportPoliciesAsyncTest()
        {
            List<ItemPolicy> itemPolicies = default;
            string id = default;
            await _instance.SetReportPoliciesAsync(itemPolicies, id);
        }

        /// <summary>
        /// Test SetReportSharedDataSets
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetReportSharedDataSetsAsyncTest()
        {
            List<DataSet> dataSets = default;
            string id = default;
            await _instance.SetReportSharedDataSetsAsync(dataSets, id);
        }

        /// <summary>
        /// Test UpdateCacheSnapshot
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateCacheSnapshotAsyncTest()
        {
            string id = default;
            var response = await _instance.UpdateCacheSnapshotAsync(id);
            Assert.IsType<UpdateCacheSnapshotResult>(response);
        }

        /// <summary>
        /// Test UpdateReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateReportAsyncTest()
        {
            Report report = default;
            string id = default;
            await _instance.UpdateReportAsync(report, id);
        }

        /// <summary>
        /// Test UpdateReportComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateReportCommentAsyncTest()
        {
            Comment comment = default;
            string id = default;
            string commentId = default;
            await _instance.UpdateReportCommentAsync(comment, id, commentId);
        }

        /// <summary>
        /// Test UpdateReportParameterDefinitions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateReportParameterDefinitionsAsyncTest()
        {
            List<ReportParameterDefinitionPatch> parameterDefinitions = default;
            string id = default;
            await _instance.UpdateReportParameterDefinitionsAsync(parameterDefinitions, id);
        }

        /// <summary>
        /// Test UpdateReportProperties
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateReportPropertiesAsyncTest()
        {
            List<Property> properties = default;
            string id = default;
            await _instance.UpdateReportPropertiesAsync(properties, id);
        }
    }
}
