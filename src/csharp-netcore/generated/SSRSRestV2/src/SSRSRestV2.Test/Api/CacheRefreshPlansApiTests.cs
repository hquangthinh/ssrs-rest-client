/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using SSRSRestV2.IApi;
using SSRSRestV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace SSRSRestV2.Test.Api
{
    /// <summary>
    ///  Class for testing CacheRefreshPlansApi
    /// </summary>
    public sealed class CacheRefreshPlansApiTests : ApiTestsBase
    {
        private readonly IApi.ICacheRefreshPlansApi _instance;

        public CacheRefreshPlansApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IApi.ICacheRefreshPlansApi>();
        }


        /// <summary>
        /// Test AddCacheRefreshPlan
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddCacheRefreshPlanAsyncTest()
        {
            CacheRefreshPlan cacheRefreshPlan = default;
            var response = await _instance.AddCacheRefreshPlanAsync(cacheRefreshPlan);
            Assert.IsType<CacheRefreshPlan>(response);
        }

        /// <summary>
        /// Test DeleteCacheRefreshPlan
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteCacheRefreshPlanAsyncTest()
        {
            string id = default;
            await _instance.DeleteCacheRefreshPlanAsync(id);
        }

        /// <summary>
        /// Test ExecuteCacheRefreshPlan
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ExecuteCacheRefreshPlanAsyncTest()
        {
            string id = default;
            await _instance.ExecuteCacheRefreshPlanAsync(id);
        }

        /// <summary>
        /// Test GetCacheRefreshPlan
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCacheRefreshPlanAsyncTest()
        {
            string id = default;
            var response = await _instance.GetCacheRefreshPlanAsync(id);
            Assert.IsType<CacheRefreshPlan>(response);
        }

        /// <summary>
        /// Test SetCacheRefreshPlan
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetCacheRefreshPlanAsyncTest()
        {
            CacheRefreshPlan cacheRefreshPlan = default;
            string id = default;
            var response = await _instance.SetCacheRefreshPlanAsync(cacheRefreshPlan, id);
            Assert.IsType<CacheRefreshPlan>(response);
        }
    }
}
