/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using SSRSRestV2.IApi;
using SSRSRestV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace SSRSRestV2.Test.Api
{
    /// <summary>
    ///  Class for testing LinkedReportsApi
    /// </summary>
    public sealed class LinkedReportsApiTests : ApiTestsBase
    {
        private readonly IApi.ILinkedReportsApi _instance;

        public LinkedReportsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IApi.ILinkedReportsApi>();
        }


        /// <summary>
        /// Test AddLinkedReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddLinkedReportAsyncTest()
        {
            LinkedReport linkedReport = default;
            var response = await _instance.AddLinkedReportAsync(linkedReport);
            Assert.IsType<LinkedReport>(response);
        }

        /// <summary>
        /// Test AddLinkedReportComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddLinkedReportCommentAsyncTest()
        {
            Comment comment = default;
            string id = default;
            await _instance.AddLinkedReportCommentAsync(comment, id);
        }

        /// <summary>
        /// Test AddLinkedReportHistorySnapshot
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddLinkedReportHistorySnapshotAsyncTest()
        {
            string id = default;
            var response = await _instance.AddLinkedReportHistorySnapshotAsync(id);
            Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test DeleteLinkedReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteLinkedReportAsyncTest()
        {
            string id = default;
            await _instance.DeleteLinkedReportAsync(id);
        }

        /// <summary>
        /// Test DeleteLinkedReportComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteLinkedReportCommentAsyncTest()
        {
            string id = default;
            string commentId = default;
            await _instance.DeleteLinkedReportCommentAsync(id, commentId);
        }

        /// <summary>
        /// Test DeleteLinkedReportHistorySnapshot
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteLinkedReportHistorySnapshotAsyncTest()
        {
            string id = default;
            string historyId = default;
            var response = await _instance.DeleteLinkedReportHistorySnapshotAsync(id, historyId);
            Assert.IsType<bool>(response);
        }

        /// <summary>
        /// Test GetLinkedReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportAsync(id);
            Assert.IsType<LinkedReport>(response);
        }

        /// <summary>
        /// Test GetLinkedReportAllowedActions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportAllowedActionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportAllowedActionsAsync(id);
            Assert.IsType<ODataAllowedActions>(response);
        }

        /// <summary>
        /// Test GetLinkedReportCacheOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportCacheOptionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportCacheOptionsAsync(id);
            Assert.IsType<CacheOptions>(response);
        }

        /// <summary>
        /// Test GetLinkedReportCacheRefreshPlans
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportCacheRefreshPlansAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportCacheRefreshPlansAsync(id);
            Assert.IsType<ODataCacheRefreshPlans>(response);
        }

        /// <summary>
        /// Test GetLinkedReportComments
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportCommentsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportCommentsAsync(id);
            Assert.IsType<ODataComments>(response);
        }

        /// <summary>
        /// Test GetLinkedReportHistorySnapshot
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportHistorySnapshotAsyncTest()
        {
            string id = default;
            string historyId = default;
            var response = await _instance.GetLinkedReportHistorySnapshotAsync(id, historyId);
            Assert.IsType<HistorySnapshot>(response);
        }

        /// <summary>
        /// Test GetLinkedReportHistorySnapshotOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportHistorySnapshotOptionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportHistorySnapshotOptionsAsync(id);
            Assert.IsType<HistorySnapshotOptions>(response);
        }

        /// <summary>
        /// Test GetLinkedReportHistorySnapshots
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportHistorySnapshotsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportHistorySnapshotsAsync(id);
            Assert.IsType<List<HistorySnapshot>>(response);
        }

        /// <summary>
        /// Test GetLinkedReportParameterDefinitions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportParameterDefinitionsAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportParameterDefinitionsAsync(id);
            Assert.IsType<ODataReportParameterDefinitions>(response);
        }

        /// <summary>
        /// Test GetLinkedReportPolicies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportPoliciesAsyncTest()
        {
            string id = default;
            var response = await _instance.GetLinkedReportPoliciesAsync(id);
            Assert.IsType<List<ItemPolicy>>(response);
        }

        /// <summary>
        /// Test GetLinkedReportProperties
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportPropertiesAsyncTest()
        {
            string id = default;
            List<string> properties = default;
            var response = await _instance.GetLinkedReportPropertiesAsync(id, properties);
            Assert.IsType<ODataProperties>(response);
        }

        /// <summary>
        /// Test GetLinkedReports
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetLinkedReportsAsyncTest()
        {
            int? top = default;
            int? skip = default;
            string filter = default;
            string count = default;
            string orderBy = default;
            string select = default;
            var response = await _instance.GetLinkedReportsAsync(top, skip, filter, count, orderBy, select);
            Assert.IsType<ODataLinkedReports>(response);
        }

        /// <summary>
        /// Test SetLinkedReportCacheOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetLinkedReportCacheOptionsAsyncTest()
        {
            CacheOptions cacheOptions = default;
            string id = default;
            await _instance.SetLinkedReportCacheOptionsAsync(cacheOptions, id);
        }

        /// <summary>
        /// Test SetLinkedReportHistorySnapshotOptions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetLinkedReportHistorySnapshotOptionsAsyncTest()
        {
            HistorySnapshotOptions historySnapshotOptions = default;
            string id = default;
            await _instance.SetLinkedReportHistorySnapshotOptionsAsync(historySnapshotOptions, id);
        }

        /// <summary>
        /// Test SetLinkedReportPolicies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetLinkedReportPoliciesAsyncTest()
        {
            List<ItemPolicy> itemPolicy = default;
            string id = default;
            await _instance.SetLinkedReportPoliciesAsync(itemPolicy, id);
        }

        /// <summary>
        /// Test UpdateLinkedReport
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateLinkedReportAsyncTest()
        {
            LinkedReport linkedReport = default;
            string id = default;
            await _instance.UpdateLinkedReportAsync(linkedReport, id);
        }

        /// <summary>
        /// Test UpdateLinkedReportComment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateLinkedReportCommentAsyncTest()
        {
            Comment comment = default;
            string id = default;
            string commentId = default;
            await _instance.UpdateLinkedReportCommentAsync(comment, id, commentId);
        }

        /// <summary>
        /// Test UpdateLinkedReportParameterDefinitions
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateLinkedReportParameterDefinitionsAsyncTest()
        {
            List<ReportParameterDefinitionPatch> parameterDefinitions = default;
            string id = default;
            await _instance.UpdateLinkedReportParameterDefinitionsAsync(parameterDefinitions, id);
        }

        /// <summary>
        /// Test UpdateLinkedReportProperties
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateLinkedReportPropertiesAsyncTest()
        {
            List<Property> properties = default;
            string id = default;
            await _instance.UpdateLinkedReportPropertiesAsync(properties, id);
        }
    }
}
