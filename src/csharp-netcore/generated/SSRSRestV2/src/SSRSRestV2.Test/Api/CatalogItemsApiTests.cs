/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using SSRSRestV2.IApi;
using SSRSRestV2.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace SSRSRestV2.Test.Api
{
    /// <summary>
    ///  Class for testing CatalogItemsApi
    /// </summary>
    public sealed class CatalogItemsApiTests : ApiTestsBase
    {
        private readonly IApi.ICatalogItemsApi _instance;

        public CatalogItemsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IApi.ICatalogItemsApi>();
        }


        /// <summary>
        /// Test AddCatalogItem
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddCatalogItemAsyncTest()
        {
            CatalogItem catalogItem = default;
            var response = await _instance.AddCatalogItemAsync(catalogItem);
            Assert.IsType<CatalogItem>(response);
        }

        /// <summary>
        /// Test DeleteCatalogItem
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteCatalogItemAsyncTest()
        {
            string id = default;
            await _instance.DeleteCatalogItemAsync(id);
        }

        /// <summary>
        /// Test DeleteCatalogItems
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeleteCatalogItemsAsyncTest()
        {
            DeleteItemsRequest deleteItemsRequest = default;
            var response = await _instance.DeleteCatalogItemsAsync(deleteItemsRequest);
            Assert.IsType<BulkOperationsResult>(response);
        }

        /// <summary>
        /// Test GetCatalogItem
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCatalogItemAsyncTest()
        {
            string id = default;
            var response = await _instance.GetCatalogItemAsync(id);
            Assert.IsType<CatalogItem>(response);
        }

        /// <summary>
        /// Test GetCatalogItemContent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCatalogItemContentAsyncTest()
        {
            string id = default;
            var response = await _instance.GetCatalogItemContentAsync(id);
            Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test GetCatalogItemPolicies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCatalogItemPoliciesAsyncTest()
        {
            string id = default;
            var response = await _instance.GetCatalogItemPoliciesAsync(id);
            Assert.IsType<List<ItemPolicy>>(response);
        }

        /// <summary>
        /// Test GetCatalogItemProperties
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCatalogItemPropertiesAsyncTest()
        {
            string id = default;
            List<string> properties = default;
            var response = await _instance.GetCatalogItemPropertiesAsync(id, properties);
            Assert.IsType<ODataProperties>(response);
        }

        /// <summary>
        /// Test GetCatalogItemRoles
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCatalogItemRolesAsyncTest()
        {
            string id = default;
            var response = await _instance.GetCatalogItemRolesAsync(id);
            Assert.IsType<ODataProperties1>(response);
        }

        /// <summary>
        /// Test GetCatalogItems
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetCatalogItemsAsyncTest()
        {
            int? top = default;
            int? skip = default;
            string filter = default;
            string count = default;
            string orderBy = default;
            string select = default;
            var response = await _instance.GetCatalogItemsAsync(top, skip, filter, count, orderBy, select);
            Assert.IsType<ODataCatalogItems>(response);
        }

        /// <summary>
        /// Test MoveCatalogItems
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task MoveCatalogItemsAsyncTest()
        {
            MoveItemsRequest moveItemsRequest = default;
            var response = await _instance.MoveCatalogItemsAsync(moveItemsRequest);
            Assert.IsType<BulkOperationsResult>(response);
        }

        /// <summary>
        /// Test SetCatalogItemPolicies
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SetCatalogItemPoliciesAsyncTest()
        {
            List<ItemPolicy> catalogItem = default;
            string id = default;
            await _instance.SetCatalogItemPoliciesAsync(catalogItem, id);
        }

        /// <summary>
        /// Test UpdateCatalogItem
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateCatalogItemAsyncTest()
        {
            CatalogItem catalogItem = default;
            string id = default;
            await _instance.UpdateCatalogItemAsync(catalogItem, id);
        }

        /// <summary>
        /// Test UpdateCatalogItemProperties
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task UpdateCatalogItemPropertiesAsyncTest()
        {
            List<Property> properties = default;
            string id = default;
            await _instance.UpdateCatalogItemPropertiesAsync(properties, id);
        }
    }
}
