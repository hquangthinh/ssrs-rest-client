/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using SSRSRestV2.Client;
using SSRSRestV2.IApi;
using SSRSRestV2.Extensions;
using Xunit;

namespace SSRSRestV2.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient = 
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureSSRSRestV2Client((context, services, options) =>
            {
                
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureSSRSRestV2Client((context, services, options) =>
            {
                
                options.AddSSRSRestV2ClientHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddSSRSRestV2Client(options =>
                {
                    
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder(Array.Empty<string>()).ConfigureServices((host, services) =>
            {
                services.AddSSRSRestV2Client(options =>
                {
                    
                    options.AddSSRSRestV2ClientHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var cacheRefreshPlansApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.ICacheRefreshPlansApi>();
            Assert.True(cacheRefreshPlansApi.HttpClient.BaseAddress != null);
            
            var catalogItemsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.ICatalogItemsApi>();
            Assert.True(catalogItemsApi.HttpClient.BaseAddress != null);
            
            var dataSetsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IDataSetsApi>();
            Assert.True(dataSetsApi.HttpClient.BaseAddress != null);
            
            var dataSourcesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IDataSourcesApi>();
            Assert.True(dataSourcesApi.HttpClient.BaseAddress != null);
            
            var extensionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IExtensionsApi>();
            Assert.True(extensionsApi.HttpClient.BaseAddress != null);
            
            var favoriteItemsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IFavoriteItemsApi>();
            Assert.True(favoriteItemsApi.HttpClient.BaseAddress != null);
            
            var foldersApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);
            
            var kpisApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IKpisApi>();
            Assert.True(kpisApi.HttpClient.BaseAddress != null);
            
            var linkedReportsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.ILinkedReportsApi>();
            Assert.True(linkedReportsApi.HttpClient.BaseAddress != null);
            
            var meApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IMeApi>();
            Assert.True(meApi.HttpClient.BaseAddress != null);
            
            var mobileReportsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IMobileReportsApi>();
            Assert.True(mobileReportsApi.HttpClient.BaseAddress != null);
            
            var reportsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IReportsApi>();
            Assert.True(reportsApi.HttpClient.BaseAddress != null);
            
            var resourcesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.IResourcesApi>();
            Assert.True(resourcesApi.HttpClient.BaseAddress != null);
            
            var sessionApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.ISessionApi>();
            Assert.True(sessionApi.HttpClient.BaseAddress != null);
            
            var subscriptionsApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.ISubscriptionsApi>();
            Assert.True(subscriptionsApi.HttpClient.BaseAddress != null);
            
            var systemApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IApi.ISystemApi>();
            Assert.True(systemApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var cacheRefreshPlansApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.ICacheRefreshPlansApi>();
            Assert.True(cacheRefreshPlansApi.HttpClient.BaseAddress != null);
            
            var catalogItemsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.ICatalogItemsApi>();
            Assert.True(catalogItemsApi.HttpClient.BaseAddress != null);
            
            var dataSetsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IDataSetsApi>();
            Assert.True(dataSetsApi.HttpClient.BaseAddress != null);
            
            var dataSourcesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IDataSourcesApi>();
            Assert.True(dataSourcesApi.HttpClient.BaseAddress != null);
            
            var extensionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IExtensionsApi>();
            Assert.True(extensionsApi.HttpClient.BaseAddress != null);
            
            var favoriteItemsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IFavoriteItemsApi>();
            Assert.True(favoriteItemsApi.HttpClient.BaseAddress != null);
            
            var foldersApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);
            
            var kpisApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IKpisApi>();
            Assert.True(kpisApi.HttpClient.BaseAddress != null);
            
            var linkedReportsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.ILinkedReportsApi>();
            Assert.True(linkedReportsApi.HttpClient.BaseAddress != null);
            
            var meApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IMeApi>();
            Assert.True(meApi.HttpClient.BaseAddress != null);
            
            var mobileReportsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IMobileReportsApi>();
            Assert.True(mobileReportsApi.HttpClient.BaseAddress != null);
            
            var reportsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IReportsApi>();
            Assert.True(reportsApi.HttpClient.BaseAddress != null);
            
            var resourcesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.IResourcesApi>();
            Assert.True(resourcesApi.HttpClient.BaseAddress != null);
            
            var sessionApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.ISessionApi>();
            Assert.True(sessionApi.HttpClient.BaseAddress != null);
            
            var subscriptionsApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.ISubscriptionsApi>();
            Assert.True(subscriptionsApi.HttpClient.BaseAddress != null);
            
            var systemApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IApi.ISystemApi>();
            Assert.True(systemApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var cacheRefreshPlansApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.ICacheRefreshPlansApi>();
            Assert.True(cacheRefreshPlansApi.HttpClient.BaseAddress != null);
            
            var catalogItemsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.ICatalogItemsApi>();
            Assert.True(catalogItemsApi.HttpClient.BaseAddress != null);
            
            var dataSetsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IDataSetsApi>();
            Assert.True(dataSetsApi.HttpClient.BaseAddress != null);
            
            var dataSourcesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IDataSourcesApi>();
            Assert.True(dataSourcesApi.HttpClient.BaseAddress != null);
            
            var extensionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IExtensionsApi>();
            Assert.True(extensionsApi.HttpClient.BaseAddress != null);
            
            var favoriteItemsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IFavoriteItemsApi>();
            Assert.True(favoriteItemsApi.HttpClient.BaseAddress != null);
            
            var foldersApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);
            
            var kpisApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IKpisApi>();
            Assert.True(kpisApi.HttpClient.BaseAddress != null);
            
            var linkedReportsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.ILinkedReportsApi>();
            Assert.True(linkedReportsApi.HttpClient.BaseAddress != null);
            
            var meApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IMeApi>();
            Assert.True(meApi.HttpClient.BaseAddress != null);
            
            var mobileReportsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IMobileReportsApi>();
            Assert.True(mobileReportsApi.HttpClient.BaseAddress != null);
            
            var reportsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IReportsApi>();
            Assert.True(reportsApi.HttpClient.BaseAddress != null);
            
            var resourcesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.IResourcesApi>();
            Assert.True(resourcesApi.HttpClient.BaseAddress != null);
            
            var sessionApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.ISessionApi>();
            Assert.True(sessionApi.HttpClient.BaseAddress != null);
            
            var subscriptionsApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.ISubscriptionsApi>();
            Assert.True(subscriptionsApi.HttpClient.BaseAddress != null);
            
            var systemApi = _hostUsingAddWithAClient.Services.GetRequiredService<IApi.ISystemApi>();
            Assert.True(systemApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var cacheRefreshPlansApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.ICacheRefreshPlansApi>();
            Assert.True(cacheRefreshPlansApi.HttpClient.BaseAddress != null);
            
            var catalogItemsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.ICatalogItemsApi>();
            Assert.True(catalogItemsApi.HttpClient.BaseAddress != null);
            
            var dataSetsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IDataSetsApi>();
            Assert.True(dataSetsApi.HttpClient.BaseAddress != null);
            
            var dataSourcesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IDataSourcesApi>();
            Assert.True(dataSourcesApi.HttpClient.BaseAddress != null);
            
            var extensionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IExtensionsApi>();
            Assert.True(extensionsApi.HttpClient.BaseAddress != null);
            
            var favoriteItemsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IFavoriteItemsApi>();
            Assert.True(favoriteItemsApi.HttpClient.BaseAddress != null);
            
            var foldersApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IFoldersApi>();
            Assert.True(foldersApi.HttpClient.BaseAddress != null);
            
            var kpisApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IKpisApi>();
            Assert.True(kpisApi.HttpClient.BaseAddress != null);
            
            var linkedReportsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.ILinkedReportsApi>();
            Assert.True(linkedReportsApi.HttpClient.BaseAddress != null);
            
            var meApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IMeApi>();
            Assert.True(meApi.HttpClient.BaseAddress != null);
            
            var mobileReportsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IMobileReportsApi>();
            Assert.True(mobileReportsApi.HttpClient.BaseAddress != null);
            
            var reportsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IReportsApi>();
            Assert.True(reportsApi.HttpClient.BaseAddress != null);
            
            var resourcesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.IResourcesApi>();
            Assert.True(resourcesApi.HttpClient.BaseAddress != null);
            
            var sessionApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.ISessionApi>();
            Assert.True(sessionApi.HttpClient.BaseAddress != null);
            
            var subscriptionsApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.ISubscriptionsApi>();
            Assert.True(subscriptionsApi.HttpClient.BaseAddress != null);
            
            var systemApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IApi.ISystemApi>();
            Assert.True(systemApi.HttpClient.BaseAddress != null);
        }
    }
}
