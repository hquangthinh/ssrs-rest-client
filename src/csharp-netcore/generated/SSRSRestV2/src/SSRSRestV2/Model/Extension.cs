// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that holds the definition of a Reporting Services extension.
    /// </summary>
    public partial class Extension : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Extension" /> class.
        /// </summary>
        /// <param name="extensionType">extensionType</param>
        /// <param name="localizedName">A string value that specifies a localized name for the Extension.</param>
        /// <param name="name">A string value that specifies the name for the Extension. This name will typically be displayed in the user interface.</param>
        /// <param name="visible">A Boolean value that indicates if the Extension is visible. If false, the item will generally not appear in listings of available extensions.</param>
        [JsonConstructor]
        public Extension(ExtensionType extensionType, string localizedName, string name, bool visible)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (extensionType == null)
                throw new ArgumentNullException("extensionType is a required property for Extension and cannot be null.");

            if (name == null)
                throw new ArgumentNullException("name is a required property for Extension and cannot be null.");

            if (localizedName == null)
                throw new ArgumentNullException("localizedName is a required property for Extension and cannot be null.");

            if (visible == null)
                throw new ArgumentNullException("visible is a required property for Extension and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            ExtensionType = extensionType;
            LocalizedName = localizedName;
            Name = name;
            Visible = visible;
        }

        /// <summary>
        /// Gets or Sets ExtensionType
        /// </summary>
        [JsonPropertyName("ExtensionType")]
        public ExtensionType ExtensionType { get; set; }

        /// <summary>
        /// A string value that specifies a localized name for the Extension.
        /// </summary>
        /// <value>A string value that specifies a localized name for the Extension.</value>
        [JsonPropertyName("LocalizedName")]
        public string LocalizedName { get; set; }

        /// <summary>
        /// A string value that specifies the name for the Extension. This name will typically be displayed in the user interface.
        /// </summary>
        /// <value>A string value that specifies the name for the Extension. This name will typically be displayed in the user interface.</value>
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        /// <summary>
        /// A Boolean value that indicates if the Extension is visible. If false, the item will generally not appear in listings of available extensions.
        /// </summary>
        /// <value>A Boolean value that indicates if the Extension is visible. If false, the item will generally not appear in listings of available extensions.</value>
        [JsonPropertyName("Visible")]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Extension {\n");
            sb.Append("  ExtensionType: ").Append(ExtensionType).Append("\n");
            sb.Append("  LocalizedName: ").Append(LocalizedName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type Extension
    /// </summary>
    public class ExtensionJsonConverter : JsonConverter<Extension>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Extension Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            ExtensionType extensionType = default;
            string localizedName = default;
            string name = default;
            bool visible = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "ExtensionType":
                            string extensionTypeRawValue = utf8JsonReader.GetString();
                            extensionType = ExtensionTypeConverter.FromString(extensionTypeRawValue);
                            break;
                        case "LocalizedName":
                            localizedName = utf8JsonReader.GetString();
                            break;
                        case "Name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "Visible":
                            visible = utf8JsonReader.GetBoolean();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new Extension(extensionType, localizedName, name, visible);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="extension"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Extension extension, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            var extensionTypeRawValue = ExtensionTypeConverter.ToJsonValue(extension.ExtensionType);
            if (extensionTypeRawValue != null)
                writer.WriteString("ExtensionType", extensionTypeRawValue);
            else
                writer.WriteNull("ExtensionType");
            writer.WriteString("LocalizedName", extension.LocalizedName);
            writer.WriteString("Name", extension.Name);
            writer.WriteBoolean("Visible", extension.Visible);

            writer.WriteEndObject();
        }
    }
}
