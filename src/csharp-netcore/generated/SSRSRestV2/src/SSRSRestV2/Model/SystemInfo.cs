// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that specifies information about the Report Server.
    /// </summary>
    public partial class SystemInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemInfo" /> class.
        /// </summary>
        /// <param name="productName">A string value that specifies the name of the product being used.</param>
        /// <param name="productType">A string value that specifies the type of the product being used.</param>
        /// <param name="productVersion">A string value that specifies the version of the product being used.</param>
        /// <param name="reportServerAbsoluteUrl">A string value that specifies the URL for the Report Server.</param>
        /// <param name="reportServerRelativeUrl">A string value that specifies the Report Server Virtual Directory.</param>
        /// <param name="timeZone">A string value that specifies the timezone being used by the server.</param>
        /// <param name="webPortalRelativeUrl">A string value that specifies the URL for the Report Server web portal.</param>
        [JsonConstructor]
        public SystemInfo(string productName, ProductTypeEnum productType, string productVersion, string reportServerAbsoluteUrl, string reportServerRelativeUrl, string timeZone, string webPortalRelativeUrl)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (reportServerAbsoluteUrl == null)
                throw new ArgumentNullException("reportServerAbsoluteUrl is a required property for SystemInfo and cannot be null.");

            if (reportServerRelativeUrl == null)
                throw new ArgumentNullException("reportServerRelativeUrl is a required property for SystemInfo and cannot be null.");

            if (webPortalRelativeUrl == null)
                throw new ArgumentNullException("webPortalRelativeUrl is a required property for SystemInfo and cannot be null.");

            if (productName == null)
                throw new ArgumentNullException("productName is a required property for SystemInfo and cannot be null.");

            if (productVersion == null)
                throw new ArgumentNullException("productVersion is a required property for SystemInfo and cannot be null.");

            if (productType == null)
                throw new ArgumentNullException("productType is a required property for SystemInfo and cannot be null.");

            if (timeZone == null)
                throw new ArgumentNullException("timeZone is a required property for SystemInfo and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            ProductName = productName;
            ProductType = productType;
            ProductVersion = productVersion;
            ReportServerAbsoluteUrl = reportServerAbsoluteUrl;
            ReportServerRelativeUrl = reportServerRelativeUrl;
            TimeZone = timeZone;
            WebPortalRelativeUrl = webPortalRelativeUrl;
        }

        /// <summary>
        /// A string value that specifies the type of the product being used.
        /// </summary>
        /// <value>A string value that specifies the type of the product being used.</value>
        public enum ProductTypeEnum
        {
            /// <summary>
            /// Enum PowerBiReportServer for value: PowerBiReportServer
            /// </summary>
            PowerBiReportServer = 1,

            /// <summary>
            /// Enum SqlServerReportingServices for value: SqlServerReportingServices
            /// </summary>
            SqlServerReportingServices = 2

        }

        /// <summary>
        /// Returns a ProductTypeEnum
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProductTypeEnum ProductTypeEnumFromString(string value)
        {
            if (value == "PowerBiReportServer")
                return ProductTypeEnum.PowerBiReportServer;

            if (value == "SqlServerReportingServices")
                return ProductTypeEnum.SqlServerReportingServices;

            throw new NotImplementedException($"Could not convert value to type ProductTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns equivalent json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ProductTypeEnumToJsonValue(ProductTypeEnum value)
        {
            if (value == ProductTypeEnum.PowerBiReportServer)
                return "PowerBiReportServer";

            if (value == ProductTypeEnum.SqlServerReportingServices)
                return "SqlServerReportingServices";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// A string value that specifies the type of the product being used.
        /// </summary>
        /// <value>A string value that specifies the type of the product being used.</value>
        [JsonPropertyName("ProductType")]
        public ProductTypeEnum ProductType { get; set; }

        /// <summary>
        /// A string value that specifies the name of the product being used.
        /// </summary>
        /// <value>A string value that specifies the name of the product being used.</value>
        [JsonPropertyName("ProductName")]
        public string ProductName { get; set; }

        /// <summary>
        /// A string value that specifies the version of the product being used.
        /// </summary>
        /// <value>A string value that specifies the version of the product being used.</value>
        [JsonPropertyName("ProductVersion")]
        public string ProductVersion { get; set; }

        /// <summary>
        /// A string value that specifies the URL for the Report Server.
        /// </summary>
        /// <value>A string value that specifies the URL for the Report Server.</value>
        [JsonPropertyName("ReportServerAbsoluteUrl")]
        public string ReportServerAbsoluteUrl { get; set; }

        /// <summary>
        /// A string value that specifies the Report Server Virtual Directory.
        /// </summary>
        /// <value>A string value that specifies the Report Server Virtual Directory.</value>
        [JsonPropertyName("ReportServerRelativeUrl")]
        public string ReportServerRelativeUrl { get; set; }

        /// <summary>
        /// A string value that specifies the timezone being used by the server.
        /// </summary>
        /// <value>A string value that specifies the timezone being used by the server.</value>
        [JsonPropertyName("TimeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// A string value that specifies the URL for the Report Server web portal.
        /// </summary>
        /// <value>A string value that specifies the URL for the Report Server web portal.</value>
        [JsonPropertyName("WebPortalRelativeUrl")]
        public string WebPortalRelativeUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SystemInfo {\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  ProductVersion: ").Append(ProductVersion).Append("\n");
            sb.Append("  ReportServerAbsoluteUrl: ").Append(ReportServerAbsoluteUrl).Append("\n");
            sb.Append("  ReportServerRelativeUrl: ").Append(ReportServerRelativeUrl).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  WebPortalRelativeUrl: ").Append(WebPortalRelativeUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type SystemInfo
    /// </summary>
    public class SystemInfoJsonConverter : JsonConverter<SystemInfo>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SystemInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string productName = default;
            SystemInfo.ProductTypeEnum productType = default;
            string productVersion = default;
            string reportServerAbsoluteUrl = default;
            string reportServerRelativeUrl = default;
            string timeZone = default;
            string webPortalRelativeUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "ProductName":
                            productName = utf8JsonReader.GetString();
                            break;
                        case "ProductType":
                            string productTypeRawValue = utf8JsonReader.GetString();
                            productType = SystemInfo.ProductTypeEnumFromString(productTypeRawValue);
                            break;
                        case "ProductVersion":
                            productVersion = utf8JsonReader.GetString();
                            break;
                        case "ReportServerAbsoluteUrl":
                            reportServerAbsoluteUrl = utf8JsonReader.GetString();
                            break;
                        case "ReportServerRelativeUrl":
                            reportServerRelativeUrl = utf8JsonReader.GetString();
                            break;
                        case "TimeZone":
                            timeZone = utf8JsonReader.GetString();
                            break;
                        case "WebPortalRelativeUrl":
                            webPortalRelativeUrl = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new SystemInfo(productName, productType, productVersion, reportServerAbsoluteUrl, reportServerRelativeUrl, timeZone, webPortalRelativeUrl);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="systemInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SystemInfo systemInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("ProductName", systemInfo.ProductName);
            var productTypeRawValue = SystemInfo.ProductTypeEnumToJsonValue(systemInfo.ProductType);
            if (productTypeRawValue != null)
                writer.WriteString("ProductType", productTypeRawValue);
            else
                writer.WriteNull("ProductType");
            writer.WriteString("ProductVersion", systemInfo.ProductVersion);
            writer.WriteString("ReportServerAbsoluteUrl", systemInfo.ReportServerAbsoluteUrl);
            writer.WriteString("ReportServerRelativeUrl", systemInfo.ReportServerRelativeUrl);
            writer.WriteString("TimeZone", systemInfo.TimeZone);
            writer.WriteString("WebPortalRelativeUrl", systemInfo.WebPortalRelativeUrl);

            writer.WriteEndObject();
        }
    }
}
