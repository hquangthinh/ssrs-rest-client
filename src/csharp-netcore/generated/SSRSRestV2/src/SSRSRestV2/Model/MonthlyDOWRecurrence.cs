// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// Represents the dates on which a scheduled report runs, typically by month, week, and day of the week.
    /// </summary>
    public partial class MonthlyDOWRecurrence : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonthlyDOWRecurrence" /> class.
        /// </summary>
        /// <param name="daysOfWeek">daysOfWeek</param>
        /// <param name="monthsOfYear">monthsOfYear</param>
        /// <param name="whichWeek">whichWeek</param>
        /// <param name="whichWeekSpecified">Specifies whether week is specified</param>
        [JsonConstructor]
        public MonthlyDOWRecurrence(DaysOfWeekSelector daysOfWeek, MonthsOfYearSelector monthsOfYear, WeekNumberEnum whichWeek, bool whichWeekSpecified)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (whichWeek == null)
                throw new ArgumentNullException("whichWeek is a required property for MonthlyDOWRecurrence and cannot be null.");

            if (whichWeekSpecified == null)
                throw new ArgumentNullException("whichWeekSpecified is a required property for MonthlyDOWRecurrence and cannot be null.");

            if (daysOfWeek == null)
                throw new ArgumentNullException("daysOfWeek is a required property for MonthlyDOWRecurrence and cannot be null.");

            if (monthsOfYear == null)
                throw new ArgumentNullException("monthsOfYear is a required property for MonthlyDOWRecurrence and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            DaysOfWeek = daysOfWeek;
            MonthsOfYear = monthsOfYear;
            WhichWeek = whichWeek;
            WhichWeekSpecified = whichWeekSpecified;
        }

        /// <summary>
        /// Gets or Sets WhichWeek
        /// </summary>
        [JsonPropertyName("WhichWeek")]
        public WeekNumberEnum WhichWeek { get; set; }

        /// <summary>
        /// Gets or Sets DaysOfWeek
        /// </summary>
        [JsonPropertyName("DaysOfWeek")]
        public DaysOfWeekSelector DaysOfWeek { get; set; }

        /// <summary>
        /// Gets or Sets MonthsOfYear
        /// </summary>
        [JsonPropertyName("MonthsOfYear")]
        public MonthsOfYearSelector MonthsOfYear { get; set; }

        /// <summary>
        /// Specifies whether week is specified
        /// </summary>
        /// <value>Specifies whether week is specified</value>
        [JsonPropertyName("WhichWeekSpecified")]
        public bool WhichWeekSpecified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonthlyDOWRecurrence {\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  MonthsOfYear: ").Append(MonthsOfYear).Append("\n");
            sb.Append("  WhichWeek: ").Append(WhichWeek).Append("\n");
            sb.Append("  WhichWeekSpecified: ").Append(WhichWeekSpecified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type MonthlyDOWRecurrence
    /// </summary>
    public class MonthlyDOWRecurrenceJsonConverter : JsonConverter<MonthlyDOWRecurrence>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MonthlyDOWRecurrence Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            DaysOfWeekSelector daysOfWeek = default;
            MonthsOfYearSelector monthsOfYear = default;
            WeekNumberEnum whichWeek = default;
            bool whichWeekSpecified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "DaysOfWeek":
                            daysOfWeek = JsonSerializer.Deserialize<DaysOfWeekSelector>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "MonthsOfYear":
                            monthsOfYear = JsonSerializer.Deserialize<MonthsOfYearSelector>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "WhichWeek":
                            string whichWeekRawValue = utf8JsonReader.GetString();
                            whichWeek = WeekNumberEnumConverter.FromString(whichWeekRawValue);
                            break;
                        case "WhichWeekSpecified":
                            whichWeekSpecified = utf8JsonReader.GetBoolean();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MonthlyDOWRecurrence(daysOfWeek, monthsOfYear, whichWeek, whichWeekSpecified);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="monthlyDOWRecurrence"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MonthlyDOWRecurrence monthlyDOWRecurrence, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WritePropertyName("DaysOfWeek");
            JsonSerializer.Serialize(writer, monthlyDOWRecurrence.DaysOfWeek, jsonSerializerOptions);
            writer.WritePropertyName("MonthsOfYear");
            JsonSerializer.Serialize(writer, monthlyDOWRecurrence.MonthsOfYear, jsonSerializerOptions);
            var whichWeekRawValue = WeekNumberEnumConverter.ToJsonValue(monthlyDOWRecurrence.WhichWeek);
            if (whichWeekRawValue != null)
                writer.WriteString("WhichWeek", whichWeekRawValue);
            else
                writer.WriteNull("WhichWeek");
            writer.WriteBoolean("WhichWeekSpecified", monthlyDOWRecurrence.WhichWeekSpecified);

            writer.WriteEndObject();
        }
    }
}
