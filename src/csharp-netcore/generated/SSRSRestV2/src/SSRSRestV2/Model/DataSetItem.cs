// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that contains additional dataset properties for the MobileReportManifest
    /// </summary>
    public partial class DataSetItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSetItem" /> class.
        /// </summary>
        /// <param name="dateTimeColumn">A string value that specifies the name of the column in the DataSetItem that represents date and time.</param>
        /// <param name="timeUnit">The time unit for the DataSetItem. The possible values for this string are the following: &#39;Year&#39;, &#39;Quarter&#39;, &#39;Month&#39;, &#39;Weekday&#39;, &#39;Hour&#39;.</param>
        [JsonConstructor]
        public DataSetItem(string dateTimeColumn, string timeUnit)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (timeUnit == null)
                throw new ArgumentNullException("timeUnit is a required property for DataSetItem and cannot be null.");

            if (dateTimeColumn == null)
                throw new ArgumentNullException("dateTimeColumn is a required property for DataSetItem and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            DateTimeColumn = dateTimeColumn;
            TimeUnit = timeUnit;
        }

        /// <summary>
        /// A string value that specifies the name of the column in the DataSetItem that represents date and time.
        /// </summary>
        /// <value>A string value that specifies the name of the column in the DataSetItem that represents date and time.</value>
        [JsonPropertyName("DateTimeColumn")]
        public string DateTimeColumn { get; set; }

        /// <summary>
        /// The time unit for the DataSetItem. The possible values for this string are the following: &#39;Year&#39;, &#39;Quarter&#39;, &#39;Month&#39;, &#39;Weekday&#39;, &#39;Hour&#39;.
        /// </summary>
        /// <value>The time unit for the DataSetItem. The possible values for this string are the following: &#39;Year&#39;, &#39;Quarter&#39;, &#39;Month&#39;, &#39;Weekday&#39;, &#39;Hour&#39;.</value>
        [JsonPropertyName("TimeUnit")]
        public string TimeUnit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataSetItem {\n");
            sb.Append("  DateTimeColumn: ").Append(DateTimeColumn).Append("\n");
            sb.Append("  TimeUnit: ").Append(TimeUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type DataSetItem
    /// </summary>
    public class DataSetItemJsonConverter : JsonConverter<DataSetItem>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DataSetItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string dateTimeColumn = default;
            string timeUnit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "DateTimeColumn":
                            dateTimeColumn = utf8JsonReader.GetString();
                            break;
                        case "TimeUnit":
                            timeUnit = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DataSetItem(dateTimeColumn, timeUnit);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dataSetItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DataSetItem dataSetItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("DateTimeColumn", dataSetItem.DateTimeColumn);
            writer.WriteString("TimeUnit", dataSetItem.TimeUnit);

            writer.WriteEndObject();
        }
    }
}
