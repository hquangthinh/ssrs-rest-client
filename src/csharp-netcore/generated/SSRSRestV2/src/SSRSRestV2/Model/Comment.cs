// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that specifies a comment that is attached to a CatalogItem.
    /// </summary>
    public partial class Comment : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Comment" /> class.
        /// </summary>
        /// <param name="attachmentPath">A string value that specifies the server path to an attachment that is part of the comment.</param>
        /// <param name="createdDate">A string that contains the date-time of the creation of the comment.</param>
        /// <param name="id">A unique UUID value that specifies the identifier of the comment.</param>
        /// <param name="itemId">A unique UUID value that specifies the identifier of the CatalogItem item to which the comment is attached.</param>
        /// <param name="modifiedDate">A string value that contains the date-time of the last modification to the comment.</param>
        /// <param name="text">A string value that contains the text of the comment.</param>
        /// <param name="threadId">A unique UUID value that specifies the identifier of the thread of the comment. A comment thread can be used to group comments that are a response to one another in one grouping.</param>
        /// <param name="userName"> A string value that represents the user who created the comment item.</param>
        [JsonConstructor]
        public Comment(string attachmentPath, DateTime createdDate, Guid id, Guid itemId, DateTime modifiedDate, string text, Guid threadId, string userName)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException("id is a required property for Comment and cannot be null.");

            if (itemId == null)
                throw new ArgumentNullException("itemId is a required property for Comment and cannot be null.");

            if (userName == null)
                throw new ArgumentNullException("userName is a required property for Comment and cannot be null.");

            if (threadId == null)
                throw new ArgumentNullException("threadId is a required property for Comment and cannot be null.");

            if (attachmentPath == null)
                throw new ArgumentNullException("attachmentPath is a required property for Comment and cannot be null.");

            if (text == null)
                throw new ArgumentNullException("text is a required property for Comment and cannot be null.");

            if (createdDate == null)
                throw new ArgumentNullException("createdDate is a required property for Comment and cannot be null.");

            if (modifiedDate == null)
                throw new ArgumentNullException("modifiedDate is a required property for Comment and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            AttachmentPath = attachmentPath;
            CreatedDate = createdDate;
            Id = id;
            ItemId = itemId;
            ModifiedDate = modifiedDate;
            Text = text;
            ThreadId = threadId;
            UserName = userName;
        }

        /// <summary>
        /// A string value that specifies the server path to an attachment that is part of the comment.
        /// </summary>
        /// <value>A string value that specifies the server path to an attachment that is part of the comment.</value>
        [JsonPropertyName("AttachmentPath")]
        public string AttachmentPath { get; set; }

        /// <summary>
        /// A string that contains the date-time of the creation of the comment.
        /// </summary>
        /// <value>A string that contains the date-time of the creation of the comment.</value>
        [JsonPropertyName("CreatedDate")]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier of the comment.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier of the comment.</value>
        [JsonPropertyName("Id")]
        public Guid Id { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier of the CatalogItem item to which the comment is attached.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier of the CatalogItem item to which the comment is attached.</value>
        [JsonPropertyName("ItemId")]
        public Guid ItemId { get; set; }

        /// <summary>
        /// A string value that contains the date-time of the last modification to the comment.
        /// </summary>
        /// <value>A string value that contains the date-time of the last modification to the comment.</value>
        [JsonPropertyName("ModifiedDate")]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// A string value that contains the text of the comment.
        /// </summary>
        /// <value>A string value that contains the text of the comment.</value>
        [JsonPropertyName("Text")]
        public string Text { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier of the thread of the comment. A comment thread can be used to group comments that are a response to one another in one grouping.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier of the thread of the comment. A comment thread can be used to group comments that are a response to one another in one grouping.</value>
        [JsonPropertyName("ThreadId")]
        public Guid ThreadId { get; set; }

        /// <summary>
        ///  A string value that represents the user who created the comment item.
        /// </summary>
        /// <value> A string value that represents the user who created the comment item.</value>
        [JsonPropertyName("UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Comment {\n");
            sb.Append("  AttachmentPath: ").Append(AttachmentPath).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type Comment
    /// </summary>
    public class CommentJsonConverter : JsonConverter<Comment>
    {
        /// <summary>
        /// The format to use to serialize CreatedDate
        /// </summary>
        public static string CreatedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedDate
        /// </summary>
        public static string ModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Comment Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string attachmentPath = default;
            DateTime createdDate = default;
            Guid id = default;
            Guid itemId = default;
            DateTime modifiedDate = default;
            string text = default;
            Guid threadId = default;
            string userName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "AttachmentPath":
                            attachmentPath = utf8JsonReader.GetString();
                            break;
                        case "CreatedDate":
                            createdDate = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Id":
                            id = utf8JsonReader.GetGuid();
                            break;
                        case "ItemId":
                            itemId = utf8JsonReader.GetGuid();
                            break;
                        case "ModifiedDate":
                            modifiedDate = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Text":
                            text = utf8JsonReader.GetString();
                            break;
                        case "ThreadId":
                            threadId = utf8JsonReader.GetGuid();
                            break;
                        case "UserName":
                            userName = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new Comment(attachmentPath, createdDate, id, itemId, modifiedDate, text, threadId, userName);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="comment"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Comment comment, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("AttachmentPath", comment.AttachmentPath);
            writer.WriteString("CreatedDate", comment.CreatedDate.ToString(CreatedDateFormat));
            writer.WriteString("Id", comment.Id);
            writer.WriteString("ItemId", comment.ItemId);
            writer.WriteString("ModifiedDate", comment.ModifiedDate.ToString(ModifiedDateFormat));
            writer.WriteString("Text", comment.Text);
            writer.WriteString("ThreadId", comment.ThreadId);
            writer.WriteString("UserName", comment.UserName);

            writer.WriteEndObject();
        }
    }
}
