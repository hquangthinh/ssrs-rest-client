// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// This object holds credentials for connections to an external data source. The object is stored on the Report Server for later retrieval and use. NOTE: This object represents a security risk as its properties can be seen in plain text over the HTTP protocol; HTTPS is recommended.
    /// </summary>
    public partial class CredentialsStoredInServer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CredentialsStoredInServer" /> class.
        /// </summary>
        /// <param name="impersonateAuthenticatedUser">A boolean value that indicates whether the session should impersonate the user for the supplied credentials.</param>
        /// <param name="password">A string value that contains the password to be used to connect to an external data source.</param>
        /// <param name="useAsWindowsCredentials">A boolean value that indicates whether the supplied credentials should be used as Windows credentials.</param>
        /// <param name="userName">A string value that contains the user name to be used to connect to an external data source.</param>
        [JsonConstructor]
        public CredentialsStoredInServer(bool impersonateAuthenticatedUser, string password, bool useAsWindowsCredentials, string userName)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (userName == null)
                throw new ArgumentNullException("userName is a required property for CredentialsStoredInServer and cannot be null.");

            if (password == null)
                throw new ArgumentNullException("password is a required property for CredentialsStoredInServer and cannot be null.");

            if (useAsWindowsCredentials == null)
                throw new ArgumentNullException("useAsWindowsCredentials is a required property for CredentialsStoredInServer and cannot be null.");

            if (impersonateAuthenticatedUser == null)
                throw new ArgumentNullException("impersonateAuthenticatedUser is a required property for CredentialsStoredInServer and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            ImpersonateAuthenticatedUser = impersonateAuthenticatedUser;
            Password = password;
            UseAsWindowsCredentials = useAsWindowsCredentials;
            UserName = userName;
        }

        /// <summary>
        /// A boolean value that indicates whether the session should impersonate the user for the supplied credentials.
        /// </summary>
        /// <value>A boolean value that indicates whether the session should impersonate the user for the supplied credentials.</value>
        [JsonPropertyName("ImpersonateAuthenticatedUser")]
        public bool ImpersonateAuthenticatedUser { get; set; }

        /// <summary>
        /// A string value that contains the password to be used to connect to an external data source.
        /// </summary>
        /// <value>A string value that contains the password to be used to connect to an external data source.</value>
        [JsonPropertyName("Password")]
        public string Password { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the supplied credentials should be used as Windows credentials.
        /// </summary>
        /// <value>A boolean value that indicates whether the supplied credentials should be used as Windows credentials.</value>
        [JsonPropertyName("UseAsWindowsCredentials")]
        public bool UseAsWindowsCredentials { get; set; }

        /// <summary>
        /// A string value that contains the user name to be used to connect to an external data source.
        /// </summary>
        /// <value>A string value that contains the user name to be used to connect to an external data source.</value>
        [JsonPropertyName("UserName")]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CredentialsStoredInServer {\n");
            sb.Append("  ImpersonateAuthenticatedUser: ").Append(ImpersonateAuthenticatedUser).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  UseAsWindowsCredentials: ").Append(UseAsWindowsCredentials).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type CredentialsStoredInServer
    /// </summary>
    public class CredentialsStoredInServerJsonConverter : JsonConverter<CredentialsStoredInServer>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CredentialsStoredInServer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            bool impersonateAuthenticatedUser = default;
            string password = default;
            bool useAsWindowsCredentials = default;
            string userName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "ImpersonateAuthenticatedUser":
                            impersonateAuthenticatedUser = utf8JsonReader.GetBoolean();
                            break;
                        case "Password":
                            password = utf8JsonReader.GetString();
                            break;
                        case "UseAsWindowsCredentials":
                            useAsWindowsCredentials = utf8JsonReader.GetBoolean();
                            break;
                        case "UserName":
                            userName = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CredentialsStoredInServer(impersonateAuthenticatedUser, password, useAsWindowsCredentials, userName);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="credentialsStoredInServer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CredentialsStoredInServer credentialsStoredInServer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteBoolean("ImpersonateAuthenticatedUser", credentialsStoredInServer.ImpersonateAuthenticatedUser);
            writer.WriteString("Password", credentialsStoredInServer.Password);
            writer.WriteBoolean("UseAsWindowsCredentials", credentialsStoredInServer.UseAsWindowsCredentials);
            writer.WriteString("UserName", credentialsStoredInServer.UserName);

            writer.WriteEndObject();
        }
    }
}
