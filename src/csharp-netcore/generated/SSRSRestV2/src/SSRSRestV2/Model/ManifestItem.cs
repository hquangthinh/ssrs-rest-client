// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// ManifestItem
    /// </summary>
    public partial class ManifestItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManifestItem" /> class.
        /// </summary>
        /// <param name="hash">A string value that contains an SHA256 hash of the contents of the item.</param>
        /// <param name="id">A unique UUID value that specifies the identifier by which this defined item can be referenced in requests or in other defined objects.</param>
        /// <param name="name">A string value that specifies the name for the item. This name will typically be displayed in the user interface.</param>
        /// <param name="path">A string value that contains the complete URL for the defined item.</param>
        [JsonConstructor]
        public ManifestItem(string hash, Guid id, string name, string path)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException("id is a required property for ManifestItem and cannot be null.");

            if (path == null)
                throw new ArgumentNullException("path is a required property for ManifestItem and cannot be null.");

            if (name == null)
                throw new ArgumentNullException("name is a required property for ManifestItem and cannot be null.");

            if (hash == null)
                throw new ArgumentNullException("hash is a required property for ManifestItem and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            Hash = hash;
            Id = id;
            Name = name;
            Path = path;
        }

        /// <summary>
        /// A string value that contains an SHA256 hash of the contents of the item.
        /// </summary>
        /// <value>A string value that contains an SHA256 hash of the contents of the item.</value>
        [JsonPropertyName("Hash")]
        public string Hash { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier by which this defined item can be referenced in requests or in other defined objects.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier by which this defined item can be referenced in requests or in other defined objects.</value>
        [JsonPropertyName("Id")]
        public Guid Id { get; set; }

        /// <summary>
        /// A string value that specifies the name for the item. This name will typically be displayed in the user interface.
        /// </summary>
        /// <value>A string value that specifies the name for the item. This name will typically be displayed in the user interface.</value>
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        /// <summary>
        /// A string value that contains the complete URL for the defined item.
        /// </summary>
        /// <value>A string value that contains the complete URL for the defined item.</value>
        [JsonPropertyName("Path")]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManifestItem {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type ManifestItem
    /// </summary>
    public class ManifestItemJsonConverter : JsonConverter<ManifestItem>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ManifestItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string hash = default;
            Guid id = default;
            string name = default;
            string path = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "Hash":
                            hash = utf8JsonReader.GetString();
                            break;
                        case "Id":
                            id = utf8JsonReader.GetGuid();
                            break;
                        case "Name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "Path":
                            path = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ManifestItem(hash, id, name, path);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="manifestItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ManifestItem manifestItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("Hash", manifestItem.Hash);
            writer.WriteString("Id", manifestItem.Id);
            writer.WriteString("Name", manifestItem.Name);
            writer.WriteString("Path", manifestItem.Path);

            writer.WriteEndObject();
        }
    }
}
