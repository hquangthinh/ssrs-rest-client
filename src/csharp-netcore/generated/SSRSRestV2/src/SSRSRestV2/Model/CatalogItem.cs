// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// CatalogItem is an abstract type that contains the common properties of all the types of CatalogItems. Hence, it is the base type from which the other CatalogItem types are derived.
    /// </summary>
    public partial class CatalogItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogItem" /> class.
        /// </summary>
        /// <param name="content">A string value that contains binary encoding by base64url encoding rules. The value of this property is not processed by the server. In object creation the server receives and stores a value, and in object retrieval the server returns the previously stored value.</param>
        /// <param name="contentType">A string value that contains a SOAP MIME-type that is associated with the CatalogItem.</param>
        /// <param name="createdBy">A string value that represents the network user name of the user who originally created the CatalogItem.</param>
        /// <param name="createdDate">A string that contains the date-time of the creation of the CatalogItem.</param>
        /// <param name="description">A string value that contains descriptive text about the CatalogItem.</param>
        /// <param name="hidden">A boolean value that indicates if the CatalogItem is hidden. If true, the item will generally not appear in listings of CatalogItems within the parent item.</param>
        /// <param name="id">A unique UUID value that specifies the identifier by which this CatalogItem can be referenced in requests or by other defined objects.</param>
        /// <param name="isFavorite">A boolean value that specifies whether the CatalogItem is designated as a Favorite.</param>
        /// <param name="modifiedBy">A string value that contains the network user name of the last user to modify the CatalogItem.</param>
        /// <param name="modifiedDate">A string value that contains the date-time of the last modification to the CatalogItem.</param>
        /// <param name="name">A string value that specifies the name for the CatalogItem. This name is typically displayed in the user interface.</param>
        /// <param name="parentFolderId">A unique UUID value that specifies the identifier of the Folder CatalogItem that contains this CatalogItem.</param>
        /// <param name="path">A string value that contains the full server path for the CatalogItem. Path is defined as an alternate key on the CatalogItem and can be used as the parameter by which CatalogItem can be referenced in requests or by other defined objects.</param>
        /// <param name="size">An Int64 value that contains the size of the CatalogItem in bytes.</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public CatalogItem(string content, string contentType, string createdBy, DateTime createdDate, string description, bool hidden, Guid id, bool isFavorite, string modifiedBy, DateTime modifiedDate, string name, Guid parentFolderId, string path, long size, CatalogItemType type)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException("id is a required property for CatalogItem and cannot be null.");

            if (name == null)
                throw new ArgumentNullException("name is a required property for CatalogItem and cannot be null.");

            if (description == null)
                throw new ArgumentNullException("description is a required property for CatalogItem and cannot be null.");

            if (path == null)
                throw new ArgumentNullException("path is a required property for CatalogItem and cannot be null.");

            if (type == null)
                throw new ArgumentNullException("type is a required property for CatalogItem and cannot be null.");

            if (hidden == null)
                throw new ArgumentNullException("hidden is a required property for CatalogItem and cannot be null.");

            if (size == null)
                throw new ArgumentNullException("size is a required property for CatalogItem and cannot be null.");

            if (modifiedBy == null)
                throw new ArgumentNullException("modifiedBy is a required property for CatalogItem and cannot be null.");

            if (modifiedDate == null)
                throw new ArgumentNullException("modifiedDate is a required property for CatalogItem and cannot be null.");

            if (createdBy == null)
                throw new ArgumentNullException("createdBy is a required property for CatalogItem and cannot be null.");

            if (createdDate == null)
                throw new ArgumentNullException("createdDate is a required property for CatalogItem and cannot be null.");

            if (parentFolderId == null)
                throw new ArgumentNullException("parentFolderId is a required property for CatalogItem and cannot be null.");

            if (contentType == null)
                throw new ArgumentNullException("contentType is a required property for CatalogItem and cannot be null.");

            if (content == null)
                throw new ArgumentNullException("content is a required property for CatalogItem and cannot be null.");

            if (isFavorite == null)
                throw new ArgumentNullException("isFavorite is a required property for CatalogItem and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            Content = content;
            ContentType = contentType;
            CreatedBy = createdBy;
            CreatedDate = createdDate;
            Description = description;
            Hidden = hidden;
            Id = id;
            IsFavorite = isFavorite;
            ModifiedBy = modifiedBy;
            ModifiedDate = modifiedDate;
            Name = name;
            ParentFolderId = parentFolderId;
            Path = path;
            Size = size;
            Type = type;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("Type")]
        public CatalogItemType Type { get; set; }

        /// <summary>
        /// A string value that contains binary encoding by base64url encoding rules. The value of this property is not processed by the server. In object creation the server receives and stores a value, and in object retrieval the server returns the previously stored value.
        /// </summary>
        /// <value>A string value that contains binary encoding by base64url encoding rules. The value of this property is not processed by the server. In object creation the server receives and stores a value, and in object retrieval the server returns the previously stored value.</value>
        [JsonPropertyName("Content")]
        public string Content { get; set; }

        /// <summary>
        /// A string value that contains a SOAP MIME-type that is associated with the CatalogItem.
        /// </summary>
        /// <value>A string value that contains a SOAP MIME-type that is associated with the CatalogItem.</value>
        [JsonPropertyName("ContentType")]
        public string ContentType { get; set; }

        /// <summary>
        /// A string value that represents the network user name of the user who originally created the CatalogItem.
        /// </summary>
        /// <value>A string value that represents the network user name of the user who originally created the CatalogItem.</value>
        [JsonPropertyName("CreatedBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// A string that contains the date-time of the creation of the CatalogItem.
        /// </summary>
        /// <value>A string that contains the date-time of the creation of the CatalogItem.</value>
        [JsonPropertyName("CreatedDate")]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// A string value that contains descriptive text about the CatalogItem.
        /// </summary>
        /// <value>A string value that contains descriptive text about the CatalogItem.</value>
        [JsonPropertyName("Description")]
        public string Description { get; set; }

        /// <summary>
        /// A boolean value that indicates if the CatalogItem is hidden. If true, the item will generally not appear in listings of CatalogItems within the parent item.
        /// </summary>
        /// <value>A boolean value that indicates if the CatalogItem is hidden. If true, the item will generally not appear in listings of CatalogItems within the parent item.</value>
        [JsonPropertyName("Hidden")]
        public bool Hidden { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier by which this CatalogItem can be referenced in requests or by other defined objects.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier by which this CatalogItem can be referenced in requests or by other defined objects.</value>
        [JsonPropertyName("Id")]
        public Guid Id { get; set; }

        /// <summary>
        /// A boolean value that specifies whether the CatalogItem is designated as a Favorite.
        /// </summary>
        /// <value>A boolean value that specifies whether the CatalogItem is designated as a Favorite.</value>
        [JsonPropertyName("IsFavorite")]
        public bool IsFavorite { get; set; }

        /// <summary>
        /// A string value that contains the network user name of the last user to modify the CatalogItem.
        /// </summary>
        /// <value>A string value that contains the network user name of the last user to modify the CatalogItem.</value>
        [JsonPropertyName("ModifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// A string value that contains the date-time of the last modification to the CatalogItem.
        /// </summary>
        /// <value>A string value that contains the date-time of the last modification to the CatalogItem.</value>
        [JsonPropertyName("ModifiedDate")]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// A string value that specifies the name for the CatalogItem. This name is typically displayed in the user interface.
        /// </summary>
        /// <value>A string value that specifies the name for the CatalogItem. This name is typically displayed in the user interface.</value>
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier of the Folder CatalogItem that contains this CatalogItem.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier of the Folder CatalogItem that contains this CatalogItem.</value>
        [JsonPropertyName("ParentFolderId")]
        public Guid ParentFolderId { get; set; }

        /// <summary>
        /// A string value that contains the full server path for the CatalogItem. Path is defined as an alternate key on the CatalogItem and can be used as the parameter by which CatalogItem can be referenced in requests or by other defined objects.
        /// </summary>
        /// <value>A string value that contains the full server path for the CatalogItem. Path is defined as an alternate key on the CatalogItem and can be used as the parameter by which CatalogItem can be referenced in requests or by other defined objects.</value>
        [JsonPropertyName("Path")]
        public string Path { get; set; }

        /// <summary>
        /// An Int64 value that contains the size of the CatalogItem in bytes.
        /// </summary>
        /// <value>An Int64 value that contains the size of the CatalogItem in bytes.</value>
        [JsonPropertyName("Size")]
        public long Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CatalogItem {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentFolderId: ").Append(ParentFolderId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type CatalogItem
    /// </summary>
    public class CatalogItemJsonConverter : JsonConverter<CatalogItem>
    {
        /// <summary>
        /// The format to use to serialize CreatedDate
        /// </summary>
        public static string CreatedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedDate
        /// </summary>
        public static string ModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CatalogItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string content = default;
            string contentType = default;
            string createdBy = default;
            DateTime createdDate = default;
            string description = default;
            bool hidden = default;
            Guid id = default;
            bool isFavorite = default;
            string modifiedBy = default;
            DateTime modifiedDate = default;
            string name = default;
            Guid parentFolderId = default;
            string path = default;
            long size = default;
            CatalogItemType type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "Content":
                            content = utf8JsonReader.GetString();
                            break;
                        case "ContentType":
                            contentType = utf8JsonReader.GetString();
                            break;
                        case "CreatedBy":
                            createdBy = utf8JsonReader.GetString();
                            break;
                        case "CreatedDate":
                            createdDate = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Description":
                            description = utf8JsonReader.GetString();
                            break;
                        case "Hidden":
                            hidden = utf8JsonReader.GetBoolean();
                            break;
                        case "Id":
                            id = utf8JsonReader.GetGuid();
                            break;
                        case "IsFavorite":
                            isFavorite = utf8JsonReader.GetBoolean();
                            break;
                        case "ModifiedBy":
                            modifiedBy = utf8JsonReader.GetString();
                            break;
                        case "ModifiedDate":
                            modifiedDate = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "ParentFolderId":
                            parentFolderId = utf8JsonReader.GetGuid();
                            break;
                        case "Path":
                            path = utf8JsonReader.GetString();
                            break;
                        case "Size":
                            size = utf8JsonReader.GetInt64();
                            break;
                        case "Type":
                            string typeRawValue = utf8JsonReader.GetString();
                            type = CatalogItemTypeConverter.FromString(typeRawValue);
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CatalogItem(content, contentType, createdBy, createdDate, description, hidden, id, isFavorite, modifiedBy, modifiedDate, name, parentFolderId, path, size, type);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="catalogItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CatalogItem catalogItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("Content", catalogItem.Content);
            writer.WriteString("ContentType", catalogItem.ContentType);
            writer.WriteString("CreatedBy", catalogItem.CreatedBy);
            writer.WriteString("CreatedDate", catalogItem.CreatedDate.ToString(CreatedDateFormat));
            writer.WriteString("Description", catalogItem.Description);
            writer.WriteBoolean("Hidden", catalogItem.Hidden);
            writer.WriteString("Id", catalogItem.Id);
            writer.WriteBoolean("IsFavorite", catalogItem.IsFavorite);
            writer.WriteString("ModifiedBy", catalogItem.ModifiedBy);
            writer.WriteString("ModifiedDate", catalogItem.ModifiedDate.ToString(ModifiedDateFormat));
            writer.WriteString("Name", catalogItem.Name);
            writer.WriteString("ParentFolderId", catalogItem.ParentFolderId);
            writer.WriteString("Path", catalogItem.Path);
            writer.WriteNumber("Size", catalogItem.Size);
            var typeRawValue = CatalogItemTypeConverter.ToJsonValue(catalogItem.Type);
            if (typeRawValue != null)
                writer.WriteString("Type", typeRawValue);
            else
                writer.WriteNull("Type");

            writer.WriteEndObject();
        }
    }
}
