// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that specifies the metadata definition of a parameter for a report.
    /// </summary>
    public partial class ReportParameterDefinition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportParameterDefinition" /> class.
        /// </summary>
        /// <param name="allowBlank">A boolean value that indicates whether the ReportParamter is allowed to be blank.</param>
        /// <param name="defaultValues">An array of string values that specify the ReportParameter&#39;s default values. If the parameter is multi-valued then the array can have more than one entry.</param>
        /// <param name="defaultValuesIsNull"> A boolean value that indicates whether the DefaultValues property is NULL.</param>
        /// <param name="defaultValuesQueryBased">A boolean value that indicates whether the ReportParamter&#39;s default values are obtained from a query (instead of being static specified values).</param>
        /// <param name="dependencies">An array of string values that specify the dependencies for the ReportParameter.</param>
        /// <param name="errorMessage">Error returned when validating parameters.</param>
        /// <param name="multiValue">A boolean value that indicates whether the ReportParameter is multivalued.</param>
        /// <param name="name">A string value that specifies the name for the ReportParameter. This name will typically be displayed in the user interface.</param>
        /// <param name="nullable">A boolean value that indicates whether the ReportParameter is allowed to be null.</param>
        /// <param name="parameterState">parameterState</param>
        /// <param name="parameterType">parameterType</param>
        /// <param name="parameterVisibility">parameterVisibility</param>
        /// <param name="prompt">A string value that specifies text used to prompt a user for the value of the ReportParameter.</param>
        /// <param name="promptUser">A boolean value that indicates whether the user should be prompted for the value for the ReportParameter.</param>
        /// <param name="queryParameter">A boolean value that indicates whether the ReportParamter is query based.</param>
        /// <param name="validValues">validValues</param>
        /// <param name="validValuesIsNull">A boolean value that indicates whether the ValidValues property is NULL.</param>
        /// <param name="validValuesQueryBased">A boolean value that indicates whether the ReportParameter&#39;s valid values are obtained from a query (instead of being static specified values).</param>
        [JsonConstructor]
        public ReportParameterDefinition(bool allowBlank, List<string> defaultValues, bool defaultValuesIsNull, bool defaultValuesQueryBased, List<string> dependencies, string errorMessage, bool multiValue, string name, bool nullable, ReportParameterState parameterState, ReportParameterType parameterType, ReportParameterVisibility parameterVisibility, string prompt, bool promptUser, bool queryParameter, List<ValidValue> validValues, bool validValuesIsNull, bool validValuesQueryBased)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (allowBlank == null)
                throw new ArgumentNullException("allowBlank is a required property for ReportParameterDefinition and cannot be null.");

            if (defaultValues == null)
                throw new ArgumentNullException("defaultValues is a required property for ReportParameterDefinition and cannot be null.");

            if (defaultValuesIsNull == null)
                throw new ArgumentNullException("defaultValuesIsNull is a required property for ReportParameterDefinition and cannot be null.");

            if (defaultValuesQueryBased == null)
                throw new ArgumentNullException("defaultValuesQueryBased is a required property for ReportParameterDefinition and cannot be null.");

            if (dependencies == null)
                throw new ArgumentNullException("dependencies is a required property for ReportParameterDefinition and cannot be null.");

            if (errorMessage == null)
                throw new ArgumentNullException("errorMessage is a required property for ReportParameterDefinition and cannot be null.");

            if (multiValue == null)
                throw new ArgumentNullException("multiValue is a required property for ReportParameterDefinition and cannot be null.");

            if (name == null)
                throw new ArgumentNullException("name is a required property for ReportParameterDefinition and cannot be null.");

            if (nullable == null)
                throw new ArgumentNullException("nullable is a required property for ReportParameterDefinition and cannot be null.");

            if (parameterState == null)
                throw new ArgumentNullException("parameterState is a required property for ReportParameterDefinition and cannot be null.");

            if (parameterType == null)
                throw new ArgumentNullException("parameterType is a required property for ReportParameterDefinition and cannot be null.");

            if (parameterVisibility == null)
                throw new ArgumentNullException("parameterVisibility is a required property for ReportParameterDefinition and cannot be null.");

            if (prompt == null)
                throw new ArgumentNullException("prompt is a required property for ReportParameterDefinition and cannot be null.");

            if (promptUser == null)
                throw new ArgumentNullException("promptUser is a required property for ReportParameterDefinition and cannot be null.");

            if (queryParameter == null)
                throw new ArgumentNullException("queryParameter is a required property for ReportParameterDefinition and cannot be null.");

            if (validValues == null)
                throw new ArgumentNullException("validValues is a required property for ReportParameterDefinition and cannot be null.");

            if (validValuesIsNull == null)
                throw new ArgumentNullException("validValuesIsNull is a required property for ReportParameterDefinition and cannot be null.");

            if (validValuesQueryBased == null)
                throw new ArgumentNullException("validValuesQueryBased is a required property for ReportParameterDefinition and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            AllowBlank = allowBlank;
            DefaultValues = defaultValues;
            DefaultValuesIsNull = defaultValuesIsNull;
            DefaultValuesQueryBased = defaultValuesQueryBased;
            Dependencies = dependencies;
            ErrorMessage = errorMessage;
            MultiValue = multiValue;
            Name = name;
            Nullable = nullable;
            ParameterState = parameterState;
            ParameterType = parameterType;
            ParameterVisibility = parameterVisibility;
            Prompt = prompt;
            PromptUser = promptUser;
            QueryParameter = queryParameter;
            ValidValues = validValues;
            ValidValuesIsNull = validValuesIsNull;
            ValidValuesQueryBased = validValuesQueryBased;
        }

        /// <summary>
        /// Gets or Sets ParameterState
        /// </summary>
        [JsonPropertyName("ParameterState")]
        public ReportParameterState ParameterState { get; set; }

        /// <summary>
        /// Gets or Sets ParameterType
        /// </summary>
        [JsonPropertyName("ParameterType")]
        public ReportParameterType ParameterType { get; set; }

        /// <summary>
        /// Gets or Sets ParameterVisibility
        /// </summary>
        [JsonPropertyName("ParameterVisibility")]
        public ReportParameterVisibility ParameterVisibility { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the ReportParamter is allowed to be blank.
        /// </summary>
        /// <value>A boolean value that indicates whether the ReportParamter is allowed to be blank.</value>
        [JsonPropertyName("AllowBlank")]
        public bool AllowBlank { get; set; }

        /// <summary>
        /// An array of string values that specify the ReportParameter&#39;s default values. If the parameter is multi-valued then the array can have more than one entry.
        /// </summary>
        /// <value>An array of string values that specify the ReportParameter&#39;s default values. If the parameter is multi-valued then the array can have more than one entry.</value>
        [JsonPropertyName("DefaultValues")]
        public List<string> DefaultValues { get; set; }

        /// <summary>
        ///  A boolean value that indicates whether the DefaultValues property is NULL.
        /// </summary>
        /// <value> A boolean value that indicates whether the DefaultValues property is NULL.</value>
        [JsonPropertyName("DefaultValuesIsNull")]
        public bool DefaultValuesIsNull { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the ReportParamter&#39;s default values are obtained from a query (instead of being static specified values).
        /// </summary>
        /// <value>A boolean value that indicates whether the ReportParamter&#39;s default values are obtained from a query (instead of being static specified values).</value>
        [JsonPropertyName("DefaultValuesQueryBased")]
        public bool DefaultValuesQueryBased { get; set; }

        /// <summary>
        /// An array of string values that specify the dependencies for the ReportParameter.
        /// </summary>
        /// <value>An array of string values that specify the dependencies for the ReportParameter.</value>
        [JsonPropertyName("Dependencies")]
        public List<string> Dependencies { get; set; }

        /// <summary>
        /// Error returned when validating parameters.
        /// </summary>
        /// <value>Error returned when validating parameters.</value>
        [JsonPropertyName("ErrorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the ReportParameter is multivalued.
        /// </summary>
        /// <value>A boolean value that indicates whether the ReportParameter is multivalued.</value>
        [JsonPropertyName("MultiValue")]
        public bool MultiValue { get; set; }

        /// <summary>
        /// A string value that specifies the name for the ReportParameter. This name will typically be displayed in the user interface.
        /// </summary>
        /// <value>A string value that specifies the name for the ReportParameter. This name will typically be displayed in the user interface.</value>
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the ReportParameter is allowed to be null.
        /// </summary>
        /// <value>A boolean value that indicates whether the ReportParameter is allowed to be null.</value>
        [JsonPropertyName("Nullable")]
        public bool Nullable { get; set; }

        /// <summary>
        /// A string value that specifies text used to prompt a user for the value of the ReportParameter.
        /// </summary>
        /// <value>A string value that specifies text used to prompt a user for the value of the ReportParameter.</value>
        [JsonPropertyName("Prompt")]
        public string Prompt { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the user should be prompted for the value for the ReportParameter.
        /// </summary>
        /// <value>A boolean value that indicates whether the user should be prompted for the value for the ReportParameter.</value>
        [JsonPropertyName("PromptUser")]
        public bool PromptUser { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the ReportParamter is query based.
        /// </summary>
        /// <value>A boolean value that indicates whether the ReportParamter is query based.</value>
        [JsonPropertyName("QueryParameter")]
        public bool QueryParameter { get; set; }

        /// <summary>
        /// Gets or Sets ValidValues
        /// </summary>
        [JsonPropertyName("ValidValues")]
        public List<ValidValue> ValidValues { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the ValidValues property is NULL.
        /// </summary>
        /// <value>A boolean value that indicates whether the ValidValues property is NULL.</value>
        [JsonPropertyName("ValidValuesIsNull")]
        public bool ValidValuesIsNull { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the ReportParameter&#39;s valid values are obtained from a query (instead of being static specified values).
        /// </summary>
        /// <value>A boolean value that indicates whether the ReportParameter&#39;s valid values are obtained from a query (instead of being static specified values).</value>
        [JsonPropertyName("ValidValuesQueryBased")]
        public bool ValidValuesQueryBased { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportParameterDefinition {\n");
            sb.Append("  AllowBlank: ").Append(AllowBlank).Append("\n");
            sb.Append("  DefaultValues: ").Append(DefaultValues).Append("\n");
            sb.Append("  DefaultValuesIsNull: ").Append(DefaultValuesIsNull).Append("\n");
            sb.Append("  DefaultValuesQueryBased: ").Append(DefaultValuesQueryBased).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  MultiValue: ").Append(MultiValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nullable: ").Append(Nullable).Append("\n");
            sb.Append("  ParameterState: ").Append(ParameterState).Append("\n");
            sb.Append("  ParameterType: ").Append(ParameterType).Append("\n");
            sb.Append("  ParameterVisibility: ").Append(ParameterVisibility).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("  PromptUser: ").Append(PromptUser).Append("\n");
            sb.Append("  QueryParameter: ").Append(QueryParameter).Append("\n");
            sb.Append("  ValidValues: ").Append(ValidValues).Append("\n");
            sb.Append("  ValidValuesIsNull: ").Append(ValidValuesIsNull).Append("\n");
            sb.Append("  ValidValuesQueryBased: ").Append(ValidValuesQueryBased).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type ReportParameterDefinition
    /// </summary>
    public class ReportParameterDefinitionJsonConverter : JsonConverter<ReportParameterDefinition>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReportParameterDefinition Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            bool allowBlank = default;
            List<string> defaultValues = default;
            bool defaultValuesIsNull = default;
            bool defaultValuesQueryBased = default;
            List<string> dependencies = default;
            string errorMessage = default;
            bool multiValue = default;
            string name = default;
            bool nullable = default;
            ReportParameterState parameterState = default;
            ReportParameterType parameterType = default;
            ReportParameterVisibility parameterVisibility = default;
            string prompt = default;
            bool promptUser = default;
            bool queryParameter = default;
            List<ValidValue> validValues = default;
            bool validValuesIsNull = default;
            bool validValuesQueryBased = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "AllowBlank":
                            allowBlank = utf8JsonReader.GetBoolean();
                            break;
                        case "DefaultValues":
                            defaultValues = JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "DefaultValuesIsNull":
                            defaultValuesIsNull = utf8JsonReader.GetBoolean();
                            break;
                        case "DefaultValuesQueryBased":
                            defaultValuesQueryBased = utf8JsonReader.GetBoolean();
                            break;
                        case "Dependencies":
                            dependencies = JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "ErrorMessage":
                            errorMessage = utf8JsonReader.GetString();
                            break;
                        case "MultiValue":
                            multiValue = utf8JsonReader.GetBoolean();
                            break;
                        case "Name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "Nullable":
                            nullable = utf8JsonReader.GetBoolean();
                            break;
                        case "ParameterState":
                            string parameterStateRawValue = utf8JsonReader.GetString();
                            parameterState = ReportParameterStateConverter.FromString(parameterStateRawValue);
                            break;
                        case "ParameterType":
                            string parameterTypeRawValue = utf8JsonReader.GetString();
                            parameterType = ReportParameterTypeConverter.FromString(parameterTypeRawValue);
                            break;
                        case "ParameterVisibility":
                            string parameterVisibilityRawValue = utf8JsonReader.GetString();
                            parameterVisibility = ReportParameterVisibilityConverter.FromString(parameterVisibilityRawValue);
                            break;
                        case "Prompt":
                            prompt = utf8JsonReader.GetString();
                            break;
                        case "PromptUser":
                            promptUser = utf8JsonReader.GetBoolean();
                            break;
                        case "QueryParameter":
                            queryParameter = utf8JsonReader.GetBoolean();
                            break;
                        case "ValidValues":
                            validValues = JsonSerializer.Deserialize<List<ValidValue>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "ValidValuesIsNull":
                            validValuesIsNull = utf8JsonReader.GetBoolean();
                            break;
                        case "ValidValuesQueryBased":
                            validValuesQueryBased = utf8JsonReader.GetBoolean();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReportParameterDefinition(allowBlank, defaultValues, defaultValuesIsNull, defaultValuesQueryBased, dependencies, errorMessage, multiValue, name, nullable, parameterState, parameterType, parameterVisibility, prompt, promptUser, queryParameter, validValues, validValuesIsNull, validValuesQueryBased);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportParameterDefinition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReportParameterDefinition reportParameterDefinition, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteBoolean("AllowBlank", reportParameterDefinition.AllowBlank);
            writer.WritePropertyName("DefaultValues");
            JsonSerializer.Serialize(writer, reportParameterDefinition.DefaultValues, jsonSerializerOptions);
            writer.WriteBoolean("DefaultValuesIsNull", reportParameterDefinition.DefaultValuesIsNull);
            writer.WriteBoolean("DefaultValuesQueryBased", reportParameterDefinition.DefaultValuesQueryBased);
            writer.WritePropertyName("Dependencies");
            JsonSerializer.Serialize(writer, reportParameterDefinition.Dependencies, jsonSerializerOptions);
            writer.WriteString("ErrorMessage", reportParameterDefinition.ErrorMessage);
            writer.WriteBoolean("MultiValue", reportParameterDefinition.MultiValue);
            writer.WriteString("Name", reportParameterDefinition.Name);
            writer.WriteBoolean("Nullable", reportParameterDefinition.Nullable);
            var parameterStateRawValue = ReportParameterStateConverter.ToJsonValue(reportParameterDefinition.ParameterState);
            if (parameterStateRawValue != null)
                writer.WriteString("ParameterState", parameterStateRawValue);
            else
                writer.WriteNull("ParameterState");
            var parameterTypeRawValue = ReportParameterTypeConverter.ToJsonValue(reportParameterDefinition.ParameterType);
            if (parameterTypeRawValue != null)
                writer.WriteString("ParameterType", parameterTypeRawValue);
            else
                writer.WriteNull("ParameterType");
            var parameterVisibilityRawValue = ReportParameterVisibilityConverter.ToJsonValue(reportParameterDefinition.ParameterVisibility);
            if (parameterVisibilityRawValue != null)
                writer.WriteString("ParameterVisibility", parameterVisibilityRawValue);
            else
                writer.WriteNull("ParameterVisibility");
            writer.WriteString("Prompt", reportParameterDefinition.Prompt);
            writer.WriteBoolean("PromptUser", reportParameterDefinition.PromptUser);
            writer.WriteBoolean("QueryParameter", reportParameterDefinition.QueryParameter);
            writer.WritePropertyName("ValidValues");
            JsonSerializer.Serialize(writer, reportParameterDefinition.ValidValues, jsonSerializerOptions);
            writer.WriteBoolean("ValidValuesIsNull", reportParameterDefinition.ValidValuesIsNull);
            writer.WriteBoolean("ValidValuesQueryBased", reportParameterDefinition.ValidValuesQueryBased);

            writer.WriteEndObject();
        }
    }
}
