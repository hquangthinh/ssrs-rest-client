// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that defines information about an external source of data that can be connected to as a source of data for Reporting Services. DataSource is derived from CatalogItem and therefore includes all properties defined by CatalogItem.
    /// </summary>
    public partial class DataSource1 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DataSource1" /> class.
        /// </summary>
        /// <param name="connectionString">A string value that can be passed to a data source in order to begin the process of establishing connection.</param>
        /// <param name="credentialsByUser">credentialsByUser</param>
        /// <param name="credentialsInServer">credentialsInServer</param>
        /// <param name="dataSourceType">DataSource extension such as &#39;SQL&#39;.</param>
        /// <param name="isConnectionStringOverridden">Specifies whether the original connection string is overridden.</param>
        /// <param name="isEnabled">A Boolean value that specifies whether the DataSource is enabled for use.</param>
        /// <param name="isOriginalConnectionStringExpressionBased">Indicates whether the original connection string for the data source was expression-based.</param>
        /// <param name="isReference">Indicates whether this is a reference to a shared data source or an embedded data source.</param>
        /// <param name="subscriptions">subscriptions</param>
        [JsonConstructor]
        public DataSource1(string connectionString, CredentialsSuppliedByUser credentialsByUser, CredentialsStoredInServer credentialsInServer, string dataSourceType, bool isConnectionStringOverridden, bool isEnabled, bool isOriginalConnectionStringExpressionBased, bool isReference, Subscription subscriptions)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (isEnabled == null)
                throw new ArgumentNullException("isEnabled is a required property for DataSource1 and cannot be null.");

            if (connectionString == null)
                throw new ArgumentNullException("connectionString is a required property for DataSource1 and cannot be null.");

            if (dataSourceType == null)
                throw new ArgumentNullException("dataSourceType is a required property for DataSource1 and cannot be null.");

            if (isOriginalConnectionStringExpressionBased == null)
                throw new ArgumentNullException("isOriginalConnectionStringExpressionBased is a required property for DataSource1 and cannot be null.");

            if (isConnectionStringOverridden == null)
                throw new ArgumentNullException("isConnectionStringOverridden is a required property for DataSource1 and cannot be null.");

            if (credentialsByUser == null)
                throw new ArgumentNullException("credentialsByUser is a required property for DataSource1 and cannot be null.");

            if (credentialsInServer == null)
                throw new ArgumentNullException("credentialsInServer is a required property for DataSource1 and cannot be null.");

            if (isReference == null)
                throw new ArgumentNullException("isReference is a required property for DataSource1 and cannot be null.");

            if (subscriptions == null)
                throw new ArgumentNullException("subscriptions is a required property for DataSource1 and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            ConnectionString = connectionString;
            CredentialsByUser = credentialsByUser;
            CredentialsInServer = credentialsInServer;
            DataSourceType = dataSourceType;
            IsConnectionStringOverridden = isConnectionStringOverridden;
            IsEnabled = isEnabled;
            IsOriginalConnectionStringExpressionBased = isOriginalConnectionStringExpressionBased;
            IsReference = isReference;
            Subscriptions = subscriptions;
        }

        /// <summary>
        /// A string value that can be passed to a data source in order to begin the process of establishing connection.
        /// </summary>
        /// <value>A string value that can be passed to a data source in order to begin the process of establishing connection.</value>
        [JsonPropertyName("ConnectionString")]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Gets or Sets CredentialsByUser
        /// </summary>
        [JsonPropertyName("CredentialsByUser")]
        public CredentialsSuppliedByUser CredentialsByUser { get; set; }

        /// <summary>
        /// Gets or Sets CredentialsInServer
        /// </summary>
        [JsonPropertyName("CredentialsInServer")]
        public CredentialsStoredInServer CredentialsInServer { get; set; }

        /// <summary>
        /// DataSource extension such as &#39;SQL&#39;.
        /// </summary>
        /// <value>DataSource extension such as &#39;SQL&#39;.</value>
        [JsonPropertyName("DataSourceType")]
        public string DataSourceType { get; set; }

        /// <summary>
        /// Specifies whether the original connection string is overridden.
        /// </summary>
        /// <value>Specifies whether the original connection string is overridden.</value>
        [JsonPropertyName("IsConnectionStringOverridden")]
        public bool IsConnectionStringOverridden { get; set; }

        /// <summary>
        /// A Boolean value that specifies whether the DataSource is enabled for use.
        /// </summary>
        /// <value>A Boolean value that specifies whether the DataSource is enabled for use.</value>
        [JsonPropertyName("IsEnabled")]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// Indicates whether the original connection string for the data source was expression-based.
        /// </summary>
        /// <value>Indicates whether the original connection string for the data source was expression-based.</value>
        [JsonPropertyName("IsOriginalConnectionStringExpressionBased")]
        public bool IsOriginalConnectionStringExpressionBased { get; set; }

        /// <summary>
        /// Indicates whether this is a reference to a shared data source or an embedded data source.
        /// </summary>
        /// <value>Indicates whether this is a reference to a shared data source or an embedded data source.</value>
        [JsonPropertyName("IsReference")]
        public bool IsReference { get; set; }

        /// <summary>
        /// Gets or Sets Subscriptions
        /// </summary>
        [JsonPropertyName("Subscriptions")]
        public Subscription Subscriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataSource1 {\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("  CredentialsByUser: ").Append(CredentialsByUser).Append("\n");
            sb.Append("  CredentialsInServer: ").Append(CredentialsInServer).Append("\n");
            sb.Append("  DataSourceType: ").Append(DataSourceType).Append("\n");
            sb.Append("  IsConnectionStringOverridden: ").Append(IsConnectionStringOverridden).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  IsOriginalConnectionStringExpressionBased: ").Append(IsOriginalConnectionStringExpressionBased).Append("\n");
            sb.Append("  IsReference: ").Append(IsReference).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type DataSource1
    /// </summary>
    public class DataSource1JsonConverter : JsonConverter<DataSource1>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DataSource1 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string connectionString = default;
            CredentialsSuppliedByUser credentialsByUser = default;
            CredentialsStoredInServer credentialsInServer = default;
            string dataSourceType = default;
            bool isConnectionStringOverridden = default;
            bool isEnabled = default;
            bool isOriginalConnectionStringExpressionBased = default;
            bool isReference = default;
            Subscription subscriptions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "ConnectionString":
                            connectionString = utf8JsonReader.GetString();
                            break;
                        case "CredentialsByUser":
                            credentialsByUser = JsonSerializer.Deserialize<CredentialsSuppliedByUser>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "CredentialsInServer":
                            credentialsInServer = JsonSerializer.Deserialize<CredentialsStoredInServer>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "DataSourceType":
                            dataSourceType = utf8JsonReader.GetString();
                            break;
                        case "IsConnectionStringOverridden":
                            isConnectionStringOverridden = utf8JsonReader.GetBoolean();
                            break;
                        case "IsEnabled":
                            isEnabled = utf8JsonReader.GetBoolean();
                            break;
                        case "IsOriginalConnectionStringExpressionBased":
                            isOriginalConnectionStringExpressionBased = utf8JsonReader.GetBoolean();
                            break;
                        case "IsReference":
                            isReference = utf8JsonReader.GetBoolean();
                            break;
                        case "Subscriptions":
                            subscriptions = JsonSerializer.Deserialize<Subscription>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            return new DataSource1(connectionString, credentialsByUser, credentialsInServer, dataSourceType, isConnectionStringOverridden, isEnabled, isOriginalConnectionStringExpressionBased, isReference, subscriptions);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dataSource1"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DataSource1 dataSource1, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("ConnectionString", dataSource1.ConnectionString);
            writer.WritePropertyName("CredentialsByUser");
            JsonSerializer.Serialize(writer, dataSource1.CredentialsByUser, jsonSerializerOptions);
            writer.WritePropertyName("CredentialsInServer");
            JsonSerializer.Serialize(writer, dataSource1.CredentialsInServer, jsonSerializerOptions);
            writer.WriteString("DataSourceType", dataSource1.DataSourceType);
            writer.WriteBoolean("IsConnectionStringOverridden", dataSource1.IsConnectionStringOverridden);
            writer.WriteBoolean("IsEnabled", dataSource1.IsEnabled);
            writer.WriteBoolean("IsOriginalConnectionStringExpressionBased", dataSource1.IsOriginalConnectionStringExpressionBased);
            writer.WriteBoolean("IsReference", dataSource1.IsReference);
            writer.WritePropertyName("Subscriptions");
            JsonSerializer.Serialize(writer, dataSource1.Subscriptions, jsonSerializerOptions);

            writer.WriteEndObject();
        }
    }
}
