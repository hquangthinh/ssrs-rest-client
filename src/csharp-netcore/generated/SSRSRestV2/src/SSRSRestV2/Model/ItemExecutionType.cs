// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An enumeration that specifies whether the item&#39;s execution is with live data, cached data, or based on a data snapshot.
    /// </summary>
    /// <value>An enumeration that specifies whether the item&#39;s execution is with live data, cached data, or based on a data snapshot.</value>
    public enum ItemExecutionType
    {
        /// <summary>
        /// Enum Live for value: Live
        /// </summary>
        Live = 1,

        /// <summary>
        /// Enum Cache for value: Cache
        /// </summary>
        Cache = 2,

        /// <summary>
        /// Enum Snapshot for value: Snapshot
        /// </summary>
        Snapshot = 3

    }

    public class ItemExecutionTypeConverter : JsonConverter<ItemExecutionType>
    {
        public static ItemExecutionType FromString(string value)
        {
            if (value == "Live")
                return ItemExecutionType.Live;

            if (value == "Cache")
                return ItemExecutionType.Cache;

            if (value == "Snapshot")
                return ItemExecutionType.Snapshot;

            throw new NotImplementedException($"Could not convert value to type ItemExecutionType: '{value}'");
        }

        public static ItemExecutionType? FromStringOrDefault(string value)
        {
            if (value == "Live")
                return ItemExecutionType.Live;

            if (value == "Cache")
                return ItemExecutionType.Cache;

            if (value == "Snapshot")
                return ItemExecutionType.Snapshot;

            return null;
        }

        public static string ToJsonValue(ItemExecutionType value)
        {
            if (value == ItemExecutionType.Live)
                return "Live";

            if (value == ItemExecutionType.Cache)
                return "Cache";

            if (value == ItemExecutionType.Snapshot)
                return "Snapshot";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ItemExecutionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            ItemExecutionType? result = ItemExecutionTypeConverter.FromString(rawValue);
            
            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ItemExecutionType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="itemExecutionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ItemExecutionType itemExecutionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(itemExecutionType.ToString());
        }
    }

    public class ItemExecutionTypeNullableConverter : JsonConverter<ItemExecutionType?>
    {
        /// <summary>
        /// Returns a ItemExecutionType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ItemExecutionType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            if (rawValue == null)
                return null;

            ItemExecutionType? result = ItemExecutionTypeConverter.FromString(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="itemExecutionType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ItemExecutionType? itemExecutionType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(itemExecutionType?.ToString() ?? "null");
        }
    }

}
