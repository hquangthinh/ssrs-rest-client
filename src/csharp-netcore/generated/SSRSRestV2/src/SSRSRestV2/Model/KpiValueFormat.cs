// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An enumeration of values that specifies the available formats for KPI values.
    /// </summary>
    /// <value>An enumeration of values that specifies the available formats for KPI values.</value>
    public enum KpiValueFormat
    {
        /// <summary>
        /// Enum General for value: General
        /// </summary>
        General = 1,

        /// <summary>
        /// Enum Abbreviated for value: Abbreviated
        /// </summary>
        Abbreviated = 2,

        /// <summary>
        /// Enum DefaultCurrency for value: DefaultCurrency
        /// </summary>
        DefaultCurrency = 3,

        /// <summary>
        /// Enum DefaultCurrencyWithDecimals for value: DefaultCurrencyWithDecimals
        /// </summary>
        DefaultCurrencyWithDecimals = 4,

        /// <summary>
        /// Enum AbbreviatedDefaultCurrency for value: AbbreviatedDefaultCurrency
        /// </summary>
        AbbreviatedDefaultCurrency = 5,

        /// <summary>
        /// Enum Percent for value: Percent
        /// </summary>
        Percent = 6,

        /// <summary>
        /// Enum PercentWithDecimals for value: PercentWithDecimals
        /// </summary>
        PercentWithDecimals = 7

    }

    public class KpiValueFormatConverter : JsonConverter<KpiValueFormat>
    {
        public static KpiValueFormat FromString(string value)
        {
            if (value == "General")
                return KpiValueFormat.General;

            if (value == "Abbreviated")
                return KpiValueFormat.Abbreviated;

            if (value == "DefaultCurrency")
                return KpiValueFormat.DefaultCurrency;

            if (value == "DefaultCurrencyWithDecimals")
                return KpiValueFormat.DefaultCurrencyWithDecimals;

            if (value == "AbbreviatedDefaultCurrency")
                return KpiValueFormat.AbbreviatedDefaultCurrency;

            if (value == "Percent")
                return KpiValueFormat.Percent;

            if (value == "PercentWithDecimals")
                return KpiValueFormat.PercentWithDecimals;

            throw new NotImplementedException($"Could not convert value to type KpiValueFormat: '{value}'");
        }

        public static KpiValueFormat? FromStringOrDefault(string value)
        {
            if (value == "General")
                return KpiValueFormat.General;

            if (value == "Abbreviated")
                return KpiValueFormat.Abbreviated;

            if (value == "DefaultCurrency")
                return KpiValueFormat.DefaultCurrency;

            if (value == "DefaultCurrencyWithDecimals")
                return KpiValueFormat.DefaultCurrencyWithDecimals;

            if (value == "AbbreviatedDefaultCurrency")
                return KpiValueFormat.AbbreviatedDefaultCurrency;

            if (value == "Percent")
                return KpiValueFormat.Percent;

            if (value == "PercentWithDecimals")
                return KpiValueFormat.PercentWithDecimals;

            return null;
        }

        public static string ToJsonValue(KpiValueFormat value)
        {
            if (value == KpiValueFormat.General)
                return "General";

            if (value == KpiValueFormat.Abbreviated)
                return "Abbreviated";

            if (value == KpiValueFormat.DefaultCurrency)
                return "DefaultCurrency";

            if (value == KpiValueFormat.DefaultCurrencyWithDecimals)
                return "DefaultCurrencyWithDecimals";

            if (value == KpiValueFormat.AbbreviatedDefaultCurrency)
                return "AbbreviatedDefaultCurrency";

            if (value == KpiValueFormat.Percent)
                return "Percent";

            if (value == KpiValueFormat.PercentWithDecimals)
                return "PercentWithDecimals";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KpiValueFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            KpiValueFormat? result = KpiValueFormatConverter.FromString(rawValue);
            
            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the KpiValueFormat to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kpiValueFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KpiValueFormat kpiValueFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kpiValueFormat.ToString());
        }
    }

    public class KpiValueFormatNullableConverter : JsonConverter<KpiValueFormat?>
    {
        /// <summary>
        /// Returns a KpiValueFormat from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KpiValueFormat? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            if (rawValue == null)
                return null;

            KpiValueFormat? result = KpiValueFormatConverter.FromString(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kpiValueFormat"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KpiValueFormat? kpiValueFormat, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kpiValueFormat?.ToString() ?? "null");
        }
    }

}
