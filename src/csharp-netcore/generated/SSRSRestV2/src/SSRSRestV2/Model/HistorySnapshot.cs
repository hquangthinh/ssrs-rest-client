// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that contains history snapshot information.
    /// </summary>
    public partial class HistorySnapshot : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HistorySnapshot" /> class.
        /// </summary>
        /// <param name="creationDate">A string that contains the date-time of the creation of the HistorySnapshot.</param>
        /// <param name="historyId">A string that contains the date-time of the execution of the HistorySnapshot. This, together with the Id of the CatalogItem, identifies this HistorySnapshot</param>
        /// <param name="id">A unique UUID value that specifies the identifier of the CatalogItem for which this is a HistorySnapshot.</param>
        /// <param name="size">Size of the HistorySnapshot.</param>
        [JsonConstructor]
        public HistorySnapshot(DateTime creationDate, string historyId, Guid id, int size)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException("id is a required property for HistorySnapshot and cannot be null.");

            if (historyId == null)
                throw new ArgumentNullException("historyId is a required property for HistorySnapshot and cannot be null.");

            if (creationDate == null)
                throw new ArgumentNullException("creationDate is a required property for HistorySnapshot and cannot be null.");

            if (size == null)
                throw new ArgumentNullException("size is a required property for HistorySnapshot and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            CreationDate = creationDate;
            HistoryId = historyId;
            Id = id;
            Size = size;
        }

        /// <summary>
        /// A string that contains the date-time of the creation of the HistorySnapshot.
        /// </summary>
        /// <value>A string that contains the date-time of the creation of the HistorySnapshot.</value>
        [JsonPropertyName("CreationDate")]
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// A string that contains the date-time of the execution of the HistorySnapshot. This, together with the Id of the CatalogItem, identifies this HistorySnapshot
        /// </summary>
        /// <value>A string that contains the date-time of the execution of the HistorySnapshot. This, together with the Id of the CatalogItem, identifies this HistorySnapshot</value>
        [JsonPropertyName("HistoryId")]
        public string HistoryId { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier of the CatalogItem for which this is a HistorySnapshot.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier of the CatalogItem for which this is a HistorySnapshot.</value>
        [JsonPropertyName("Id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Size of the HistorySnapshot.
        /// </summary>
        /// <value>Size of the HistorySnapshot.</value>
        [JsonPropertyName("Size")]
        public int Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HistorySnapshot {\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  HistoryId: ").Append(HistoryId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type HistorySnapshot
    /// </summary>
    public class HistorySnapshotJsonConverter : JsonConverter<HistorySnapshot>
    {
        /// <summary>
        /// The format to use to serialize CreationDate
        /// </summary>
        public static string CreationDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HistorySnapshot Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            DateTime creationDate = default;
            string historyId = default;
            Guid id = default;
            int size = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "CreationDate":
                            creationDate = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "HistoryId":
                            historyId = utf8JsonReader.GetString();
                            break;
                        case "Id":
                            id = utf8JsonReader.GetGuid();
                            break;
                        case "Size":
                            size = utf8JsonReader.GetInt32();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new HistorySnapshot(creationDate, historyId, id, size);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="historySnapshot"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HistorySnapshot historySnapshot, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("CreationDate", historySnapshot.CreationDate.ToString(CreationDateFormat));
            writer.WriteString("HistoryId", historySnapshot.HistoryId);
            writer.WriteString("Id", historySnapshot.Id);
            writer.WriteNumber("Size", historySnapshot.Size);

            writer.WriteEndObject();
        }
    }
}
