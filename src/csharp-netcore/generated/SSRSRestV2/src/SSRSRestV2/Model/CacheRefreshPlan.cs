// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that specifies a plan for data cache refresh. The plan can be stored and re-used by multiple CatalogItems.
    /// </summary>
    public partial class CacheRefreshPlan : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CacheRefreshPlan" /> class.
        /// </summary>
        /// <param name="catalogItemPath">A string value that contains the fully qualified URL path location of the CatalogItem that represents the CacheRefreshPlan.</param>
        /// <param name="description">A string value that contains descriptive text about the CacheRefreshPlan.</param>
        /// <param name="eventType">A string value that specifies which EventType to use for logging.</param>
        /// <param name="id">A unique UUID value that specifies the identifier by which this CacheRefreshPlan can be referenced in the definition of other items.</param>
        /// <param name="lastRunTime">A date-time value that specifies the date-time of the last run of the CacheRefreshPlan.</param>
        /// <param name="lastStatus">A string value that contains the network username of the last user to modify the CacheRefreshPlan.</param>
        /// <param name="modifiedBy">A string value that contains the network user name of the last user to modify the CacheRefreshPlan</param>
        /// <param name="modifiedDate">A string value that contains the date-time of the last modification to the CacheRefreshPlan.</param>
        /// <param name="owner">A string value that specifies the owner of the CacheRefreshPlan.</param>
        /// <param name="parameterValues">An array of parameter values for the CacheRefreshPlan. All parameters without a default value MUST have a value specified.</param>
        /// <param name="schedule">schedule</param>
        [JsonConstructor]
        public CacheRefreshPlan(string catalogItemPath, string description, string eventType, Guid id, DateTime lastRunTime, string lastStatus, string modifiedBy, DateTime modifiedDate, string owner, List<ParameterValue> parameterValues, ScheduleReference schedule)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException("id is a required property for CacheRefreshPlan and cannot be null.");

            if (owner == null)
                throw new ArgumentNullException("owner is a required property for CacheRefreshPlan and cannot be null.");

            if (description == null)
                throw new ArgumentNullException("description is a required property for CacheRefreshPlan and cannot be null.");

            if (catalogItemPath == null)
                throw new ArgumentNullException("catalogItemPath is a required property for CacheRefreshPlan and cannot be null.");

            if (eventType == null)
                throw new ArgumentNullException("eventType is a required property for CacheRefreshPlan and cannot be null.");

            if (schedule == null)
                throw new ArgumentNullException("schedule is a required property for CacheRefreshPlan and cannot be null.");

            if (lastRunTime == null)
                throw new ArgumentNullException("lastRunTime is a required property for CacheRefreshPlan and cannot be null.");

            if (lastStatus == null)
                throw new ArgumentNullException("lastStatus is a required property for CacheRefreshPlan and cannot be null.");

            if (modifiedBy == null)
                throw new ArgumentNullException("modifiedBy is a required property for CacheRefreshPlan and cannot be null.");

            if (modifiedDate == null)
                throw new ArgumentNullException("modifiedDate is a required property for CacheRefreshPlan and cannot be null.");

            if (parameterValues == null)
                throw new ArgumentNullException("parameterValues is a required property for CacheRefreshPlan and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            CatalogItemPath = catalogItemPath;
            Description = description;
            EventType = eventType;
            Id = id;
            LastRunTime = lastRunTime;
            LastStatus = lastStatus;
            ModifiedBy = modifiedBy;
            ModifiedDate = modifiedDate;
            Owner = owner;
            ParameterValues = parameterValues;
            Schedule = schedule;
        }

        /// <summary>
        /// A string value that contains the fully qualified URL path location of the CatalogItem that represents the CacheRefreshPlan.
        /// </summary>
        /// <value>A string value that contains the fully qualified URL path location of the CatalogItem that represents the CacheRefreshPlan.</value>
        [JsonPropertyName("CatalogItemPath")]
        public string CatalogItemPath { get; set; }

        /// <summary>
        /// A string value that contains descriptive text about the CacheRefreshPlan.
        /// </summary>
        /// <value>A string value that contains descriptive text about the CacheRefreshPlan.</value>
        [JsonPropertyName("Description")]
        public string Description { get; set; }

        /// <summary>
        /// A string value that specifies which EventType to use for logging.
        /// </summary>
        /// <value>A string value that specifies which EventType to use for logging.</value>
        [JsonPropertyName("EventType")]
        public string EventType { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier by which this CacheRefreshPlan can be referenced in the definition of other items.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier by which this CacheRefreshPlan can be referenced in the definition of other items.</value>
        [JsonPropertyName("Id")]
        public Guid Id { get; set; }

        /// <summary>
        /// A date-time value that specifies the date-time of the last run of the CacheRefreshPlan.
        /// </summary>
        /// <value>A date-time value that specifies the date-time of the last run of the CacheRefreshPlan.</value>
        [JsonPropertyName("LastRunTime")]
        public DateTime LastRunTime { get; set; }

        /// <summary>
        /// A string value that contains the network username of the last user to modify the CacheRefreshPlan.
        /// </summary>
        /// <value>A string value that contains the network username of the last user to modify the CacheRefreshPlan.</value>
        [JsonPropertyName("LastStatus")]
        public string LastStatus { get; set; }

        /// <summary>
        /// A string value that contains the network user name of the last user to modify the CacheRefreshPlan
        /// </summary>
        /// <value>A string value that contains the network user name of the last user to modify the CacheRefreshPlan</value>
        [JsonPropertyName("ModifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// A string value that contains the date-time of the last modification to the CacheRefreshPlan.
        /// </summary>
        /// <value>A string value that contains the date-time of the last modification to the CacheRefreshPlan.</value>
        [JsonPropertyName("ModifiedDate")]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// A string value that specifies the owner of the CacheRefreshPlan.
        /// </summary>
        /// <value>A string value that specifies the owner of the CacheRefreshPlan.</value>
        [JsonPropertyName("Owner")]
        public string Owner { get; set; }

        /// <summary>
        /// An array of parameter values for the CacheRefreshPlan. All parameters without a default value MUST have a value specified.
        /// </summary>
        /// <value>An array of parameter values for the CacheRefreshPlan. All parameters without a default value MUST have a value specified.</value>
        [JsonPropertyName("ParameterValues")]
        public List<ParameterValue> ParameterValues { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [JsonPropertyName("Schedule")]
        public ScheduleReference Schedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CacheRefreshPlan {\n");
            sb.Append("  CatalogItemPath: ").Append(CatalogItemPath).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastRunTime: ").Append(LastRunTime).Append("\n");
            sb.Append("  LastStatus: ").Append(LastStatus).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  ParameterValues: ").Append(ParameterValues).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type CacheRefreshPlan
    /// </summary>
    public class CacheRefreshPlanJsonConverter : JsonConverter<CacheRefreshPlan>
    {
        /// <summary>
        /// The format to use to serialize LastRunTime
        /// </summary>
        public static string LastRunTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedDate
        /// </summary>
        public static string ModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CacheRefreshPlan Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string catalogItemPath = default;
            string description = default;
            string eventType = default;
            Guid id = default;
            DateTime lastRunTime = default;
            string lastStatus = default;
            string modifiedBy = default;
            DateTime modifiedDate = default;
            string owner = default;
            List<ParameterValue> parameterValues = default;
            ScheduleReference schedule = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "CatalogItemPath":
                            catalogItemPath = utf8JsonReader.GetString();
                            break;
                        case "Description":
                            description = utf8JsonReader.GetString();
                            break;
                        case "EventType":
                            eventType = utf8JsonReader.GetString();
                            break;
                        case "Id":
                            id = utf8JsonReader.GetGuid();
                            break;
                        case "LastRunTime":
                            lastRunTime = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "LastStatus":
                            lastStatus = utf8JsonReader.GetString();
                            break;
                        case "ModifiedBy":
                            modifiedBy = utf8JsonReader.GetString();
                            break;
                        case "ModifiedDate":
                            modifiedDate = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Owner":
                            owner = utf8JsonReader.GetString();
                            break;
                        case "ParameterValues":
                            parameterValues = JsonSerializer.Deserialize<List<ParameterValue>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Schedule":
                            schedule = JsonSerializer.Deserialize<ScheduleReference>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            return new CacheRefreshPlan(catalogItemPath, description, eventType, id, lastRunTime, lastStatus, modifiedBy, modifiedDate, owner, parameterValues, schedule);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="cacheRefreshPlan"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CacheRefreshPlan cacheRefreshPlan, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("CatalogItemPath", cacheRefreshPlan.CatalogItemPath);
            writer.WriteString("Description", cacheRefreshPlan.Description);
            writer.WriteString("EventType", cacheRefreshPlan.EventType);
            writer.WriteString("Id", cacheRefreshPlan.Id);
            writer.WriteString("LastRunTime", cacheRefreshPlan.LastRunTime.ToString(LastRunTimeFormat));
            writer.WriteString("LastStatus", cacheRefreshPlan.LastStatus);
            writer.WriteString("ModifiedBy", cacheRefreshPlan.ModifiedBy);
            writer.WriteString("ModifiedDate", cacheRefreshPlan.ModifiedDate.ToString(ModifiedDateFormat));
            writer.WriteString("Owner", cacheRefreshPlan.Owner);
            writer.WritePropertyName("ParameterValues");
            JsonSerializer.Serialize(writer, cacheRefreshPlan.ParameterValues, jsonSerializerOptions);
            writer.WritePropertyName("Schedule");
            JsonSerializer.Serialize(writer, cacheRefreshPlan.Schedule, jsonSerializerOptions);

            writer.WriteEndObject();
        }
    }
}
