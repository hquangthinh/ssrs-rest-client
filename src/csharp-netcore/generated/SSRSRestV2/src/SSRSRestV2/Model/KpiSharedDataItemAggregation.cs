// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An enumeration of values that specify the available aggregations for KPIs.
    /// </summary>
    /// <value>An enumeration of values that specify the available aggregations for KPIs.</value>
    public enum KpiSharedDataItemAggregation
    {
        /// <summary>
        /// Enum None for value: None
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum First for value: First
        /// </summary>
        First = 2,

        /// <summary>
        /// Enum Last for value: Last
        /// </summary>
        Last = 3,

        /// <summary>
        /// Enum Min for value: Min
        /// </summary>
        Min = 4,

        /// <summary>
        /// Enum Max for value: Max
        /// </summary>
        Max = 5,

        /// <summary>
        /// Enum Average for value: Average
        /// </summary>
        Average = 6,

        /// <summary>
        /// Enum Sum for value: Sum
        /// </summary>
        Sum = 7

    }

    public class KpiSharedDataItemAggregationConverter : JsonConverter<KpiSharedDataItemAggregation>
    {
        public static KpiSharedDataItemAggregation FromString(string value)
        {
            if (value == "None")
                return KpiSharedDataItemAggregation.None;

            if (value == "First")
                return KpiSharedDataItemAggregation.First;

            if (value == "Last")
                return KpiSharedDataItemAggregation.Last;

            if (value == "Min")
                return KpiSharedDataItemAggregation.Min;

            if (value == "Max")
                return KpiSharedDataItemAggregation.Max;

            if (value == "Average")
                return KpiSharedDataItemAggregation.Average;

            if (value == "Sum")
                return KpiSharedDataItemAggregation.Sum;

            throw new NotImplementedException($"Could not convert value to type KpiSharedDataItemAggregation: '{value}'");
        }

        public static KpiSharedDataItemAggregation? FromStringOrDefault(string value)
        {
            if (value == "None")
                return KpiSharedDataItemAggregation.None;

            if (value == "First")
                return KpiSharedDataItemAggregation.First;

            if (value == "Last")
                return KpiSharedDataItemAggregation.Last;

            if (value == "Min")
                return KpiSharedDataItemAggregation.Min;

            if (value == "Max")
                return KpiSharedDataItemAggregation.Max;

            if (value == "Average")
                return KpiSharedDataItemAggregation.Average;

            if (value == "Sum")
                return KpiSharedDataItemAggregation.Sum;

            return null;
        }

        public static string ToJsonValue(KpiSharedDataItemAggregation value)
        {
            if (value == KpiSharedDataItemAggregation.None)
                return "None";

            if (value == KpiSharedDataItemAggregation.First)
                return "First";

            if (value == KpiSharedDataItemAggregation.Last)
                return "Last";

            if (value == KpiSharedDataItemAggregation.Min)
                return "Min";

            if (value == KpiSharedDataItemAggregation.Max)
                return "Max";

            if (value == KpiSharedDataItemAggregation.Average)
                return "Average";

            if (value == KpiSharedDataItemAggregation.Sum)
                return "Sum";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KpiSharedDataItemAggregation Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            KpiSharedDataItemAggregation? result = KpiSharedDataItemAggregationConverter.FromString(rawValue);
            
            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the KpiSharedDataItemAggregation to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kpiSharedDataItemAggregation"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KpiSharedDataItemAggregation kpiSharedDataItemAggregation, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kpiSharedDataItemAggregation.ToString());
        }
    }

    public class KpiSharedDataItemAggregationNullableConverter : JsonConverter<KpiSharedDataItemAggregation?>
    {
        /// <summary>
        /// Returns a KpiSharedDataItemAggregation from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override KpiSharedDataItemAggregation? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            if (rawValue == null)
                return null;

            KpiSharedDataItemAggregation? result = KpiSharedDataItemAggregationConverter.FromString(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="kpiSharedDataItemAggregation"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, KpiSharedDataItemAggregation? kpiSharedDataItemAggregation, JsonSerializerOptions options)
        {
            writer.WriteStringValue(kpiSharedDataItemAggregation?.ToString() ?? "null");
        }
    }

}
