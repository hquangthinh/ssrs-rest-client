// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// Describes the week of the month on which a scheduled report runs.
    /// </summary>
    /// <value>Describes the week of the month on which a scheduled report runs.</value>
    public enum WeekNumberEnum
    {
        /// <summary>
        /// Enum FirstWeek for value: FirstWeek
        /// </summary>
        FirstWeek = 1,

        /// <summary>
        /// Enum SecondWeek for value: SecondWeek
        /// </summary>
        SecondWeek = 2,

        /// <summary>
        /// Enum ThirdWeek for value: ThirdWeek
        /// </summary>
        ThirdWeek = 3,

        /// <summary>
        /// Enum FourthWeek for value: FourthWeek
        /// </summary>
        FourthWeek = 4,

        /// <summary>
        /// Enum LastWeek for value: LastWeek
        /// </summary>
        LastWeek = 5

    }

    public class WeekNumberEnumConverter : JsonConverter<WeekNumberEnum>
    {
        public static WeekNumberEnum FromString(string value)
        {
            if (value == "FirstWeek")
                return WeekNumberEnum.FirstWeek;

            if (value == "SecondWeek")
                return WeekNumberEnum.SecondWeek;

            if (value == "ThirdWeek")
                return WeekNumberEnum.ThirdWeek;

            if (value == "FourthWeek")
                return WeekNumberEnum.FourthWeek;

            if (value == "LastWeek")
                return WeekNumberEnum.LastWeek;

            throw new NotImplementedException($"Could not convert value to type WeekNumberEnum: '{value}'");
        }

        public static WeekNumberEnum? FromStringOrDefault(string value)
        {
            if (value == "FirstWeek")
                return WeekNumberEnum.FirstWeek;

            if (value == "SecondWeek")
                return WeekNumberEnum.SecondWeek;

            if (value == "ThirdWeek")
                return WeekNumberEnum.ThirdWeek;

            if (value == "FourthWeek")
                return WeekNumberEnum.FourthWeek;

            if (value == "LastWeek")
                return WeekNumberEnum.LastWeek;

            return null;
        }

        public static string ToJsonValue(WeekNumberEnum value)
        {
            if (value == WeekNumberEnum.FirstWeek)
                return "FirstWeek";

            if (value == WeekNumberEnum.SecondWeek)
                return "SecondWeek";

            if (value == WeekNumberEnum.ThirdWeek)
                return "ThirdWeek";

            if (value == WeekNumberEnum.FourthWeek)
                return "FourthWeek";

            if (value == WeekNumberEnum.LastWeek)
                return "LastWeek";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WeekNumberEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            WeekNumberEnum? result = WeekNumberEnumConverter.FromString(rawValue);
            
            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the WeekNumberEnum to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="weekNumberEnum"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WeekNumberEnum weekNumberEnum, JsonSerializerOptions options)
        {
            writer.WriteStringValue(weekNumberEnum.ToString());
        }
    }

    public class WeekNumberEnumNullableConverter : JsonConverter<WeekNumberEnum?>
    {
        /// <summary>
        /// Returns a WeekNumberEnum from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WeekNumberEnum? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string rawValue = reader.GetString();

            if (rawValue == null)
                return null;

            WeekNumberEnum? result = WeekNumberEnumConverter.FromString(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="weekNumberEnum"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WeekNumberEnum? weekNumberEnum, JsonSerializerOptions options)
        {
            writer.WriteStringValue(weekNumberEnum?.ToString() ?? "null");
        }
    }

}
