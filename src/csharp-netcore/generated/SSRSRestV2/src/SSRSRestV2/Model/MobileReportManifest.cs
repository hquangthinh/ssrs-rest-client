// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that contains the specification of the contents of a mobile report.
    /// </summary>
    public partial class MobileReportManifest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MobileReportManifest" /> class.
        /// </summary>
        /// <param name="dataSets">An array of objects of type DataSetItem that specifies the DataSets referenced in this MobileReport.</param>
        /// <param name="resources">An array of items of type ResourceGroup that specify the resources referenced in this MobileReport. A Resource is a generalized object and its content type is undefined.  A client must be able to understand the content returned in the Resource.</param>
        /// <param name="thumbnails">An array of items of type ThumbnailItem that contains the Thumbnails associated with the MobileReport.</param>
        [JsonConstructor]
        public MobileReportManifest(List<DataSetItem> dataSets, List<ResourceGroup> resources, List<ThumbnailItem> thumbnails)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (resources == null)
                throw new ArgumentNullException("resources is a required property for MobileReportManifest and cannot be null.");

            if (dataSets == null)
                throw new ArgumentNullException("dataSets is a required property for MobileReportManifest and cannot be null.");

            if (thumbnails == null)
                throw new ArgumentNullException("thumbnails is a required property for MobileReportManifest and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            DataSets = dataSets;
            Resources = resources;
            Thumbnails = thumbnails;
        }

        /// <summary>
        /// An array of objects of type DataSetItem that specifies the DataSets referenced in this MobileReport.
        /// </summary>
        /// <value>An array of objects of type DataSetItem that specifies the DataSets referenced in this MobileReport.</value>
        [JsonPropertyName("DataSets")]
        public List<DataSetItem> DataSets { get; set; }

        /// <summary>
        /// An array of items of type ResourceGroup that specify the resources referenced in this MobileReport. A Resource is a generalized object and its content type is undefined.  A client must be able to understand the content returned in the Resource.
        /// </summary>
        /// <value>An array of items of type ResourceGroup that specify the resources referenced in this MobileReport. A Resource is a generalized object and its content type is undefined.  A client must be able to understand the content returned in the Resource.</value>
        [JsonPropertyName("Resources")]
        public List<ResourceGroup> Resources { get; set; }

        /// <summary>
        /// An array of items of type ThumbnailItem that contains the Thumbnails associated with the MobileReport.
        /// </summary>
        /// <value>An array of items of type ThumbnailItem that contains the Thumbnails associated with the MobileReport.</value>
        [JsonPropertyName("Thumbnails")]
        public List<ThumbnailItem> Thumbnails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MobileReportManifest {\n");
            sb.Append("  DataSets: ").Append(DataSets).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type MobileReportManifest
    /// </summary>
    public class MobileReportManifestJsonConverter : JsonConverter<MobileReportManifest>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MobileReportManifest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            List<DataSetItem> dataSets = default;
            List<ResourceGroup> resources = default;
            List<ThumbnailItem> thumbnails = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "DataSets":
                            dataSets = JsonSerializer.Deserialize<List<DataSetItem>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Resources":
                            resources = JsonSerializer.Deserialize<List<ResourceGroup>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Thumbnails":
                            thumbnails = JsonSerializer.Deserialize<List<ThumbnailItem>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MobileReportManifest(dataSets, resources, thumbnails);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="mobileReportManifest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MobileReportManifest mobileReportManifest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WritePropertyName("DataSets");
            JsonSerializer.Serialize(writer, mobileReportManifest.DataSets, jsonSerializerOptions);
            writer.WritePropertyName("Resources");
            JsonSerializer.Serialize(writer, mobileReportManifest.Resources, jsonSerializerOptions);
            writer.WritePropertyName("Thumbnails");
            JsonSerializer.Serialize(writer, mobileReportManifest.Thumbnails, jsonSerializerOptions);

            writer.WriteEndObject();
        }
    }
}
