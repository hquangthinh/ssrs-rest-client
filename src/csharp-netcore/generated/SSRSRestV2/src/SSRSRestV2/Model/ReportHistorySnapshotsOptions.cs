// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that specifies options for a Report HistorySnapshot.
    /// </summary>
    public partial class ReportHistorySnapshotsOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportHistorySnapshotsOptions" /> class.
        /// </summary>
        /// <param name="keepExecutionSnapshots">A Boolean value that specifies whether execution snapshots are kept.</param>
        /// <param name="manualCreationEnabled">A boolean value that specifies whether manual snapshot creation is enabled for this HistorySnapshot.</param>
        /// <param name="schedule">schedule</param>
        /// <param name="scopedLimit">An Int32 value indicating how many snapshots to keep.</param>
        /// <param name="systemLimit">An Int32 value indicating how many snapshots can be kept systemwide.  Default (-1) is unlimited.</param>
        /// <param name="useDefaultSystemLimit">A boolean value that specifies whether the default system limit is used for this HistorySnapshot.</param>
        [JsonConstructor]
        public ReportHistorySnapshotsOptions(bool keepExecutionSnapshots, bool manualCreationEnabled, ReportHistorySnapshotsOptionsSchedule schedule, int scopedLimit, int systemLimit, bool useDefaultSystemLimit)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (manualCreationEnabled == null)
                throw new ArgumentNullException("manualCreationEnabled is a required property for ReportHistorySnapshotsOptions and cannot be null.");

            if (keepExecutionSnapshots == null)
                throw new ArgumentNullException("keepExecutionSnapshots is a required property for ReportHistorySnapshotsOptions and cannot be null.");

            if (useDefaultSystemLimit == null)
                throw new ArgumentNullException("useDefaultSystemLimit is a required property for ReportHistorySnapshotsOptions and cannot be null.");

            if (scopedLimit == null)
                throw new ArgumentNullException("scopedLimit is a required property for ReportHistorySnapshotsOptions and cannot be null.");

            if (systemLimit == null)
                throw new ArgumentNullException("systemLimit is a required property for ReportHistorySnapshotsOptions and cannot be null.");

            if (schedule == null)
                throw new ArgumentNullException("schedule is a required property for ReportHistorySnapshotsOptions and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            KeepExecutionSnapshots = keepExecutionSnapshots;
            ManualCreationEnabled = manualCreationEnabled;
            Schedule = schedule;
            ScopedLimit = scopedLimit;
            SystemLimit = systemLimit;
            UseDefaultSystemLimit = useDefaultSystemLimit;
        }

        /// <summary>
        /// A Boolean value that specifies whether execution snapshots are kept.
        /// </summary>
        /// <value>A Boolean value that specifies whether execution snapshots are kept.</value>
        [JsonPropertyName("KeepExecutionSnapshots")]
        public bool KeepExecutionSnapshots { get; set; }

        /// <summary>
        /// A boolean value that specifies whether manual snapshot creation is enabled for this HistorySnapshot.
        /// </summary>
        /// <value>A boolean value that specifies whether manual snapshot creation is enabled for this HistorySnapshot.</value>
        [JsonPropertyName("ManualCreationEnabled")]
        public bool ManualCreationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [JsonPropertyName("Schedule")]
        public ReportHistorySnapshotsOptionsSchedule Schedule { get; set; }

        /// <summary>
        /// An Int32 value indicating how many snapshots to keep.
        /// </summary>
        /// <value>An Int32 value indicating how many snapshots to keep.</value>
        [JsonPropertyName("ScopedLimit")]
        public int ScopedLimit { get; set; }

        /// <summary>
        /// An Int32 value indicating how many snapshots can be kept systemwide.  Default (-1) is unlimited.
        /// </summary>
        /// <value>An Int32 value indicating how many snapshots can be kept systemwide.  Default (-1) is unlimited.</value>
        [JsonPropertyName("SystemLimit")]
        public int SystemLimit { get; set; }

        /// <summary>
        /// A boolean value that specifies whether the default system limit is used for this HistorySnapshot.
        /// </summary>
        /// <value>A boolean value that specifies whether the default system limit is used for this HistorySnapshot.</value>
        [JsonPropertyName("UseDefaultSystemLimit")]
        public bool UseDefaultSystemLimit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportHistorySnapshotsOptions {\n");
            sb.Append("  KeepExecutionSnapshots: ").Append(KeepExecutionSnapshots).Append("\n");
            sb.Append("  ManualCreationEnabled: ").Append(ManualCreationEnabled).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  ScopedLimit: ").Append(ScopedLimit).Append("\n");
            sb.Append("  SystemLimit: ").Append(SystemLimit).Append("\n");
            sb.Append("  UseDefaultSystemLimit: ").Append(UseDefaultSystemLimit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type ReportHistorySnapshotsOptions
    /// </summary>
    public class ReportHistorySnapshotsOptionsJsonConverter : JsonConverter<ReportHistorySnapshotsOptions>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReportHistorySnapshotsOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            bool keepExecutionSnapshots = default;
            bool manualCreationEnabled = default;
            ReportHistorySnapshotsOptionsSchedule schedule = default;
            int scopedLimit = default;
            int systemLimit = default;
            bool useDefaultSystemLimit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "KeepExecutionSnapshots":
                            keepExecutionSnapshots = utf8JsonReader.GetBoolean();
                            break;
                        case "ManualCreationEnabled":
                            manualCreationEnabled = utf8JsonReader.GetBoolean();
                            break;
                        case "Schedule":
                            schedule = JsonSerializer.Deserialize<ReportHistorySnapshotsOptionsSchedule>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "ScopedLimit":
                            scopedLimit = utf8JsonReader.GetInt32();
                            break;
                        case "SystemLimit":
                            systemLimit = utf8JsonReader.GetInt32();
                            break;
                        case "UseDefaultSystemLimit":
                            useDefaultSystemLimit = utf8JsonReader.GetBoolean();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReportHistorySnapshotsOptions(keepExecutionSnapshots, manualCreationEnabled, schedule, scopedLimit, systemLimit, useDefaultSystemLimit);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportHistorySnapshotsOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReportHistorySnapshotsOptions reportHistorySnapshotsOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteBoolean("KeepExecutionSnapshots", reportHistorySnapshotsOptions.KeepExecutionSnapshots);
            writer.WriteBoolean("ManualCreationEnabled", reportHistorySnapshotsOptions.ManualCreationEnabled);
            writer.WritePropertyName("Schedule");
            JsonSerializer.Serialize(writer, reportHistorySnapshotsOptions.Schedule, jsonSerializerOptions);
            writer.WriteNumber("ScopedLimit", reportHistorySnapshotsOptions.ScopedLimit);
            writer.WriteNumber("SystemLimit", reportHistorySnapshotsOptions.SystemLimit);
            writer.WriteBoolean("UseDefaultSystemLimit", reportHistorySnapshotsOptions.UseDefaultSystemLimit);

            writer.WriteEndObject();
        }
    }
}
