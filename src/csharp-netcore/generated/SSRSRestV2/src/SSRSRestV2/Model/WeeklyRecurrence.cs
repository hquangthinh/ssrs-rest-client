// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// Represents the intervals at which a scheduled report runs. Intervals are specified in weeks and on which days of the week.
    /// </summary>
    public partial class WeeklyRecurrence : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WeeklyRecurrence" /> class.
        /// </summary>
        /// <param name="daysOfWeek">daysOfWeek</param>
        /// <param name="weeksInterval">An Int32 value representing interval in weeks.</param>
        /// <param name="weeksIntervalSpecified">True if using WeeksInterval.</param>
        [JsonConstructor]
        public WeeklyRecurrence(DaysOfWeekSelector daysOfWeek, int weeksInterval, bool weeksIntervalSpecified)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (weeksInterval == null)
                throw new ArgumentNullException("weeksInterval is a required property for WeeklyRecurrence and cannot be null.");

            if (weeksIntervalSpecified == null)
                throw new ArgumentNullException("weeksIntervalSpecified is a required property for WeeklyRecurrence and cannot be null.");

            if (daysOfWeek == null)
                throw new ArgumentNullException("daysOfWeek is a required property for WeeklyRecurrence and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            DaysOfWeek = daysOfWeek;
            WeeksInterval = weeksInterval;
            WeeksIntervalSpecified = weeksIntervalSpecified;
        }

        /// <summary>
        /// Gets or Sets DaysOfWeek
        /// </summary>
        [JsonPropertyName("DaysOfWeek")]
        public DaysOfWeekSelector DaysOfWeek { get; set; }

        /// <summary>
        /// An Int32 value representing interval in weeks.
        /// </summary>
        /// <value>An Int32 value representing interval in weeks.</value>
        [JsonPropertyName("WeeksInterval")]
        public int WeeksInterval { get; set; }

        /// <summary>
        /// True if using WeeksInterval.
        /// </summary>
        /// <value>True if using WeeksInterval.</value>
        [JsonPropertyName("WeeksIntervalSpecified")]
        public bool WeeksIntervalSpecified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WeeklyRecurrence {\n");
            sb.Append("  DaysOfWeek: ").Append(DaysOfWeek).Append("\n");
            sb.Append("  WeeksInterval: ").Append(WeeksInterval).Append("\n");
            sb.Append("  WeeksIntervalSpecified: ").Append(WeeksIntervalSpecified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type WeeklyRecurrence
    /// </summary>
    public class WeeklyRecurrenceJsonConverter : JsonConverter<WeeklyRecurrence>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WeeklyRecurrence Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            DaysOfWeekSelector daysOfWeek = default;
            int weeksInterval = default;
            bool weeksIntervalSpecified = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "DaysOfWeek":
                            daysOfWeek = JsonSerializer.Deserialize<DaysOfWeekSelector>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "WeeksInterval":
                            weeksInterval = utf8JsonReader.GetInt32();
                            break;
                        case "WeeksIntervalSpecified":
                            weeksIntervalSpecified = utf8JsonReader.GetBoolean();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new WeeklyRecurrence(daysOfWeek, weeksInterval, weeksIntervalSpecified);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="weeklyRecurrence"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WeeklyRecurrence weeklyRecurrence, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WritePropertyName("DaysOfWeek");
            JsonSerializer.Serialize(writer, weeklyRecurrence.DaysOfWeek, jsonSerializerOptions);
            writer.WriteNumber("WeeksInterval", weeklyRecurrence.WeeksInterval);
            writer.WriteBoolean("WeeksIntervalSpecified", weeklyRecurrence.WeeksIntervalSpecified);

            writer.WriteEndObject();
        }
    }
}
