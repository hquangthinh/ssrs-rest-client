// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// MoveItemsRequest
    /// </summary>
    public partial class MoveItemsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoveItemsRequest" /> class.
        /// </summary>
        /// <param name="catalogItemPaths">catalogItemPaths</param>
        /// <param name="targetPath">targetPath</param>
        [JsonConstructor]
        public MoveItemsRequest(List<string> catalogItemPaths, string targetPath)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (catalogItemPaths == null)
                throw new ArgumentNullException("catalogItemPaths is a required property for MoveItemsRequest and cannot be null.");

            if (targetPath == null)
                throw new ArgumentNullException("targetPath is a required property for MoveItemsRequest and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            CatalogItemPaths = catalogItemPaths;
            TargetPath = targetPath;
        }

        /// <summary>
        /// Gets or Sets CatalogItemPaths
        /// </summary>
        [JsonPropertyName("CatalogItemPaths")]
        public List<string> CatalogItemPaths { get; set; }

        /// <summary>
        /// Gets or Sets TargetPath
        /// </summary>
        [JsonPropertyName("TargetPath")]
        public string TargetPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoveItemsRequest {\n");
            sb.Append("  CatalogItemPaths: ").Append(CatalogItemPaths).Append("\n");
            sb.Append("  TargetPath: ").Append(TargetPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type MoveItemsRequest
    /// </summary>
    public class MoveItemsRequestJsonConverter : JsonConverter<MoveItemsRequest>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoveItemsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            List<string> catalogItemPaths = default;
            string targetPath = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "CatalogItemPaths":
                            catalogItemPaths = JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "TargetPath":
                            targetPath = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MoveItemsRequest(catalogItemPaths, targetPath);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moveItemsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoveItemsRequest moveItemsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WritePropertyName("CatalogItemPaths");
            JsonSerializer.Serialize(writer, moveItemsRequest.CatalogItemPaths, jsonSerializerOptions);
            writer.WriteString("TargetPath", moveItemsRequest.TargetPath);

            writer.WriteEndObject();
        }
    }
}
