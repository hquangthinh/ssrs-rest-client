// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that defines a subscription. A Reporting Services subscription allows a user to subscribe to a Report or Data Source and then to automatically receive an update whenever the item is updated.
    /// </summary>
    public partial class Subscription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Subscription" /> class.
        /// </summary>
        /// <param name="deliveryExtension">An object that specifies the DeliveryExtension that will be used with this Schedule&#39;s report delivery.</param>
        /// <param name="description">A string value that contains descriptive text about the Subscription.</param>
        /// <param name="eventType">A string specifying the type of event that triggers the Subscription.</param>
        /// <param name="extensionSettings">extensionSettings</param>
        /// <param name="id">A unique UUID value that specifies the identifier by which this Subscription can be referenced in requests or in other defined objects.</param>
        /// <param name="isActive">A boolean value that specifies whether the Subscription is currently active.</param>
        /// <param name="isDataDriven">A boolean value that specifies whether the members of the distribution list for the subscription are computed based on data.</param>
        /// <param name="lastRunTime">A string value that contains the date-time that the schedule was last run.</param>
        /// <param name="lastStatus">A string specifying the Status of the last run.</param>
        /// <param name="localizedDeliveryExtensionName">Localized version of extension name when available.</param>
        /// <param name="modifiedBy">A string value that contains the network user name of the last user to modify the subscription.</param>
        /// <param name="modifiedDate">A string value that contains the date-time of the last modification to the subscription.</param>
        /// <param name="owner">A string value that specifies the owner of the Subscription.</param>
        /// <param name="parameterValues">An array of items of type ParameterValue that specify the parameter values for the subscription.</param>
        /// <param name="report">A string value that specifies the path of the report for this Subscription.</param>
        /// <param name="scheduleDescription">A string value that contains descriptive text about the schedule referenced in the Schedule property.</param>
        [JsonConstructor]
        public Subscription(string deliveryExtension, string description, string eventType, ExtensionSettings extensionSettings, Guid id, bool isActive, bool isDataDriven, DateTime lastRunTime, string lastStatus, string localizedDeliveryExtensionName, string modifiedBy, DateTime modifiedDate, string owner, List<ParameterValue> parameterValues, string report, string scheduleDescription)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException("id is a required property for Subscription and cannot be null.");

            if (owner == null)
                throw new ArgumentNullException("owner is a required property for Subscription and cannot be null.");

            if (isDataDriven == null)
                throw new ArgumentNullException("isDataDriven is a required property for Subscription and cannot be null.");

            if (description == null)
                throw new ArgumentNullException("description is a required property for Subscription and cannot be null.");

            if (report == null)
                throw new ArgumentNullException("report is a required property for Subscription and cannot be null.");

            if (isActive == null)
                throw new ArgumentNullException("isActive is a required property for Subscription and cannot be null.");

            if (eventType == null)
                throw new ArgumentNullException("eventType is a required property for Subscription and cannot be null.");

            if (scheduleDescription == null)
                throw new ArgumentNullException("scheduleDescription is a required property for Subscription and cannot be null.");

            if (lastRunTime == null)
                throw new ArgumentNullException("lastRunTime is a required property for Subscription and cannot be null.");

            if (lastStatus == null)
                throw new ArgumentNullException("lastStatus is a required property for Subscription and cannot be null.");

            if (extensionSettings == null)
                throw new ArgumentNullException("extensionSettings is a required property for Subscription and cannot be null.");

            if (deliveryExtension == null)
                throw new ArgumentNullException("deliveryExtension is a required property for Subscription and cannot be null.");

            if (localizedDeliveryExtensionName == null)
                throw new ArgumentNullException("localizedDeliveryExtensionName is a required property for Subscription and cannot be null.");

            if (modifiedBy == null)
                throw new ArgumentNullException("modifiedBy is a required property for Subscription and cannot be null.");

            if (modifiedDate == null)
                throw new ArgumentNullException("modifiedDate is a required property for Subscription and cannot be null.");

            if (parameterValues == null)
                throw new ArgumentNullException("parameterValues is a required property for Subscription and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            DeliveryExtension = deliveryExtension;
            Description = description;
            EventType = eventType;
            ExtensionSettings = extensionSettings;
            Id = id;
            IsActive = isActive;
            IsDataDriven = isDataDriven;
            LastRunTime = lastRunTime;
            LastStatus = lastStatus;
            LocalizedDeliveryExtensionName = localizedDeliveryExtensionName;
            ModifiedBy = modifiedBy;
            ModifiedDate = modifiedDate;
            Owner = owner;
            ParameterValues = parameterValues;
            Report = report;
            ScheduleDescription = scheduleDescription;
        }

        /// <summary>
        /// An object that specifies the DeliveryExtension that will be used with this Schedule&#39;s report delivery.
        /// </summary>
        /// <value>An object that specifies the DeliveryExtension that will be used with this Schedule&#39;s report delivery.</value>
        [JsonPropertyName("DeliveryExtension")]
        public string DeliveryExtension { get; set; }

        /// <summary>
        /// A string value that contains descriptive text about the Subscription.
        /// </summary>
        /// <value>A string value that contains descriptive text about the Subscription.</value>
        [JsonPropertyName("Description")]
        public string Description { get; set; }

        /// <summary>
        /// A string specifying the type of event that triggers the Subscription.
        /// </summary>
        /// <value>A string specifying the type of event that triggers the Subscription.</value>
        [JsonPropertyName("EventType")]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionSettings
        /// </summary>
        [JsonPropertyName("ExtensionSettings")]
        public ExtensionSettings ExtensionSettings { get; set; }

        /// <summary>
        /// A unique UUID value that specifies the identifier by which this Subscription can be referenced in requests or in other defined objects.
        /// </summary>
        /// <value>A unique UUID value that specifies the identifier by which this Subscription can be referenced in requests or in other defined objects.</value>
        [JsonPropertyName("Id")]
        public Guid Id { get; set; }

        /// <summary>
        /// A boolean value that specifies whether the Subscription is currently active.
        /// </summary>
        /// <value>A boolean value that specifies whether the Subscription is currently active.</value>
        [JsonPropertyName("IsActive")]
        public bool IsActive { get; set; }

        /// <summary>
        /// A boolean value that specifies whether the members of the distribution list for the subscription are computed based on data.
        /// </summary>
        /// <value>A boolean value that specifies whether the members of the distribution list for the subscription are computed based on data.</value>
        [JsonPropertyName("IsDataDriven")]
        public bool IsDataDriven { get; set; }

        /// <summary>
        /// A string value that contains the date-time that the schedule was last run.
        /// </summary>
        /// <value>A string value that contains the date-time that the schedule was last run.</value>
        [JsonPropertyName("LastRunTime")]
        public DateTime LastRunTime { get; set; }

        /// <summary>
        /// A string specifying the Status of the last run.
        /// </summary>
        /// <value>A string specifying the Status of the last run.</value>
        [JsonPropertyName("LastStatus")]
        public string LastStatus { get; set; }

        /// <summary>
        /// Localized version of extension name when available.
        /// </summary>
        /// <value>Localized version of extension name when available.</value>
        [JsonPropertyName("LocalizedDeliveryExtensionName")]
        public string LocalizedDeliveryExtensionName { get; set; }

        /// <summary>
        /// A string value that contains the network user name of the last user to modify the subscription.
        /// </summary>
        /// <value>A string value that contains the network user name of the last user to modify the subscription.</value>
        [JsonPropertyName("ModifiedBy")]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// A string value that contains the date-time of the last modification to the subscription.
        /// </summary>
        /// <value>A string value that contains the date-time of the last modification to the subscription.</value>
        [JsonPropertyName("ModifiedDate")]
        public DateTime ModifiedDate { get; set; }

        /// <summary>
        /// A string value that specifies the owner of the Subscription.
        /// </summary>
        /// <value>A string value that specifies the owner of the Subscription.</value>
        [JsonPropertyName("Owner")]
        public string Owner { get; set; }

        /// <summary>
        /// An array of items of type ParameterValue that specify the parameter values for the subscription.
        /// </summary>
        /// <value>An array of items of type ParameterValue that specify the parameter values for the subscription.</value>
        [JsonPropertyName("ParameterValues")]
        public List<ParameterValue> ParameterValues { get; set; }

        /// <summary>
        /// A string value that specifies the path of the report for this Subscription.
        /// </summary>
        /// <value>A string value that specifies the path of the report for this Subscription.</value>
        [JsonPropertyName("Report")]
        public string Report { get; set; }

        /// <summary>
        /// A string value that contains descriptive text about the schedule referenced in the Schedule property.
        /// </summary>
        /// <value>A string value that contains descriptive text about the schedule referenced in the Schedule property.</value>
        [JsonPropertyName("ScheduleDescription")]
        public string ScheduleDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  DeliveryExtension: ").Append(DeliveryExtension).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  ExtensionSettings: ").Append(ExtensionSettings).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsDataDriven: ").Append(IsDataDriven).Append("\n");
            sb.Append("  LastRunTime: ").Append(LastRunTime).Append("\n");
            sb.Append("  LastStatus: ").Append(LastStatus).Append("\n");
            sb.Append("  LocalizedDeliveryExtensionName: ").Append(LocalizedDeliveryExtensionName).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  ParameterValues: ").Append(ParameterValues).Append("\n");
            sb.Append("  Report: ").Append(Report).Append("\n");
            sb.Append("  ScheduleDescription: ").Append(ScheduleDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type Subscription
    /// </summary>
    public class SubscriptionJsonConverter : JsonConverter<Subscription>
    {
        /// <summary>
        /// The format to use to serialize LastRunTime
        /// </summary>
        public static string LastRunTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize ModifiedDate
        /// </summary>
        public static string ModifiedDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Subscription Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string deliveryExtension = default;
            string description = default;
            string eventType = default;
            ExtensionSettings extensionSettings = default;
            Guid id = default;
            bool isActive = default;
            bool isDataDriven = default;
            DateTime lastRunTime = default;
            string lastStatus = default;
            string localizedDeliveryExtensionName = default;
            string modifiedBy = default;
            DateTime modifiedDate = default;
            string owner = default;
            List<ParameterValue> parameterValues = default;
            string report = default;
            string scheduleDescription = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "DeliveryExtension":
                            deliveryExtension = utf8JsonReader.GetString();
                            break;
                        case "Description":
                            description = utf8JsonReader.GetString();
                            break;
                        case "EventType":
                            eventType = utf8JsonReader.GetString();
                            break;
                        case "ExtensionSettings":
                            extensionSettings = JsonSerializer.Deserialize<ExtensionSettings>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Id":
                            id = utf8JsonReader.GetGuid();
                            break;
                        case "IsActive":
                            isActive = utf8JsonReader.GetBoolean();
                            break;
                        case "IsDataDriven":
                            isDataDriven = utf8JsonReader.GetBoolean();
                            break;
                        case "LastRunTime":
                            lastRunTime = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "LastStatus":
                            lastStatus = utf8JsonReader.GetString();
                            break;
                        case "LocalizedDeliveryExtensionName":
                            localizedDeliveryExtensionName = utf8JsonReader.GetString();
                            break;
                        case "ModifiedBy":
                            modifiedBy = utf8JsonReader.GetString();
                            break;
                        case "ModifiedDate":
                            modifiedDate = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Owner":
                            owner = utf8JsonReader.GetString();
                            break;
                        case "ParameterValues":
                            parameterValues = JsonSerializer.Deserialize<List<ParameterValue>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Report":
                            report = utf8JsonReader.GetString();
                            break;
                        case "ScheduleDescription":
                            scheduleDescription = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new Subscription(deliveryExtension, description, eventType, extensionSettings, id, isActive, isDataDriven, lastRunTime, lastStatus, localizedDeliveryExtensionName, modifiedBy, modifiedDate, owner, parameterValues, report, scheduleDescription);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Subscription subscription, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("DeliveryExtension", subscription.DeliveryExtension);
            writer.WriteString("Description", subscription.Description);
            writer.WriteString("EventType", subscription.EventType);
            writer.WritePropertyName("ExtensionSettings");
            JsonSerializer.Serialize(writer, subscription.ExtensionSettings, jsonSerializerOptions);
            writer.WriteString("Id", subscription.Id);
            writer.WriteBoolean("IsActive", subscription.IsActive);
            writer.WriteBoolean("IsDataDriven", subscription.IsDataDriven);
            writer.WriteString("LastRunTime", subscription.LastRunTime.ToString(LastRunTimeFormat));
            writer.WriteString("LastStatus", subscription.LastStatus);
            writer.WriteString("LocalizedDeliveryExtensionName", subscription.LocalizedDeliveryExtensionName);
            writer.WriteString("ModifiedBy", subscription.ModifiedBy);
            writer.WriteString("ModifiedDate", subscription.ModifiedDate.ToString(ModifiedDateFormat));
            writer.WriteString("Owner", subscription.Owner);
            writer.WritePropertyName("ParameterValues");
            JsonSerializer.Serialize(writer, subscription.ParameterValues, jsonSerializerOptions);
            writer.WriteString("Report", subscription.Report);
            writer.WriteString("ScheduleDescription", subscription.ScheduleDescription);

            writer.WriteEndObject();
        }
    }
}
