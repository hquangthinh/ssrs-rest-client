// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that specifies the parts of a report parameter that can be modified outside of the RDL definition.
    /// </summary>
    public partial class ReportParameterDefinitionPatch : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportParameterDefinitionPatch" /> class.
        /// </summary>
        /// <param name="defaultValues">Array of default values</param>
        /// <param name="name">A string value that specifies the name of the ReportParameter.</param>
        /// <param name="parameterVisibility">parameterVisibility</param>
        /// <param name="prompt">A string value that specifies text used to prompt a user for the value of the ReportParameter.</param>
        [JsonConstructor]
        public ReportParameterDefinitionPatch(List<string> defaultValues, string name, ReportParameterVisibility parameterVisibility, string prompt)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (name == null)
                throw new ArgumentNullException("name is a required property for ReportParameterDefinitionPatch and cannot be null.");

            if (defaultValues == null)
                throw new ArgumentNullException("defaultValues is a required property for ReportParameterDefinitionPatch and cannot be null.");

            if (prompt == null)
                throw new ArgumentNullException("prompt is a required property for ReportParameterDefinitionPatch and cannot be null.");

            if (parameterVisibility == null)
                throw new ArgumentNullException("parameterVisibility is a required property for ReportParameterDefinitionPatch and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            DefaultValues = defaultValues;
            Name = name;
            ParameterVisibility = parameterVisibility;
            Prompt = prompt;
        }

        /// <summary>
        /// Gets or Sets ParameterVisibility
        /// </summary>
        [JsonPropertyName("ParameterVisibility")]
        public ReportParameterVisibility ParameterVisibility { get; set; }

        /// <summary>
        /// Array of default values
        /// </summary>
        /// <value>Array of default values</value>
        [JsonPropertyName("DefaultValues")]
        public List<string> DefaultValues { get; set; }

        /// <summary>
        /// A string value that specifies the name of the ReportParameter.
        /// </summary>
        /// <value>A string value that specifies the name of the ReportParameter.</value>
        [JsonPropertyName("Name")]
        public string Name { get; set; }

        /// <summary>
        /// A string value that specifies text used to prompt a user for the value of the ReportParameter.
        /// </summary>
        /// <value>A string value that specifies text used to prompt a user for the value of the ReportParameter.</value>
        [JsonPropertyName("Prompt")]
        public string Prompt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReportParameterDefinitionPatch {\n");
            sb.Append("  DefaultValues: ").Append(DefaultValues).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParameterVisibility: ").Append(ParameterVisibility).Append("\n");
            sb.Append("  Prompt: ").Append(Prompt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type ReportParameterDefinitionPatch
    /// </summary>
    public class ReportParameterDefinitionPatchJsonConverter : JsonConverter<ReportParameterDefinitionPatch>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ReportParameterDefinitionPatch Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            List<string> defaultValues = default;
            string name = default;
            ReportParameterVisibility parameterVisibility = default;
            string prompt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "DefaultValues":
                            defaultValues = JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "Name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "ParameterVisibility":
                            string parameterVisibilityRawValue = utf8JsonReader.GetString();
                            parameterVisibility = ReportParameterVisibilityConverter.FromString(parameterVisibilityRawValue);
                            break;
                        case "Prompt":
                            prompt = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ReportParameterDefinitionPatch(defaultValues, name, parameterVisibility, prompt);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="reportParameterDefinitionPatch"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ReportParameterDefinitionPatch reportParameterDefinitionPatch, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WritePropertyName("DefaultValues");
            JsonSerializer.Serialize(writer, reportParameterDefinitionPatch.DefaultValues, jsonSerializerOptions);
            writer.WriteString("Name", reportParameterDefinitionPatch.Name);
            var parameterVisibilityRawValue = ReportParameterVisibilityConverter.ToJsonValue(reportParameterDefinitionPatch.ParameterVisibility);
            if (parameterVisibilityRawValue != null)
                writer.WriteString("ParameterVisibility", parameterVisibilityRawValue);
            else
                writer.WriteNull("ParameterVisibility");
            writer.WriteString("Prompt", reportParameterDefinitionPatch.Prompt);

            writer.WriteEndObject();
        }
    }
}
