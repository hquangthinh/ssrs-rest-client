// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace SSRSRestV2.Model
{
    /// <summary>
    /// An object that defines a schedule including a start date-time and an optional end date-time.
    /// </summary>
    public partial class ScheduleDefinition : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleDefinition" /> class.
        /// </summary>
        /// <param name="endDate">A string that specifies the date-time of the end of the schedule.</param>
        /// <param name="endDateSpecified">A boolean value that indicates whether the schedule end is specified.</param>
        /// <param name="recurrence">recurrence</param>
        /// <param name="startDateTime">A string that specifies the date-time of the start of the schedule.</param>
        [JsonConstructor]
        public ScheduleDefinition(DateTime endDate, bool endDateSpecified, ScheduleRecurrence recurrence, DateTime startDateTime)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (startDateTime == null)
                throw new ArgumentNullException("startDateTime is a required property for ScheduleDefinition and cannot be null.");

            if (endDate == null)
                throw new ArgumentNullException("endDate is a required property for ScheduleDefinition and cannot be null.");

            if (endDateSpecified == null)
                throw new ArgumentNullException("endDateSpecified is a required property for ScheduleDefinition and cannot be null.");

            if (recurrence == null)
                throw new ArgumentNullException("recurrence is a required property for ScheduleDefinition and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            EndDate = endDate;
            EndDateSpecified = endDateSpecified;
            Recurrence = recurrence;
            StartDateTime = startDateTime;
        }

        /// <summary>
        /// A string that specifies the date-time of the end of the schedule.
        /// </summary>
        /// <value>A string that specifies the date-time of the end of the schedule.</value>
        [JsonPropertyName("EndDate")]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the schedule end is specified.
        /// </summary>
        /// <value>A boolean value that indicates whether the schedule end is specified.</value>
        [JsonPropertyName("EndDateSpecified")]
        public bool EndDateSpecified { get; set; }

        /// <summary>
        /// Gets or Sets Recurrence
        /// </summary>
        [JsonPropertyName("Recurrence")]
        public ScheduleRecurrence Recurrence { get; set; }

        /// <summary>
        /// A string that specifies the date-time of the start of the schedule.
        /// </summary>
        /// <value>A string that specifies the date-time of the start of the schedule.</value>
        [JsonPropertyName("StartDateTime")]
        public DateTime StartDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleDefinition {\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EndDateSpecified: ").Append(EndDateSpecified).Append("\n");
            sb.Append("  Recurrence: ").Append(Recurrence).Append("\n");
            sb.Append("  StartDateTime: ").Append(StartDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type ScheduleDefinition
    /// </summary>
    public class ScheduleDefinitionJsonConverter : JsonConverter<ScheduleDefinition>
    {
        /// <summary>
        /// The format to use to serialize EndDate
        /// </summary>
        public static string EndDateFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartDateTime
        /// </summary>
        public static string StartDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ScheduleDefinition Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            DateTime endDate = default;
            bool endDateSpecified = default;
            ScheduleRecurrence recurrence = default;
            DateTime startDateTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "EndDate":
                            endDate = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "EndDateSpecified":
                            endDateSpecified = utf8JsonReader.GetBoolean();
                            break;
                        case "Recurrence":
                            recurrence = JsonSerializer.Deserialize<ScheduleRecurrence>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "StartDateTime":
                            startDateTime = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ScheduleDefinition(endDate, endDateSpecified, recurrence, startDateTime);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scheduleDefinition"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ScheduleDefinition scheduleDefinition, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("EndDate", scheduleDefinition.EndDate.ToString(EndDateFormat));
            writer.WriteBoolean("EndDateSpecified", scheduleDefinition.EndDateSpecified);
            writer.WritePropertyName("Recurrence");
            JsonSerializer.Serialize(writer, scheduleDefinition.Recurrence, jsonSerializerOptions);
            writer.WriteString("StartDateTime", scheduleDefinition.StartDateTime.ToString(StartDateTimeFormat));

            writer.WriteEndObject();
        }
    }
}
