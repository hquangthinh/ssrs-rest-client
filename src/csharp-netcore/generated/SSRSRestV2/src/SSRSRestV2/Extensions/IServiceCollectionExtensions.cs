/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using SSRSRestV2.Client;
using SSRSRestV2.Api;

namespace SSRSRestV2.Extensions
{
    /// <summary>
    /// Extension methods for IServiceCollection
    /// </summary>
    public static class IServiceCollectionExtensions
    {
        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void AddSSRSRestV2Client<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi>(this IServiceCollection services)
            where TCacheRefreshPlansApi : class, IApi.ICacheRefreshPlansApi
            where TCatalogItemsApi : class, IApi.ICatalogItemsApi
            where TDataSetsApi : class, IApi.IDataSetsApi
            where TDataSourcesApi : class, IApi.IDataSourcesApi
            where TExtensionsApi : class, IApi.IExtensionsApi
            where TFavoriteItemsApi : class, IApi.IFavoriteItemsApi
            where TFoldersApi : class, IApi.IFoldersApi
            where TKpisApi : class, IApi.IKpisApi
            where TLinkedReportsApi : class, IApi.ILinkedReportsApi
            where TMeApi : class, IApi.IMeApi
            where TMobileReportsApi : class, IApi.IMobileReportsApi
            where TReportsApi : class, IApi.IReportsApi
            where TResourcesApi : class, IApi.IResourcesApi
            where TSessionApi : class, IApi.ISessionApi
            where TSubscriptionsApi : class, IApi.ISubscriptionsApi
            where TSystemApi : class, IApi.ISystemApi
        {
            HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi> config = new HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi>(services);
            AddSSRSRestV2Client(services, config);
        }

        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void AddSSRSRestV2Client(this IServiceCollection services)
        {
            HostConfiguration<CacheRefreshPlansApi, CatalogItemsApi, DataSetsApi, DataSourcesApi, ExtensionsApi, FavoriteItemsApi, FoldersApi, KpisApi, LinkedReportsApi, MeApi, MobileReportsApi, ReportsApi, ResourcesApi, SessionApi, SubscriptionsApi, SystemApi> config = new HostConfiguration<CacheRefreshPlansApi, CatalogItemsApi, DataSetsApi, DataSourcesApi, ExtensionsApi, FavoriteItemsApi, FoldersApi, KpisApi, LinkedReportsApi, MeApi, MobileReportsApi, ReportsApi, ResourcesApi, SessionApi, SubscriptionsApi, SystemApi>(services);
            AddSSRSRestV2Client(services, config);
        }

        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void AddSSRSRestV2Client<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi>(this IServiceCollection services, Action<HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi>> options)
            where TCacheRefreshPlansApi : class, IApi.ICacheRefreshPlansApi
            where TCatalogItemsApi : class, IApi.ICatalogItemsApi
            where TDataSetsApi : class, IApi.IDataSetsApi
            where TDataSourcesApi : class, IApi.IDataSourcesApi
            where TExtensionsApi : class, IApi.IExtensionsApi
            where TFavoriteItemsApi : class, IApi.IFavoriteItemsApi
            where TFoldersApi : class, IApi.IFoldersApi
            where TKpisApi : class, IApi.IKpisApi
            where TLinkedReportsApi : class, IApi.ILinkedReportsApi
            where TMeApi : class, IApi.IMeApi
            where TMobileReportsApi : class, IApi.IMobileReportsApi
            where TReportsApi : class, IApi.IReportsApi
            where TResourcesApi : class, IApi.IResourcesApi
            where TSessionApi : class, IApi.ISessionApi
            where TSubscriptionsApi : class, IApi.ISubscriptionsApi
            where TSystemApi : class, IApi.ISystemApi
        {
            HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi> config = new HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi>(services);
            options(config);
            AddSSRSRestV2Client(services, config);
        }

        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void AddSSRSRestV2Client(this IServiceCollection services, Action<HostConfiguration<CacheRefreshPlansApi, CatalogItemsApi, DataSetsApi, DataSourcesApi, ExtensionsApi, FavoriteItemsApi, FoldersApi, KpisApi, LinkedReportsApi, MeApi, MobileReportsApi, ReportsApi, ResourcesApi, SessionApi, SubscriptionsApi, SystemApi>> options)
        {
            HostConfiguration<CacheRefreshPlansApi, CatalogItemsApi, DataSetsApi, DataSourcesApi, ExtensionsApi, FavoriteItemsApi, FoldersApi, KpisApi, LinkedReportsApi, MeApi, MobileReportsApi, ReportsApi, ResourcesApi, SessionApi, SubscriptionsApi, SystemApi> config = new HostConfiguration<CacheRefreshPlansApi, CatalogItemsApi, DataSetsApi, DataSourcesApi, ExtensionsApi, FavoriteItemsApi, FoldersApi, KpisApi, LinkedReportsApi, MeApi, MobileReportsApi, ReportsApi, ResourcesApi, SessionApi, SubscriptionsApi, SystemApi>(services);
            options(config);
            AddSSRSRestV2Client(services, config);
        }

        internal static void AddSSRSRestV2Client<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi>(IServiceCollection services, HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi> host)
            where TCacheRefreshPlansApi : class, IApi.ICacheRefreshPlansApi
            where TCatalogItemsApi : class, IApi.ICatalogItemsApi
            where TDataSetsApi : class, IApi.IDataSetsApi
            where TDataSourcesApi : class, IApi.IDataSourcesApi
            where TExtensionsApi : class, IApi.IExtensionsApi
            where TFavoriteItemsApi : class, IApi.IFavoriteItemsApi
            where TFoldersApi : class, IApi.IFoldersApi
            where TKpisApi : class, IApi.IKpisApi
            where TLinkedReportsApi : class, IApi.ILinkedReportsApi
            where TMeApi : class, IApi.IMeApi
            where TMobileReportsApi : class, IApi.IMobileReportsApi
            where TReportsApi : class, IApi.IReportsApi
            where TResourcesApi : class, IApi.IResourcesApi
            where TSessionApi : class, IApi.ISessionApi
            where TSubscriptionsApi : class, IApi.ISubscriptionsApi
            where TSystemApi : class, IApi.ISystemApi
        {
            if (!host.HttpClientsAdded)
                host.AddSSRSRestV2ClientHttpClients();

            services.AddSingleton<CookieContainer>();

            // ensure that a token provider was provided for this token type
            // if not, default to RateLimitProvider
            var containerServices = services.Where(s => s.ServiceType.IsGenericType &&
                s.ServiceType.GetGenericTypeDefinition().IsAssignableFrom(typeof(TokenContainer<>))).ToArray();

            foreach(var containerService in containerServices)
            {
                var tokenType = containerService.ServiceType.GenericTypeArguments[0];

                var provider = services.FirstOrDefault(s => s.ServiceType.IsAssignableFrom(typeof(TokenProvider<>).MakeGenericType(tokenType)));

                if (provider == null)
                {
                    services.AddSingleton(typeof(RateLimitProvider<>).MakeGenericType(tokenType));
                    services.AddSingleton(typeof(TokenProvider<>).MakeGenericType(tokenType), 
                        s => s.GetRequiredService(typeof(RateLimitProvider<>).MakeGenericType(tokenType)));
                }
            }
        }
    }
}
