// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using SSRSRestV2.Client;
using SSRSRestV2.Model;

namespace SSRSRestV2.IApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICatalogItemsApi : IApi
    {
        /// <summary>
        /// Creates a new CatalogItem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The definition of the new CatalogItem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CatalogItem&gt;&gt;</returns>
        Task<ApiResponse<CatalogItem>> AddCatalogItemWithHttpInfoAsync(CatalogItem catalogItem, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Creates a new CatalogItem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The definition of the new CatalogItem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CatalogItem&gt;</returns>
        Task<CatalogItem> AddCatalogItemAsync(CatalogItem catalogItem, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Deletes the specified CatalogItem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> DeleteCatalogItemWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Deletes the specified CatalogItem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object> DeleteCatalogItemAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Deletes the given list of items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteItemsRequest">List of catalog item paths to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;BulkOperationsResult&gt;&gt;</returns>
        Task<ApiResponse<BulkOperationsResult>> DeleteCatalogItemsWithHttpInfoAsync(DeleteItemsRequest deleteItemsRequest, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Deletes the given list of items
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteItemsRequest">List of catalog item paths to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;BulkOperationsResult&gt;</returns>
        Task<BulkOperationsResult> DeleteCatalogItemsAsync(DeleteItemsRequest deleteItemsRequest, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets a CatalogItem specified by the Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CatalogItem&gt;&gt;</returns>
        Task<ApiResponse<CatalogItem>> GetCatalogItemWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets a CatalogItem specified by the Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CatalogItem&gt;</returns>
        Task<CatalogItem> GetCatalogItemAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets the content of the specified CatalogItem specified by the Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;System.IO.Stream&gt;&gt;</returns>
        Task<ApiResponse<System.IO.Stream>> GetCatalogItemContentWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets the content of the specified CatalogItem specified by the Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;System.IO.Stream&gt;</returns>
        Task<System.IO.Stream> GetCatalogItemContentAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets ItemPolicies associated with the specified CatalogItem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;List&lt;ItemPolicy&gt;&gt;&gt;</returns>
        Task<ApiResponse<List<ItemPolicy>>> GetCatalogItemPoliciesWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets ItemPolicies associated with the specified CatalogItem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;List&lt;ItemPolicy&gt;&gt;</returns>
        Task<List<ItemPolicy>> GetCatalogItemPoliciesAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="properties">Comma-separated list of Property names to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ODataProperties&gt;&gt;</returns>
        Task<ApiResponse<ODataProperties>> GetCatalogItemPropertiesWithHttpInfoAsync(string id, List<string> properties = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="properties">Comma-separated list of Property names to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ODataProperties&gt;</returns>
        Task<ODataProperties> GetCatalogItemPropertiesAsync(string id, List<string> properties = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets the list of available Roles for the CatalogItem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ODataProperties1&gt;&gt;</returns>
        Task<ApiResponse<ODataProperties1>> GetCatalogItemRolesWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets the list of available Roles for the CatalogItem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ODataProperties1&gt;</returns>
        Task<ODataProperties1> GetCatalogItemRolesAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets an array of CatalogItems.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)</param>
        /// <param name="skip">Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)</param>
        /// <param name="filter">Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)</param>
        /// <param name="count">Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632) (optional)</param>
        /// <param name="orderBy">Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)</param>
        /// <param name="select">Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;ODataCatalogItems&gt;&gt;</returns>
        Task<ApiResponse<ODataCatalogItems>> GetCatalogItemsWithHttpInfoAsync(int? top = null, int? skip = null, string filter = null, string count = null, string orderBy = null, string select = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets an array of CatalogItems.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)</param>
        /// <param name="skip">Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)</param>
        /// <param name="filter">Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)</param>
        /// <param name="count">Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632) (optional)</param>
        /// <param name="orderBy">Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)</param>
        /// <param name="select">Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;ODataCatalogItems&gt;</returns>
        Task<ODataCatalogItems> GetCatalogItemsAsync(int? top = null, int? skip = null, string filter = null, string count = null, string orderBy = null, string select = null, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Moves given list of items to target folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveItemsRequest">List of catalog item paths and target folder.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;BulkOperationsResult&gt;&gt;</returns>
        Task<ApiResponse<BulkOperationsResult>> MoveCatalogItemsWithHttpInfoAsync(MoveItemsRequest moveItemsRequest, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Moves given list of items to target folder.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveItemsRequest">List of catalog item paths and target folder.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;BulkOperationsResult&gt;</returns>
        Task<BulkOperationsResult> MoveCatalogItemsAsync(MoveItemsRequest moveItemsRequest, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Replaces ItemPolicies associated with the specified CatalogItem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The ItemPolicy definitions that will be replaced.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> SetCatalogItemPoliciesWithHttpInfoAsync(List<ItemPolicy> catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Replaces ItemPolicies associated with the specified CatalogItem.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The ItemPolicy definitions that will be replaced.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object> SetCatalogItemPoliciesAsync(List<ItemPolicy> catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Updates the specified CatalogItem using the provided definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> UpdateCatalogItemWithHttpInfoAsync(CatalogItem catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Updates the specified CatalogItem using the provided definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object> UpdateCatalogItemAsync(CatalogItem catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Updates a CatalogItem&#39;s Properties with the list of given properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="properties">The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> UpdateCatalogItemPropertiesWithHttpInfoAsync(List<Property> properties, string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Updates a CatalogItem&#39;s Properties with the list of given properties.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="properties">The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object> UpdateCatalogItemPropertiesAsync(List<Property> properties, string id, System.Threading.CancellationToken? cancellationToken = null);
    }
}

namespace SSRSRestV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CatalogItemsApi : IApi.ICatalogItemsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CatalogItemsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CatalogItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CatalogItemsApi(ILogger<CatalogItemsApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
        }

        /// <summary>
        /// Logs the api response
        /// </summary>
        /// <param name="args"></param>
        protected virtual void OnApiResponded(ApiResponseEventArgs args)
        {
            Logger.LogInformation("{0,-9} | {1} | {3}", (args.ReceivedAt - args.RequestedAt).TotalSeconds, args.HttpStatus, args.Path);
        }

        /// <summary>
        /// Creates a new CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The definition of the new CatalogItem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CatalogItem"/>&gt;</returns>
        public async Task<CatalogItem> AddCatalogItemAsync(CatalogItem catalogItem, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CatalogItem> result = await AddCatalogItemWithHttpInfoAsync(catalogItem, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Creates a new CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The definition of the new CatalogItem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CatalogItem"/>&gt;</returns>
        public async Task<CatalogItem> AddCatalogItemOrDefaultAsync(CatalogItem catalogItem, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CatalogItem> result = null;
            try 
            {
                result = await AddCatalogItemWithHttpInfoAsync(catalogItem, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="catalogItem"></param>
        /// <returns></returns>
        protected virtual CatalogItem OnAddCatalogItem(CatalogItem catalogItem)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (catalogItem == null)
                throw new ArgumentNullException(nameof(catalogItem));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return catalogItem;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="catalogItem"></param>
        protected virtual void AfterAddCatalogItem(ApiResponse<CatalogItem> apiResponse, CatalogItem catalogItem)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="catalogItem"></param>
        protected virtual void OnErrorAddCatalogItem(Exception exception, string pathFormat, string path, CatalogItem catalogItem)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Creates a new CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The definition of the new CatalogItem.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CatalogItem"/></returns>
        public async Task<ApiResponse<CatalogItem>> AddCatalogItemWithHttpInfoAsync(CatalogItem catalogItem, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                catalogItem = OnAddCatalogItem(catalogItem);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems";

                    request.Content = (catalogItem as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(catalogItem, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("POST");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<CatalogItem> apiResponse = new ApiResponse<CatalogItem>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<CatalogItem>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterAddCatalogItem(apiResponse, catalogItem);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddCatalogItem(e, "/CatalogItems", uriBuilder.Path, catalogItem);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> DeleteCatalogItemAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = await DeleteCatalogItemWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Deletes the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> DeleteCatalogItemOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = null;
            try 
            {
                result = await DeleteCatalogItemWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual string OnDeleteCatalogItem(string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return id;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        protected virtual void AfterDeleteCatalogItem(ApiResponse<object> apiResponse, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorDeleteCatalogItem(Exception exception, string pathFormat, string path, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Deletes the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>> DeleteCatalogItemWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                id = OnDeleteCatalogItem(id);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("DELETE");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<object> apiResponse = new ApiResponse<object>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterDeleteCatalogItem(apiResponse, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCatalogItem(e, "/CatalogItems({Id})", uriBuilder.Path, id);
                throw;
            }
        }

        /// <summary>
        /// Deletes the given list of items 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteItemsRequest">List of catalog item paths to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="BulkOperationsResult"/>&gt;</returns>
        public async Task<BulkOperationsResult> DeleteCatalogItemsAsync(DeleteItemsRequest deleteItemsRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<BulkOperationsResult> result = await DeleteCatalogItemsWithHttpInfoAsync(deleteItemsRequest, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Deletes the given list of items 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteItemsRequest">List of catalog item paths to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="BulkOperationsResult"/>&gt;</returns>
        public async Task<BulkOperationsResult> DeleteCatalogItemsOrDefaultAsync(DeleteItemsRequest deleteItemsRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<BulkOperationsResult> result = null;
            try 
            {
                result = await DeleteCatalogItemsWithHttpInfoAsync(deleteItemsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="deleteItemsRequest"></param>
        /// <returns></returns>
        protected virtual DeleteItemsRequest OnDeleteCatalogItems(DeleteItemsRequest deleteItemsRequest)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (deleteItemsRequest == null)
                throw new ArgumentNullException(nameof(deleteItemsRequest));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return deleteItemsRequest;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="deleteItemsRequest"></param>
        protected virtual void AfterDeleteCatalogItems(ApiResponse<BulkOperationsResult> apiResponse, DeleteItemsRequest deleteItemsRequest)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="deleteItemsRequest"></param>
        protected virtual void OnErrorDeleteCatalogItems(Exception exception, string pathFormat, string path, DeleteItemsRequest deleteItemsRequest)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Deletes the given list of items 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteItemsRequest">List of catalog item paths to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="BulkOperationsResult"/></returns>
        public async Task<ApiResponse<BulkOperationsResult>> DeleteCatalogItemsWithHttpInfoAsync(DeleteItemsRequest deleteItemsRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                deleteItemsRequest = OnDeleteCatalogItems(deleteItemsRequest);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems/Model.DeleteItems";

                    request.Content = (deleteItemsRequest as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(deleteItemsRequest, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("POST");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems/Model.DeleteItems", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<BulkOperationsResult> apiResponse = new ApiResponse<BulkOperationsResult>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<BulkOperationsResult>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterDeleteCatalogItems(apiResponse, deleteItemsRequest);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCatalogItems(e, "/CatalogItems/Model.DeleteItems", uriBuilder.Path, deleteItemsRequest);
                throw;
            }
        }

        /// <summary>
        /// Gets a CatalogItem specified by the Id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CatalogItem"/>&gt;</returns>
        public async Task<CatalogItem> GetCatalogItemAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CatalogItem> result = await GetCatalogItemWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Gets a CatalogItem specified by the Id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CatalogItem"/>&gt;</returns>
        public async Task<CatalogItem> GetCatalogItemOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CatalogItem> result = null;
            try 
            {
                result = await GetCatalogItemWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual string OnGetCatalogItem(string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return id;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        protected virtual void AfterGetCatalogItem(ApiResponse<CatalogItem> apiResponse, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorGetCatalogItem(Exception exception, string pathFormat, string path, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Gets a CatalogItem specified by the Id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CatalogItem"/></returns>
        public async Task<ApiResponse<CatalogItem>> GetCatalogItemWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                id = OnGetCatalogItem(id);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("GET");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<CatalogItem> apiResponse = new ApiResponse<CatalogItem>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<CatalogItem>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterGetCatalogItem(apiResponse, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCatalogItem(e, "/CatalogItems({Id})", uriBuilder.Path, id);
                throw;
            }
        }

        /// <summary>
        /// Gets the content of the specified CatalogItem specified by the Id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="System.IO.Stream"/>&gt;</returns>
        public async Task<System.IO.Stream> GetCatalogItemContentAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<System.IO.Stream> result = await GetCatalogItemContentWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            if (result.Content == null)
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual string OnGetCatalogItemContent(string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return id;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        protected virtual void AfterGetCatalogItemContent(ApiResponse<System.IO.Stream> apiResponse, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorGetCatalogItemContent(Exception exception, string pathFormat, string path, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Gets the content of the specified CatalogItem specified by the Id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="System.IO.Stream"/></returns>
        public async Task<ApiResponse<System.IO.Stream>> GetCatalogItemContentWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                id = OnGetCatalogItemContent(id);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})/Content/$value";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/octet-stream" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("GET");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})/Content/$value", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<System.IO.Stream> apiResponse = new ApiResponse<System.IO.Stream>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<System.IO.Stream>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterGetCatalogItemContent(apiResponse, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCatalogItemContent(e, "/CatalogItems({Id})/Content/$value", uriBuilder.Path, id);
                throw;
            }
        }

        /// <summary>
        /// Gets ItemPolicies associated with the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="List&lt;ItemPolicy&gt;"/>&gt;</returns>
        public async Task<List<ItemPolicy>> GetCatalogItemPoliciesAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<List<ItemPolicy>> result = await GetCatalogItemPoliciesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Gets ItemPolicies associated with the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="List&lt;ItemPolicy&gt;"/>&gt;</returns>
        public async Task<List<ItemPolicy>> GetCatalogItemPoliciesOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<List<ItemPolicy>> result = null;
            try 
            {
                result = await GetCatalogItemPoliciesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual string OnGetCatalogItemPolicies(string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return id;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        protected virtual void AfterGetCatalogItemPolicies(ApiResponse<List<ItemPolicy>> apiResponse, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorGetCatalogItemPolicies(Exception exception, string pathFormat, string path, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Gets ItemPolicies associated with the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="List&lt;ItemPolicy&gt;"/></returns>
        public async Task<ApiResponse<List<ItemPolicy>>> GetCatalogItemPoliciesWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                id = OnGetCatalogItemPolicies(id);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})/Policies";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("GET");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})/Policies", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<List<ItemPolicy>> apiResponse = new ApiResponse<List<ItemPolicy>>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<List<ItemPolicy>>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterGetCatalogItemPolicies(apiResponse, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCatalogItemPolicies(e, "/CatalogItems({Id})/Policies", uriBuilder.Path, id);
                throw;
            }
        }

        /// <summary>
        /// Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="properties">Comma-separated list of Property names to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ODataProperties"/>&gt;</returns>
        public async Task<ODataProperties> GetCatalogItemPropertiesAsync(string id, List<string> properties = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ODataProperties> result = await GetCatalogItemPropertiesWithHttpInfoAsync(id, properties, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="properties">Comma-separated list of Property names to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ODataProperties"/>&gt;</returns>
        public async Task<ODataProperties> GetCatalogItemPropertiesOrDefaultAsync(string id, List<string> properties = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ODataProperties> result = null;
            try 
            {
                result = await GetCatalogItemPropertiesWithHttpInfoAsync(id, properties, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="properties"></param>
        /// <returns></returns>
        protected virtual (string, List<string>) OnGetCatalogItemProperties(string id, List<string> properties)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return (id, properties);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        /// <param name="properties"></param>
        protected virtual void AfterGetCatalogItemProperties(ApiResponse<ODataProperties> apiResponse, string id, List<string> properties)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        /// <param name="properties"></param>
        protected virtual void OnErrorGetCatalogItemProperties(Exception exception, string pathFormat, string path, string id, List<string> properties)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Gets the specified Properties for the CatalogItem (takes list of Property names to retrieve the values) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="properties">Comma-separated list of Property names to be returned. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ODataProperties"/></returns>
        public async Task<ApiResponse<ODataProperties>> GetCatalogItemPropertiesWithHttpInfoAsync(string id, List<string> properties = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                var validatedParameters = OnGetCatalogItemProperties(id, properties);
                id = validatedParameters.Item1;
                properties = validatedParameters.Item2;

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})/Properties";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));                    System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                    if (properties != null)
                        parseQueryString["Properties"] = Uri.EscapeDataString(properties.ToString());

                    uriBuilder.Query = parseQueryString.ToString();



                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("GET");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})/Properties", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<ODataProperties> apiResponse = new ApiResponse<ODataProperties>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<ODataProperties>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterGetCatalogItemProperties(apiResponse, id, properties);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCatalogItemProperties(e, "/CatalogItems({Id})/Properties", uriBuilder.Path, id, properties);
                throw;
            }
        }

        /// <summary>
        /// Gets the list of available Roles for the CatalogItem 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ODataProperties1"/>&gt;</returns>
        public async Task<ODataProperties1> GetCatalogItemRolesAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ODataProperties1> result = await GetCatalogItemRolesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Gets the list of available Roles for the CatalogItem 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ODataProperties1"/>&gt;</returns>
        public async Task<ODataProperties1> GetCatalogItemRolesOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ODataProperties1> result = null;
            try 
            {
                result = await GetCatalogItemRolesWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual string OnGetCatalogItemRoles(string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return id;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        protected virtual void AfterGetCatalogItemRoles(ApiResponse<ODataProperties1> apiResponse, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorGetCatalogItemRoles(Exception exception, string pathFormat, string path, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Gets the list of available Roles for the CatalogItem 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ODataProperties1"/></returns>
        public async Task<ApiResponse<ODataProperties1>> GetCatalogItemRolesWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                id = OnGetCatalogItemRoles(id);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})/Roles";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("GET");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})/Roles", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<ODataProperties1> apiResponse = new ApiResponse<ODataProperties1>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<ODataProperties1>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterGetCatalogItemRoles(apiResponse, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCatalogItemRoles(e, "/CatalogItems({Id})/Roles", uriBuilder.Path, id);
                throw;
            }
        }

        /// <summary>
        /// Gets an array of CatalogItems. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)</param>
        /// <param name="skip">Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)</param>
        /// <param name="filter">Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)</param>
        /// <param name="count">Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632) (optional)</param>
        /// <param name="orderBy">Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)</param>
        /// <param name="select">Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ODataCatalogItems"/>&gt;</returns>
        public async Task<ODataCatalogItems> GetCatalogItemsAsync(int? top = null, int? skip = null, string filter = null, string count = null, string orderBy = null, string select = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ODataCatalogItems> result = await GetCatalogItemsWithHttpInfoAsync(top, skip, filter, count, orderBy, select, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Gets an array of CatalogItems. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)</param>
        /// <param name="skip">Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)</param>
        /// <param name="filter">Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)</param>
        /// <param name="count">Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632) (optional)</param>
        /// <param name="orderBy">Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)</param>
        /// <param name="select">Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ODataCatalogItems"/>&gt;</returns>
        public async Task<ODataCatalogItems> GetCatalogItemsOrDefaultAsync(int? top = null, int? skip = null, string filter = null, string count = null, string orderBy = null, string select = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<ODataCatalogItems> result = null;
            try 
            {
                result = await GetCatalogItemsWithHttpInfoAsync(top, skip, filter, count, orderBy, select, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="top"></param>
        /// <param name="skip"></param>
        /// <param name="filter"></param>
        /// <param name="count"></param>
        /// <param name="orderBy"></param>
        /// <param name="select"></param>
        /// <returns></returns>
        protected virtual (int?, int?, string, string, string, string) OnGetCatalogItems(int? top, int? skip, string filter, string count, string orderBy, string select)
        {
            return (top, skip, filter, count, orderBy, select);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="top"></param>
        /// <param name="skip"></param>
        /// <param name="filter"></param>
        /// <param name="count"></param>
        /// <param name="orderBy"></param>
        /// <param name="select"></param>
        protected virtual void AfterGetCatalogItems(ApiResponse<ODataCatalogItems> apiResponse, int? top, int? skip, string filter, string count, string orderBy, string select)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="top"></param>
        /// <param name="skip"></param>
        /// <param name="filter"></param>
        /// <param name="count"></param>
        /// <param name="orderBy"></param>
        /// <param name="select"></param>
        protected virtual void OnErrorGetCatalogItems(Exception exception, string pathFormat, string path, int? top, int? skip, string filter, string count, string orderBy, string select)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Gets an array of CatalogItems. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="top">Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)</param>
        /// <param name="skip">Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)</param>
        /// <param name="filter">Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)</param>
        /// <param name="count">Include count of items, see [OData Count](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374632) (optional)</param>
        /// <param name="orderBy">Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)</param>
        /// <param name="select">Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="ODataCatalogItems"/></returns>
        public async Task<ApiResponse<ODataCatalogItems>> GetCatalogItemsWithHttpInfoAsync(int? top = null, int? skip = null, string filter = null, string count = null, string orderBy = null, string select = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                var validatedParameters = OnGetCatalogItems(top, skip, filter, count, orderBy, select);
                top = validatedParameters.Item1;
                skip = validatedParameters.Item2;
                filter = validatedParameters.Item3;
                count = validatedParameters.Item4;
                orderBy = validatedParameters.Item5;
                select = validatedParameters.Item6;

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems";

                    System.Collections.Specialized.NameValueCollection parseQueryString = System.Web.HttpUtility.ParseQueryString(string.Empty);
                    if (top != null)
                        parseQueryString["$top"] = Uri.EscapeDataString(top.ToString());

                    if (skip != null)
                        parseQueryString["$skip"] = Uri.EscapeDataString(skip.ToString());

                    if (filter != null)
                        parseQueryString["$filter"] = Uri.EscapeDataString(filter.ToString());

                    if (count != null)
                        parseQueryString["$count"] = Uri.EscapeDataString(count.ToString());

                    if (orderBy != null)
                        parseQueryString["$orderBy"] = Uri.EscapeDataString(orderBy.ToString());

                    if (select != null)
                        parseQueryString["$select"] = Uri.EscapeDataString(select.ToString());

                    uriBuilder.Query = parseQueryString.ToString();



                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("GET");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<ODataCatalogItems> apiResponse = new ApiResponse<ODataCatalogItems>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<ODataCatalogItems>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterGetCatalogItems(apiResponse, top, skip, filter, count, orderBy, select);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCatalogItems(e, "/CatalogItems", uriBuilder.Path, top, skip, filter, count, orderBy, select);
                throw;
            }
        }

        /// <summary>
        /// Moves given list of items to target folder. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveItemsRequest">List of catalog item paths and target folder.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="BulkOperationsResult"/>&gt;</returns>
        public async Task<BulkOperationsResult> MoveCatalogItemsAsync(MoveItemsRequest moveItemsRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<BulkOperationsResult> result = await MoveCatalogItemsWithHttpInfoAsync(moveItemsRequest, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Moves given list of items to target folder. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveItemsRequest">List of catalog item paths and target folder.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="BulkOperationsResult"/>&gt;</returns>
        public async Task<BulkOperationsResult> MoveCatalogItemsOrDefaultAsync(MoveItemsRequest moveItemsRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<BulkOperationsResult> result = null;
            try 
            {
                result = await MoveCatalogItemsWithHttpInfoAsync(moveItemsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="moveItemsRequest"></param>
        /// <returns></returns>
        protected virtual MoveItemsRequest OnMoveCatalogItems(MoveItemsRequest moveItemsRequest)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (moveItemsRequest == null)
                throw new ArgumentNullException(nameof(moveItemsRequest));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return moveItemsRequest;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="moveItemsRequest"></param>
        protected virtual void AfterMoveCatalogItems(ApiResponse<BulkOperationsResult> apiResponse, MoveItemsRequest moveItemsRequest)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="moveItemsRequest"></param>
        protected virtual void OnErrorMoveCatalogItems(Exception exception, string pathFormat, string path, MoveItemsRequest moveItemsRequest)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Moves given list of items to target folder. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="moveItemsRequest">List of catalog item paths and target folder.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="BulkOperationsResult"/></returns>
        public async Task<ApiResponse<BulkOperationsResult>> MoveCatalogItemsWithHttpInfoAsync(MoveItemsRequest moveItemsRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                moveItemsRequest = OnMoveCatalogItems(moveItemsRequest);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems/Model.MoveItems";

                    request.Content = (moveItemsRequest as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(moveItemsRequest, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("POST");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems/Model.MoveItems", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<BulkOperationsResult> apiResponse = new ApiResponse<BulkOperationsResult>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<BulkOperationsResult>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterMoveCatalogItems(apiResponse, moveItemsRequest);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorMoveCatalogItems(e, "/CatalogItems/Model.MoveItems", uriBuilder.Path, moveItemsRequest);
                throw;
            }
        }

        /// <summary>
        /// Replaces ItemPolicies associated with the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The ItemPolicy definitions that will be replaced.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> SetCatalogItemPoliciesAsync(List<ItemPolicy> catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = await SetCatalogItemPoliciesWithHttpInfoAsync(catalogItem, id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Replaces ItemPolicies associated with the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The ItemPolicy definitions that will be replaced.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> SetCatalogItemPoliciesOrDefaultAsync(List<ItemPolicy> catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = null;
            try 
            {
                result = await SetCatalogItemPoliciesWithHttpInfoAsync(catalogItem, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="catalogItem"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual (List<ItemPolicy>, string) OnSetCatalogItemPolicies(List<ItemPolicy> catalogItem, string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (catalogItem == null)
                throw new ArgumentNullException(nameof(catalogItem));

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return (catalogItem, id);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="catalogItem"></param>
        /// <param name="id"></param>
        protected virtual void AfterSetCatalogItemPolicies(ApiResponse<object> apiResponse, List<ItemPolicy> catalogItem, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="catalogItem"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorSetCatalogItemPolicies(Exception exception, string pathFormat, string path, List<ItemPolicy> catalogItem, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Replaces ItemPolicies associated with the specified CatalogItem. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">The ItemPolicy definitions that will be replaced.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>> SetCatalogItemPoliciesWithHttpInfoAsync(List<ItemPolicy> catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                var validatedParameters = OnSetCatalogItemPolicies(catalogItem, id);
                catalogItem = validatedParameters.Item1;
                id = validatedParameters.Item2;

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})/Policies";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));                    request.Content = (catalogItem as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(catalogItem, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("PUT");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})/Policies", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<object> apiResponse = new ApiResponse<object>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterSetCatalogItemPolicies(apiResponse, catalogItem, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetCatalogItemPolicies(e, "/CatalogItems({Id})/Policies", uriBuilder.Path, catalogItem, id);
                throw;
            }
        }

        /// <summary>
        /// Updates the specified CatalogItem using the provided definition. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> UpdateCatalogItemAsync(CatalogItem catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = await UpdateCatalogItemWithHttpInfoAsync(catalogItem, id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Updates the specified CatalogItem using the provided definition. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> UpdateCatalogItemOrDefaultAsync(CatalogItem catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = null;
            try 
            {
                result = await UpdateCatalogItemWithHttpInfoAsync(catalogItem, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="catalogItem"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual (CatalogItem, string) OnUpdateCatalogItem(CatalogItem catalogItem, string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (catalogItem == null)
                throw new ArgumentNullException(nameof(catalogItem));

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return (catalogItem, id);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="catalogItem"></param>
        /// <param name="id"></param>
        protected virtual void AfterUpdateCatalogItem(ApiResponse<object> apiResponse, CatalogItem catalogItem, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="catalogItem"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorUpdateCatalogItem(Exception exception, string pathFormat, string path, CatalogItem catalogItem, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Updates the specified CatalogItem using the provided definition. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="catalogItem">Definition of the CatalogItem that updates the current item on the server. The type for the defintion can be any of the supported CatalogItemTypes. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>> UpdateCatalogItemWithHttpInfoAsync(CatalogItem catalogItem, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                var validatedParameters = OnUpdateCatalogItem(catalogItem, id);
                catalogItem = validatedParameters.Item1;
                id = validatedParameters.Item2;

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));                    request.Content = (catalogItem as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(catalogItem, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("PATCH");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<object> apiResponse = new ApiResponse<object>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterUpdateCatalogItem(apiResponse, catalogItem, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateCatalogItem(e, "/CatalogItems({Id})", uriBuilder.Path, catalogItem, id);
                throw;
            }
        }

        /// <summary>
        /// Updates a CatalogItem&#39;s Properties with the list of given properties. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="properties">The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> UpdateCatalogItemPropertiesAsync(List<Property> properties, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = await UpdateCatalogItemPropertiesWithHttpInfoAsync(properties, id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Updates a CatalogItem&#39;s Properties with the list of given properties. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="properties">The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> UpdateCatalogItemPropertiesOrDefaultAsync(List<Property> properties, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = null;
            try 
            {
                result = await UpdateCatalogItemPropertiesWithHttpInfoAsync(properties, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="properties"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual (List<Property>, string) OnUpdateCatalogItemProperties(List<Property> properties, string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (properties == null)
                throw new ArgumentNullException(nameof(properties));

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return (properties, id);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="properties"></param>
        /// <param name="id"></param>
        protected virtual void AfterUpdateCatalogItemProperties(ApiResponse<object> apiResponse, List<Property> properties, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="properties"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorUpdateCatalogItemProperties(Exception exception, string pathFormat, string path, List<Property> properties, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Updates a CatalogItem&#39;s Properties with the list of given properties. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="properties">The Properties that will be updated. It is only necessary to include properties to be updated. All other property values will be left unchanged.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>> UpdateCatalogItemPropertiesWithHttpInfoAsync(List<Property> properties, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                var validatedParameters = OnUpdateCatalogItemProperties(properties, id);
                properties = validatedParameters.Item1;
                id = validatedParameters.Item2;

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CatalogItems({Id})/Properties";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));                    request.Content = (properties as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(properties, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("PATCH");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CatalogItems({Id})/Properties", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<object> apiResponse = new ApiResponse<object>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterUpdateCatalogItemProperties(apiResponse, properties, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateCatalogItemProperties(e, "/CatalogItems({Id})/Properties", uriBuilder.Path, properties, id);
                throw;
            }
        }
    }
}
