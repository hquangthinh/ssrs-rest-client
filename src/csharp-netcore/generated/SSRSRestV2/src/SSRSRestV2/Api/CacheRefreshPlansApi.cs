// <auto-generated>
/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using SSRSRestV2.Client;
using SSRSRestV2.Model;

namespace SSRSRestV2.IApi
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ICacheRefreshPlansApi : IApi
    {
        /// <summary>
        /// Creates a new CacheRefreshPlan item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">The definition of the new CacheRefreshPlan item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CacheRefreshPlan&gt;&gt;</returns>
        Task<ApiResponse<CacheRefreshPlan>> AddCacheRefreshPlanWithHttpInfoAsync(CacheRefreshPlan cacheRefreshPlan, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Creates a new CacheRefreshPlan item.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">The definition of the new CacheRefreshPlan item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CacheRefreshPlan&gt;</returns>
        Task<CacheRefreshPlan> AddCacheRefreshPlanAsync(CacheRefreshPlan cacheRefreshPlan, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Deletes the specified CacheRefreshPlan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> DeleteCacheRefreshPlanWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Deletes the specified CacheRefreshPlan.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object> DeleteCacheRefreshPlanAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Executes given CacheRefreshPlan immediately.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;object&gt;&gt;</returns>
        Task<ApiResponse<object>> ExecuteCacheRefreshPlanWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Executes given CacheRefreshPlan immediately.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;object&gt;</returns>
        Task<object> ExecuteCacheRefreshPlanAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets a CacheRefreshPlan item specified by the Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CacheRefreshPlan&gt;&gt;</returns>
        Task<ApiResponse<CacheRefreshPlan>> GetCacheRefreshPlanWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Gets a CacheRefreshPlan item specified by the Id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CacheRefreshPlan&gt;</returns>
        Task<CacheRefreshPlan> GetCacheRefreshPlanAsync(string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Replaces the specified CacheRefreshPlan item using the provided definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">Definition of the CacheRefreshPlan item that updates the current item on the server.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CacheRefreshPlan&gt;&gt;</returns>
        Task<ApiResponse<CacheRefreshPlan>> SetCacheRefreshPlanWithHttpInfoAsync(CacheRefreshPlan cacheRefreshPlan, string id, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Replaces the specified CacheRefreshPlan item using the provided definition.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">Definition of the CacheRefreshPlan item that updates the current item on the server.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;CacheRefreshPlan&gt;</returns>
        Task<CacheRefreshPlan> SetCacheRefreshPlanAsync(CacheRefreshPlan cacheRefreshPlan, string id, System.Threading.CancellationToken? cancellationToken = null);
    }
}

namespace SSRSRestV2.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CacheRefreshPlansApi : IApi.ICacheRefreshPlansApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<CacheRefreshPlansApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="CacheRefreshPlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CacheRefreshPlansApi(ILogger<CacheRefreshPlansApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
        }

        /// <summary>
        /// Logs the api response
        /// </summary>
        /// <param name="args"></param>
        protected virtual void OnApiResponded(ApiResponseEventArgs args)
        {
            Logger.LogInformation("{0,-9} | {1} | {3}", (args.ReceivedAt - args.RequestedAt).TotalSeconds, args.HttpStatus, args.Path);
        }

        /// <summary>
        /// Creates a new CacheRefreshPlan item. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">The definition of the new CacheRefreshPlan item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CacheRefreshPlan"/>&gt;</returns>
        public async Task<CacheRefreshPlan> AddCacheRefreshPlanAsync(CacheRefreshPlan cacheRefreshPlan, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CacheRefreshPlan> result = await AddCacheRefreshPlanWithHttpInfoAsync(cacheRefreshPlan, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Creates a new CacheRefreshPlan item. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">The definition of the new CacheRefreshPlan item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CacheRefreshPlan"/>&gt;</returns>
        public async Task<CacheRefreshPlan> AddCacheRefreshPlanOrDefaultAsync(CacheRefreshPlan cacheRefreshPlan, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CacheRefreshPlan> result = null;
            try 
            {
                result = await AddCacheRefreshPlanWithHttpInfoAsync(cacheRefreshPlan, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cacheRefreshPlan"></param>
        /// <returns></returns>
        protected virtual CacheRefreshPlan OnAddCacheRefreshPlan(CacheRefreshPlan cacheRefreshPlan)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (cacheRefreshPlan == null)
                throw new ArgumentNullException(nameof(cacheRefreshPlan));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return cacheRefreshPlan;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="cacheRefreshPlan"></param>
        protected virtual void AfterAddCacheRefreshPlan(ApiResponse<CacheRefreshPlan> apiResponse, CacheRefreshPlan cacheRefreshPlan)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="cacheRefreshPlan"></param>
        protected virtual void OnErrorAddCacheRefreshPlan(Exception exception, string pathFormat, string path, CacheRefreshPlan cacheRefreshPlan)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Creates a new CacheRefreshPlan item. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">The definition of the new CacheRefreshPlan item.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CacheRefreshPlan"/></returns>
        public async Task<ApiResponse<CacheRefreshPlan>> AddCacheRefreshPlanWithHttpInfoAsync(CacheRefreshPlan cacheRefreshPlan, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                cacheRefreshPlan = OnAddCacheRefreshPlan(cacheRefreshPlan);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CacheRefreshPlans";

                    request.Content = (cacheRefreshPlan as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(cacheRefreshPlan, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("POST");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CacheRefreshPlans", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<CacheRefreshPlan> apiResponse = new ApiResponse<CacheRefreshPlan>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<CacheRefreshPlan>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterAddCacheRefreshPlan(apiResponse, cacheRefreshPlan);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddCacheRefreshPlan(e, "/CacheRefreshPlans", uriBuilder.Path, cacheRefreshPlan);
                throw;
            }
        }

        /// <summary>
        /// Deletes the specified CacheRefreshPlan. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> DeleteCacheRefreshPlanAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = await DeleteCacheRefreshPlanWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Deletes the specified CacheRefreshPlan. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> DeleteCacheRefreshPlanOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = null;
            try 
            {
                result = await DeleteCacheRefreshPlanWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual string OnDeleteCacheRefreshPlan(string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return id;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        protected virtual void AfterDeleteCacheRefreshPlan(ApiResponse<object> apiResponse, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorDeleteCacheRefreshPlan(Exception exception, string pathFormat, string path, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Deletes the specified CacheRefreshPlan. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>> DeleteCacheRefreshPlanWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                id = OnDeleteCacheRefreshPlan(id);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CacheRefreshPlans({Id})";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("DELETE");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CacheRefreshPlans({Id})", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<object> apiResponse = new ApiResponse<object>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterDeleteCacheRefreshPlan(apiResponse, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteCacheRefreshPlan(e, "/CacheRefreshPlans({Id})", uriBuilder.Path, id);
                throw;
            }
        }

        /// <summary>
        /// Executes given CacheRefreshPlan immediately. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> ExecuteCacheRefreshPlanAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = await ExecuteCacheRefreshPlanWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Executes given CacheRefreshPlan immediately. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="object"/>&gt;</returns>
        public async Task<object> ExecuteCacheRefreshPlanOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<object> result = null;
            try 
            {
                result = await ExecuteCacheRefreshPlanWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual string OnExecuteCacheRefreshPlan(string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return id;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        protected virtual void AfterExecuteCacheRefreshPlan(ApiResponse<object> apiResponse, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorExecuteCacheRefreshPlan(Exception exception, string pathFormat, string path, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Executes given CacheRefreshPlan immediately. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="object"/></returns>
        public async Task<ApiResponse<object>> ExecuteCacheRefreshPlanWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                id = OnExecuteCacheRefreshPlan(id);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CacheRefreshPlans({Id})/Model.Execute";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("POST");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CacheRefreshPlans({Id})/Model.Execute", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<object> apiResponse = new ApiResponse<object>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<object>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterExecuteCacheRefreshPlan(apiResponse, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorExecuteCacheRefreshPlan(e, "/CacheRefreshPlans({Id})/Model.Execute", uriBuilder.Path, id);
                throw;
            }
        }

        /// <summary>
        /// Gets a CacheRefreshPlan item specified by the Id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CacheRefreshPlan"/>&gt;</returns>
        public async Task<CacheRefreshPlan> GetCacheRefreshPlanAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CacheRefreshPlan> result = await GetCacheRefreshPlanWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Gets a CacheRefreshPlan item specified by the Id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CacheRefreshPlan"/>&gt;</returns>
        public async Task<CacheRefreshPlan> GetCacheRefreshPlanOrDefaultAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CacheRefreshPlan> result = null;
            try 
            {
                result = await GetCacheRefreshPlanWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual string OnGetCacheRefreshPlan(string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return id;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="id"></param>
        protected virtual void AfterGetCacheRefreshPlan(ApiResponse<CacheRefreshPlan> apiResponse, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorGetCacheRefreshPlan(Exception exception, string pathFormat, string path, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Gets a CacheRefreshPlan item specified by the Id. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CacheRefreshPlan"/></returns>
        public async Task<ApiResponse<CacheRefreshPlan>> GetCacheRefreshPlanWithHttpInfoAsync(string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                id = OnGetCacheRefreshPlan(id);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CacheRefreshPlans({Id})";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("GET");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CacheRefreshPlans({Id})", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<CacheRefreshPlan> apiResponse = new ApiResponse<CacheRefreshPlan>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<CacheRefreshPlan>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterGetCacheRefreshPlan(apiResponse, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetCacheRefreshPlan(e, "/CacheRefreshPlans({Id})", uriBuilder.Path, id);
                throw;
            }
        }

        /// <summary>
        /// Replaces the specified CacheRefreshPlan item using the provided definition. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">Definition of the CacheRefreshPlan item that updates the current item on the server.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CacheRefreshPlan"/>&gt;</returns>
        public async Task<CacheRefreshPlan> SetCacheRefreshPlanAsync(CacheRefreshPlan cacheRefreshPlan, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CacheRefreshPlan> result = await SetCacheRefreshPlanWithHttpInfoAsync(cacheRefreshPlan, id, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Replaces the specified CacheRefreshPlan item using the provided definition. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">Definition of the CacheRefreshPlan item that updates the current item on the server.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="CacheRefreshPlan"/>&gt;</returns>
        public async Task<CacheRefreshPlan> SetCacheRefreshPlanOrDefaultAsync(CacheRefreshPlan cacheRefreshPlan, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<CacheRefreshPlan> result = null;
            try 
            {
                result = await SetCacheRefreshPlanWithHttpInfoAsync(cacheRefreshPlan, id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cacheRefreshPlan"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        protected virtual (CacheRefreshPlan, string) OnSetCacheRefreshPlan(CacheRefreshPlan cacheRefreshPlan, string id)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (cacheRefreshPlan == null)
                throw new ArgumentNullException(nameof(cacheRefreshPlan));

            if (id == null)
                throw new ArgumentNullException(nameof(id));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return (cacheRefreshPlan, id);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="cacheRefreshPlan"></param>
        /// <param name="id"></param>
        protected virtual void AfterSetCacheRefreshPlan(ApiResponse<CacheRefreshPlan> apiResponse, CacheRefreshPlan cacheRefreshPlan, string id)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="cacheRefreshPlan"></param>
        /// <param name="id"></param>
        protected virtual void OnErrorSetCacheRefreshPlan(Exception exception, string pathFormat, string path, CacheRefreshPlan cacheRefreshPlan, string id)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Replaces the specified CacheRefreshPlan item using the provided definition. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cacheRefreshPlan">Definition of the CacheRefreshPlan item that updates the current item on the server.</param>
        /// <param name="id">The key (GUID or path) that uniquely identifies the object. GUID example: 01234567-89ab-cdef-0123-456789abcdef path example: path&#x3D;&#39;/folder1/folder2/item&#39; If the path itself contains single quote, it should be escaped - add another single quote.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CacheRefreshPlan"/></returns>
        public async Task<ApiResponse<CacheRefreshPlan>> SetCacheRefreshPlanWithHttpInfoAsync(CacheRefreshPlan cacheRefreshPlan, string id, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                var validatedParameters = OnSetCacheRefreshPlan(cacheRefreshPlan, id);
                cacheRefreshPlan = validatedParameters.Item1;
                id = validatedParameters.Item2;

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    uriBuilder.Host = HttpClient.BaseAddress.Host;
                    uriBuilder.Port = HttpClient.BaseAddress.Port;
                    uriBuilder.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilder.Path = ClientUtils.CONTEXT_PATH + "/CacheRefreshPlans({Id})";

                    uriBuilder.Path = uriBuilder.Path.Replace("%7BId%7D", Uri.EscapeDataString(id.ToString()));                    request.Content = (cacheRefreshPlan as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(cacheRefreshPlan, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = new HttpMethod("PUT");

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/CacheRefreshPlans({Id})", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ApiResponse<CacheRefreshPlan> apiResponse = new ApiResponse<CacheRefreshPlan>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<CacheRefreshPlan>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterSetCacheRefreshPlan(apiResponse, cacheRefreshPlan, id);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetCacheRefreshPlan(e, "/CacheRefreshPlans({Id})", uriBuilder.Path, cacheRefreshPlan, id);
                throw;
            }
        }
    }
}
