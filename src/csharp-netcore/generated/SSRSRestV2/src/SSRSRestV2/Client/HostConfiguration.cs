/*
 * SQL Server 2017 Reporting Services REST API
 *
 * The SQL Server 2017 Reporting Services REST API provides programmatic access to the report server catalog.  For example, basic CRUD operations can be done on folders, reports, KPIs, data sources, datasets, refresh plans, subscriptions, etc.     The REST API can also be used to provide more advanced functionality, such as: * Navigate the folder hierarchy * Discover the contents of a folder * Download a report definition * Modify default report parameters * Change or execute a refresh plan * A whole lot more  The REST API is a RESTful successor to the legacy [SOAP API](https://msdn.microsoft.com/library/reportservice2010.reportingservice2010.aspx).  Happy coding!  __API samples:__ https://github.com/Microsoft/Reporting-Services  __Developer documentation:__ https://docs.microsoft.com/sql/reporting-services/reporting-services-developer-documentation  __Team Blog:__ https://blogs.msdn.microsoft.com/sqlrsteamblog  __Support forums:__ https://social.msdn.microsoft.com/Forums/en-US/home?forum=sqlreportingservices 
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using SSRSRestV2.Model;

namespace SSRSRestV2.Client
{
    /// <summary>
    /// Provides hosting configuration for SSRSRestV2
    /// </summary>
    public class HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi>
        where TCacheRefreshPlansApi : class, IApi.ICacheRefreshPlansApi
        where TCatalogItemsApi : class, IApi.ICatalogItemsApi
        where TDataSetsApi : class, IApi.IDataSetsApi
        where TDataSourcesApi : class, IApi.IDataSourcesApi
        where TExtensionsApi : class, IApi.IExtensionsApi
        where TFavoriteItemsApi : class, IApi.IFavoriteItemsApi
        where TFoldersApi : class, IApi.IFoldersApi
        where TKpisApi : class, IApi.IKpisApi
        where TLinkedReportsApi : class, IApi.ILinkedReportsApi
        where TMeApi : class, IApi.IMeApi
        where TMobileReportsApi : class, IApi.IMobileReportsApi
        where TReportsApi : class, IApi.IReportsApi
        where TResourcesApi : class, IApi.IResourcesApi
        where TSessionApi : class, IApi.ISessionApi
        where TSubscriptionsApi : class, IApi.ISubscriptionsApi
        where TSystemApi : class, IApi.ISystemApi
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new AllowedActionJsonConverter());
            _jsonOptions.Converters.Add(new BulkOperationsResultJsonConverter());
            _jsonOptions.Converters.Add(new CacheOptionsJsonConverter());
            _jsonOptions.Converters.Add(new CacheRefreshPlanJsonConverter());
            _jsonOptions.Converters.Add(new CatalogItemJsonConverter());
            _jsonOptions.Converters.Add(new CatalogItemTypeConverter());
            _jsonOptions.Converters.Add(new CatalogItemTypeNullableConverter());
            _jsonOptions.Converters.Add(new CommentJsonConverter());
            _jsonOptions.Converters.Add(new CredentialsStoredInServerJsonConverter());
            _jsonOptions.Converters.Add(new CredentialsSuppliedByUserJsonConverter());
            _jsonOptions.Converters.Add(new DailyRecurrenceJsonConverter());
            _jsonOptions.Converters.Add(new DataSetJsonConverter());
            _jsonOptions.Converters.Add(new DataSet1JsonConverter());
            _jsonOptions.Converters.Add(new DataSetAggregateValueParametersJsonConverter());
            _jsonOptions.Converters.Add(new DataSetColumnsJsonConverter());
            _jsonOptions.Converters.Add(new DataSetDataJsonConverter());
            _jsonOptions.Converters.Add(new DataSetDataParametersJsonConverter());
            _jsonOptions.Converters.Add(new DataSetFieldJsonConverter());
            _jsonOptions.Converters.Add(new DataSetItemJsonConverter());
            _jsonOptions.Converters.Add(new DataSetParameterJsonConverter());
            _jsonOptions.Converters.Add(new DataSetParameterInfoJsonConverter());
            _jsonOptions.Converters.Add(new DataSetSchemaJsonConverter());
            _jsonOptions.Converters.Add(new DataSourceJsonConverter());
            _jsonOptions.Converters.Add(new DataSource1JsonConverter());
            _jsonOptions.Converters.Add(new DataSourceCheckResultJsonConverter());
            _jsonOptions.Converters.Add(new DaysOfWeekSelectorJsonConverter());
            _jsonOptions.Converters.Add(new DeleteItemsRequestJsonConverter());
            _jsonOptions.Converters.Add(new DrillthroughTargetJsonConverter());
            _jsonOptions.Converters.Add(new DrillthroughTargetTypeConverter());
            _jsonOptions.Converters.Add(new DrillthroughTargetTypeNullableConverter());
            _jsonOptions.Converters.Add(new ExpirationReferenceJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionParameterJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionSettingsJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionTypeConverter());
            _jsonOptions.Converters.Add(new ExtensionTypeNullableConverter());
            _jsonOptions.Converters.Add(new FavoriteItemJsonConverter());
            _jsonOptions.Converters.Add(new FolderJsonConverter());
            _jsonOptions.Converters.Add(new HistorySnapshotJsonConverter());
            _jsonOptions.Converters.Add(new HistorySnapshotOptionsJsonConverter());
            _jsonOptions.Converters.Add(new ItemExecutionTypeConverter());
            _jsonOptions.Converters.Add(new ItemExecutionTypeNullableConverter());
            _jsonOptions.Converters.Add(new ItemPolicyJsonConverter());
            _jsonOptions.Converters.Add(new KpiJsonConverter());
            _jsonOptions.Converters.Add(new Kpi1JsonConverter());
            _jsonOptions.Converters.Add(new KpiDataJsonConverter());
            _jsonOptions.Converters.Add(new KpiDataItemJsonConverter());
            _jsonOptions.Converters.Add(new KpiDataItemTypeConverter());
            _jsonOptions.Converters.Add(new KpiDataItemTypeNullableConverter());
            _jsonOptions.Converters.Add(new KpiSharedDataItemAggregationConverter());
            _jsonOptions.Converters.Add(new KpiSharedDataItemAggregationNullableConverter());
            _jsonOptions.Converters.Add(new KpiValueFormatConverter());
            _jsonOptions.Converters.Add(new KpiValueFormatNullableConverter());
            _jsonOptions.Converters.Add(new KpiValuesJsonConverter());
            _jsonOptions.Converters.Add(new KpiVisualizationConverter());
            _jsonOptions.Converters.Add(new KpiVisualizationNullableConverter());
            _jsonOptions.Converters.Add(new LinkedReportJsonConverter());
            _jsonOptions.Converters.Add(new LinkedReport1JsonConverter());
            _jsonOptions.Converters.Add(new ManifestItemJsonConverter());
            _jsonOptions.Converters.Add(new MinuteRecurrenceJsonConverter());
            _jsonOptions.Converters.Add(new MobileReportJsonConverter());
            _jsonOptions.Converters.Add(new MobileReport1JsonConverter());
            _jsonOptions.Converters.Add(new MobileReportManifestJsonConverter());
            _jsonOptions.Converters.Add(new MobileReportResourceGroupTypeConverter());
            _jsonOptions.Converters.Add(new MobileReportResourceGroupTypeNullableConverter());
            _jsonOptions.Converters.Add(new MobileReportThumbnailTypeConverter());
            _jsonOptions.Converters.Add(new MobileReportThumbnailTypeNullableConverter());
            _jsonOptions.Converters.Add(new MonthlyDOWRecurrenceJsonConverter());
            _jsonOptions.Converters.Add(new MonthlyRecurrenceJsonConverter());
            _jsonOptions.Converters.Add(new MonthsOfYearSelectorJsonConverter());
            _jsonOptions.Converters.Add(new MoveItemsRequestJsonConverter());
            _jsonOptions.Converters.Add(new ODataAllowedActionsJsonConverter());
            _jsonOptions.Converters.Add(new ODataCacheRefreshPlansJsonConverter());
            _jsonOptions.Converters.Add(new ODataCatalogItemsJsonConverter());
            _jsonOptions.Converters.Add(new ODataCatalogItems1JsonConverter());
            _jsonOptions.Converters.Add(new ODataCommentsJsonConverter());
            _jsonOptions.Converters.Add(new ODataDataSetsJsonConverter());
            _jsonOptions.Converters.Add(new ODataDataSourcesJsonConverter());
            _jsonOptions.Converters.Add(new ODataDependentItemsJsonConverter());
            _jsonOptions.Converters.Add(new ODataFoldersJsonConverter());
            _jsonOptions.Converters.Add(new ODataKpisJsonConverter());
            _jsonOptions.Converters.Add(new ODataLinkedReportsJsonConverter());
            _jsonOptions.Converters.Add(new ODataMobileReportJsonConverter());
            _jsonOptions.Converters.Add(new ODataPropertiesJsonConverter());
            _jsonOptions.Converters.Add(new ODataProperties1JsonConverter());
            _jsonOptions.Converters.Add(new ODataProperties2JsonConverter());
            _jsonOptions.Converters.Add(new ODataQueryFieldsJsonConverter());
            _jsonOptions.Converters.Add(new ODataReportParameterDefinitionsJsonConverter());
            _jsonOptions.Converters.Add(new ODataReportsJsonConverter());
            _jsonOptions.Converters.Add(new ODataResourcesJsonConverter());
            _jsonOptions.Converters.Add(new OdataErrorJsonConverter());
            _jsonOptions.Converters.Add(new OdataErrorDetailJsonConverter());
            _jsonOptions.Converters.Add(new OdataErrorMainJsonConverter());
            _jsonOptions.Converters.Add(new ParameterValueJsonConverter());
            _jsonOptions.Converters.Add(new PolicyJsonConverter());
            _jsonOptions.Converters.Add(new PropertyJsonConverter());
            _jsonOptions.Converters.Add(new QueryJsonConverter());
            _jsonOptions.Converters.Add(new QueryFieldsRequestJsonConverter());
            _jsonOptions.Converters.Add(new ReportJsonConverter());
            _jsonOptions.Converters.Add(new Report1JsonConverter());
            _jsonOptions.Converters.Add(new ReportHistorySnapshotsOptionsJsonConverter());
            _jsonOptions.Converters.Add(new ReportHistorySnapshotsOptionsScheduleJsonConverter());
            _jsonOptions.Converters.Add(new ReportParameterDefinitionJsonConverter());
            _jsonOptions.Converters.Add(new ReportParameterDefinitionPatchJsonConverter());
            _jsonOptions.Converters.Add(new ReportParameterStateConverter());
            _jsonOptions.Converters.Add(new ReportParameterStateNullableConverter());
            _jsonOptions.Converters.Add(new ReportParameterTypeConverter());
            _jsonOptions.Converters.Add(new ReportParameterTypeNullableConverter());
            _jsonOptions.Converters.Add(new ReportParameterVisibilityConverter());
            _jsonOptions.Converters.Add(new ReportParameterVisibilityNullableConverter());
            _jsonOptions.Converters.Add(new ResourceJsonConverter());
            _jsonOptions.Converters.Add(new ResourceGroupJsonConverter());
            _jsonOptions.Converters.Add(new ResourceItemJsonConverter());
            _jsonOptions.Converters.Add(new ResourceItemAllOfJsonConverter());
            _jsonOptions.Converters.Add(new RoleJsonConverter());
            _jsonOptions.Converters.Add(new ScheduleDefinitionJsonConverter());
            _jsonOptions.Converters.Add(new ScheduleRecurrenceJsonConverter());
            _jsonOptions.Converters.Add(new ScheduleReferenceJsonConverter());
            _jsonOptions.Converters.Add(new SubscriptionJsonConverter());
            _jsonOptions.Converters.Add(new SystemInfoJsonConverter());
            _jsonOptions.Converters.Add(new SystemPolicyJsonConverter());
            _jsonOptions.Converters.Add(new ThumbnailItemJsonConverter());
            _jsonOptions.Converters.Add(new ThumbnailItemAllOfJsonConverter());
            _jsonOptions.Converters.Add(new UpdateCacheSnapshotResultJsonConverter());
            _jsonOptions.Converters.Add(new UserJsonConverter());
            _jsonOptions.Converters.Add(new UserCredentialsJsonConverter());
            _jsonOptions.Converters.Add(new ValidValueJsonConverter());
            _jsonOptions.Converters.Add(new WeekNumberEnumConverter());
            _jsonOptions.Converters.Add(new WeekNumberEnumNullableConverter());
            _jsonOptions.Converters.Add(new WeeklyRecurrenceJsonConverter());
            _services.AddSingleton(new JsonSerializerOptionsProvider(_jsonOptions));
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddTransient<TCacheRefreshPlansApi, TCacheRefreshPlansApi>();
            _services.AddTransient<TCatalogItemsApi, TCatalogItemsApi>();
            _services.AddTransient<TDataSetsApi, TDataSetsApi>();
            _services.AddTransient<TDataSourcesApi, TDataSourcesApi>();
            _services.AddTransient<TExtensionsApi, TExtensionsApi>();
            _services.AddTransient<TFavoriteItemsApi, TFavoriteItemsApi>();
            _services.AddTransient<TFoldersApi, TFoldersApi>();
            _services.AddTransient<TKpisApi, TKpisApi>();
            _services.AddTransient<TLinkedReportsApi, TLinkedReportsApi>();
            _services.AddTransient<TMeApi, TMeApi>();
            _services.AddTransient<TMobileReportsApi, TMobileReportsApi>();
            _services.AddTransient<TReportsApi, TReportsApi>();
            _services.AddTransient<TResourcesApi, TResourcesApi>();
            _services.AddTransient<TSessionApi, TSessionApi>();
            _services.AddTransient<TSubscriptionsApi, TSubscriptionsApi>();
            _services.AddTransient<TSystemApi, TSystemApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi> AddSSRSRestV2ClientHttpClients
        (
            Action<HttpClient> client = null, Action<IHttpClientBuilder> builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IApi.ICacheRefreshPlansApi, TCacheRefreshPlansApi>(client));
            builders.Add(_services.AddHttpClient<IApi.ICatalogItemsApi, TCatalogItemsApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IDataSetsApi, TDataSetsApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IDataSourcesApi, TDataSourcesApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IExtensionsApi, TExtensionsApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IFavoriteItemsApi, TFavoriteItemsApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IFoldersApi, TFoldersApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IKpisApi, TKpisApi>(client));
            builders.Add(_services.AddHttpClient<IApi.ILinkedReportsApi, TLinkedReportsApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IMeApi, TMeApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IMobileReportsApi, TMobileReportsApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IReportsApi, TReportsApi>(client));
            builders.Add(_services.AddHttpClient<IApi.IResourcesApi, TResourcesApi>(client));
            builders.Add(_services.AddHttpClient<IApi.ISessionApi, TSessionApi>(client));
            builders.Add(_services.AddHttpClient<IApi.ISubscriptionsApi, TSubscriptionsApi>(client));
            builders.Add(_services.AddHttpClient<IApi.ISystemApi, TSystemApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi> ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi> AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi> AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration<TCacheRefreshPlansApi, TCatalogItemsApi, TDataSetsApi, TDataSourcesApi, TExtensionsApi, TFavoriteItemsApi, TFoldersApi, TKpisApi, TLinkedReportsApi, TMeApi, TMobileReportsApi, TReportsApi, TResourcesApi, TSessionApi, TSubscriptionsApi, TSystemApi> UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
